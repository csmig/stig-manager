{
	"info": {
		"_postman_id": "f5579db7-a915-465d-a70f-0a17d0f2e4ef",
		"name": "STIGMan tests",
		"description": "An API for managing evaluations of Security Technical Implementation Guide (STIG) assessments.\n\nContact Support:\n Name: Carl Smigielski\n Email: carl.a.smigielski@saic.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LoadTestData",
			"item": [
				{
					"name": "Import and overwrite application data",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "importFile",
									"type": "file",
									"src": "/E:/gits/github/stig-manager/test/stig-manager-appdata.json.zip"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/op/appdata?elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"op",
								"appdata"
							],
							"query": [
								{
									"key": "elevate",
									"value": "true",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"value": "<binary>",
											"description": {
												"content": "",
												"type": "text/plain"
											},
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
						},
						{
							"name": "Import successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"value": "<binary>",
											"description": {
												"content": "",
												"type": "text/plain"
											},
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"consequat do irure\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GETs",
			"item": [
				{
					"name": "Collection GET",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Get the Assets in a Collection attached to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "db312665-bfbf-41e4-abaa-3d8a2e385363",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"let collectionKeys = [\r",
																	"    \"collectionId\",\r",
																	"    \"name\",\r",
																	"    \"workflow\",\r",
																	"    \"metadata\"\r",
																	"]\r",
																	"let assetKeys = [\r",
																	"    \"assetId\",\r",
																	"    \"name\",\r",
																	"    \"collectionId\",\r",
																	"    \"restrictedUserAccess\"\r",
																	"]\r",
																	"\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    for (let asset of jsonData){\r",
																	"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
																	"\r",
																	"        // let collectionNames = _.map(jsonData, 'name');\r",
																	"\r",
																	"        // pm.test(\"Check that proper assets are returned\", function () {\r",
																	"            pm.expect(asset.name).to.match(regex);\r",
																	"            // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
																	"        // });\r",
																	"\r",
																	"        // if (pm.request.url.getQueryString().match(/projection=userGrants/)) {\r",
																	"        //     for (let grant of asset.grants){\r",
																	"        //         pm.expect(grant).to.have.all.keys(grantKeys);\r",
																	"        //         pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
																	"        //     }\r",
																	"        // }\r",
																	"\r",
																	"    };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"stigs",
																		":benchmarkId",
																		"assets"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "Revision response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"stigs",
																		":benchmarkId",
																		"assets"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"ipsum Excepteur no\",\n  \"name\": \"culpa aute anim esse Lorem\"\n },\n {\n  \"assetId\": \"Lorem adipisicing ad\",\n  \"name\": \"ut amet deserunt aute\"\n }\n]"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Return the STIGs mapped in the specified Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eafb3dd6-3ab4-4cab-8765-babe59b1d0e2",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigKeys = [\r",
															"    \"title\",\r",
															"    \"ruleCount\",\r",
															"    \"benchmarkId\",\r",
															"    \"lastRevisionDate\",\r",
															"    \"lastRevisionStr\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let stig of jsonData){\r",
															"        pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"benchmarkId\": \"magna dolor\",\n  \"lastRevisionStr\": \"consequat ex\",\n  \"lastRevisionDate\": \"proident dolor\",\n  \"title\": \"nulla qui ut\",\n  \"ruleCount\": 24492673\n },\n {\n  \"benchmarkId\": \"ad qui\",\n  \"lastRevisionStr\": \"anim ad laboris\",\n  \"lastRevisionDate\": \"exercitation sint\",\n  \"title\": \"pariatur quis sunt enim dolore\",\n  \"ruleCount\": 23301812\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "grants/{userId}/access",
									"item": [
										{
											"name": "Return stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "580fe0db-81a1-4c9b-b1f9-52107a8976fc",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigAssetGrantKeys = [\r",
															"    \"benchmarkId\",\r",
															"    \"asset\"\r",
															"]\r",
															"\r",
															"let assetKeys = [\r",
															"    \"name\",\r",
															"    \"assetId\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"\r",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"    var regex = new RegExp(assetMatchString);\r",
															"    \r",
															"    for (let stigAssetGrant of jsonData){\r",
															"        pm.expect(stigAssetGrant).to.have.all.keys(stigAssetGrantKeys);\r",
															"        pm.expect(stigAssetGrant.benchmarkId).to.be.oneOf(validStigs);\r",
															"        pm.expect(stigAssetGrant.asset).to.have.all.keys(assetKeys);\r",
															"        \r",
															"        pm.expect(stigAssetGrant.asset.name).to.match(regex);\r",
															"\r",
															"        // pm.expect(stigAssetGrant.asset).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "userId",
															"value": "{{testUserId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Findings",
									"item": [
										{
											"name": "Return the Findings for the specified Collection by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f594f15-7a70-46e4-bede-b59ab96973b9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"ruleId\": \"consequat do commodo\",\n  \"ruleTitle\": \"elit proident dolore mollit dolor\",\n  \"groupId\": \"in sint dolore\",\n  \"groupTitle\": \"consectetur do veniam laboris Duis\",\n  \"severity\": \"medium\",\n  \"ccis\": [\n   {\n    \"cci\": \"cupidatat amet consequat labore\",\n    \"emassAp\": \"Excepteur ut culpa in\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"pariatur tempor\",\n      \"textRefNist\": \"aute ipsum tempor do\",\n      \"parentControl\": \"aute eu ullamco esse\"\n     },\n     {\n      \"indexDisa\": \"sit quis\",\n      \"textRefNist\": \"adipisicing enim\",\n      \"parentControl\": \"incididunt ullamco aliqua cillum\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"sed dolore\",\n    \"emassAp\": \"proident et ipsum voluptate commodo\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"consequa\",\n      \"textRefNist\": \"labore Excepteur consectetur aute\",\n      \"parentControl\": \"dolor commodo\"\n     },\n     {\n      \"indexDisa\": \"ullamco veniam labore\",\n      \"textRefNist\": \"consequat labore irure\",\n      \"parentControl\": \"sunt\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"nostrud elit cillum pariatur in\",\n   \"Lorem et proident anim dolore\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"laboris officia do\",\n    \"name\": \"dolore ex labore aute in\"\n   },\n   {\n    \"assetId\": \"ulla\",\n    \"name\": \"fugiat cupidatat\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"Ut Excepteur\",\n  \"ruleTitle\": \"irure est Lorem ut\",\n  \"groupId\": \"reprehenderit Duis\",\n  \"groupTitle\": \"cillum Lorem laborum dolor do\",\n  \"severity\": \"high\",\n  \"ccis\": [\n   {\n    \"cci\": \"officia dolor laborum\",\n    \"emassAp\": \"in do proident nostrud\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"proident id deserunt\",\n      \"textRefNist\": \"nostrud aute fugiat ex\",\n      \"parentControl\": \"in in consequat\"\n     },\n     {\n      \"indexDisa\": \"in do sint culpa anim\",\n      \"textRefNist\": \"in est irure ex\",\n      \"parentControl\": \"labore\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"laboris aliquip non\",\n    \"emassAp\": \"deserunt aliquip\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"adipisicing minim amet\",\n      \"textRefNist\": \"culpa nulla quis ut\",\n      \"parentControl\": \"ullamco adipisicing Lorem dolore\"\n     },\n     {\n      \"indexDisa\": \"magna quis sed\",\n      \"textRefNist\": \"consequat eu deserunt exercita\",\n      \"parentControl\": \"in\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"in aliqua\",\n   \"sit ut officia proident\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"eu ad\",\n    \"name\": \"ea laborum veniam in commodo\"\n   },\n   {\n    \"assetId\": \"dolore elit veniam in\",\n    \"name\": \"cupidatat do qui\"\n   }\n  ]\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return the Findings for the specified Collection by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "999b07d5-3f8f-400f-b6f3-a988d426e6e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=groupId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"ruleId\": \"consequat do commodo\",\n  \"ruleTitle\": \"elit proident dolore mollit dolor\",\n  \"groupId\": \"in sint dolore\",\n  \"groupTitle\": \"consectetur do veniam laboris Duis\",\n  \"severity\": \"medium\",\n  \"ccis\": [\n   {\n    \"cci\": \"cupidatat amet consequat labore\",\n    \"emassAp\": \"Excepteur ut culpa in\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"pariatur tempor\",\n      \"textRefNist\": \"aute ipsum tempor do\",\n      \"parentControl\": \"aute eu ullamco esse\"\n     },\n     {\n      \"indexDisa\": \"sit quis\",\n      \"textRefNist\": \"adipisicing enim\",\n      \"parentControl\": \"incididunt ullamco aliqua cillum\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"sed dolore\",\n    \"emassAp\": \"proident et ipsum voluptate commodo\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"consequa\",\n      \"textRefNist\": \"labore Excepteur consectetur aute\",\n      \"parentControl\": \"dolor commodo\"\n     },\n     {\n      \"indexDisa\": \"ullamco veniam labore\",\n      \"textRefNist\": \"consequat labore irure\",\n      \"parentControl\": \"sunt\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"nostrud elit cillum pariatur in\",\n   \"Lorem et proident anim dolore\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"laboris officia do\",\n    \"name\": \"dolore ex labore aute in\"\n   },\n   {\n    \"assetId\": \"ulla\",\n    \"name\": \"fugiat cupidatat\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"Ut Excepteur\",\n  \"ruleTitle\": \"irure est Lorem ut\",\n  \"groupId\": \"reprehenderit Duis\",\n  \"groupTitle\": \"cillum Lorem laborum dolor do\",\n  \"severity\": \"high\",\n  \"ccis\": [\n   {\n    \"cci\": \"officia dolor laborum\",\n    \"emassAp\": \"in do proident nostrud\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"proident id deserunt\",\n      \"textRefNist\": \"nostrud aute fugiat ex\",\n      \"parentControl\": \"in in consequat\"\n     },\n     {\n      \"indexDisa\": \"in do sint culpa anim\",\n      \"textRefNist\": \"in est irure ex\",\n      \"parentControl\": \"labore\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"laboris aliquip non\",\n    \"emassAp\": \"deserunt aliquip\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"adipisicing minim amet\",\n      \"textRefNist\": \"culpa nulla quis ut\",\n      \"parentControl\": \"ullamco adipisicing Lorem dolore\"\n     },\n     {\n      \"indexDisa\": \"magna quis sed\",\n      \"textRefNist\": \"consequat eu deserunt exercita\",\n      \"parentControl\": \"in\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"in aliqua\",\n   \"sit ut officia proident\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"eu ad\",\n    \"name\": \"ea laborum veniam in commodo\"\n   },\n   {\n    \"assetId\": \"dolore elit veniam in\",\n    \"name\": \"cupidatat do qui\"\n   }\n  ]\n }\n]"
												}
											]
										},
										{
											"name": "Return the Findings for the specified Collection by cci",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0381c843-6f73-4aba-811e-3d758248cc0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=cci&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "cci",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"ruleId\": \"consequat do commodo\",\n  \"ruleTitle\": \"elit proident dolore mollit dolor\",\n  \"groupId\": \"in sint dolore\",\n  \"groupTitle\": \"consectetur do veniam laboris Duis\",\n  \"severity\": \"medium\",\n  \"ccis\": [\n   {\n    \"cci\": \"cupidatat amet consequat labore\",\n    \"emassAp\": \"Excepteur ut culpa in\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"pariatur tempor\",\n      \"textRefNist\": \"aute ipsum tempor do\",\n      \"parentControl\": \"aute eu ullamco esse\"\n     },\n     {\n      \"indexDisa\": \"sit quis\",\n      \"textRefNist\": \"adipisicing enim\",\n      \"parentControl\": \"incididunt ullamco aliqua cillum\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"sed dolore\",\n    \"emassAp\": \"proident et ipsum voluptate commodo\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"consequa\",\n      \"textRefNist\": \"labore Excepteur consectetur aute\",\n      \"parentControl\": \"dolor commodo\"\n     },\n     {\n      \"indexDisa\": \"ullamco veniam labore\",\n      \"textRefNist\": \"consequat labore irure\",\n      \"parentControl\": \"sunt\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"nostrud elit cillum pariatur in\",\n   \"Lorem et proident anim dolore\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"laboris officia do\",\n    \"name\": \"dolore ex labore aute in\"\n   },\n   {\n    \"assetId\": \"ulla\",\n    \"name\": \"fugiat cupidatat\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"Ut Excepteur\",\n  \"ruleTitle\": \"irure est Lorem ut\",\n  \"groupId\": \"reprehenderit Duis\",\n  \"groupTitle\": \"cillum Lorem laborum dolor do\",\n  \"severity\": \"high\",\n  \"ccis\": [\n   {\n    \"cci\": \"officia dolor laborum\",\n    \"emassAp\": \"in do proident nostrud\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"proident id deserunt\",\n      \"textRefNist\": \"nostrud aute fugiat ex\",\n      \"parentControl\": \"in in consequat\"\n     },\n     {\n      \"indexDisa\": \"in do sint culpa anim\",\n      \"textRefNist\": \"in est irure ex\",\n      \"parentControl\": \"labore\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"laboris aliquip non\",\n    \"emassAp\": \"deserunt aliquip\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"adipisicing minim amet\",\n      \"textRefNist\": \"culpa nulla quis ut\",\n      \"parentControl\": \"ullamco adipisicing Lorem dolore\"\n     },\n     {\n      \"indexDisa\": \"magna quis sed\",\n      \"textRefNist\": \"consequat eu deserunt exercita\",\n      \"parentControl\": \"in\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"in aliqua\",\n   \"sit ut officia proident\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"eu ad\",\n    \"name\": \"ea laborum veniam in commodo\"\n   },\n   {\n    \"assetId\": \"dolore elit veniam in\",\n    \"name\": \"cupidatat do qui\"\n   }\n  ]\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return the Findings for the specified Collection for benchmarkId x ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a05c322-5b02-4166-a463-5a85cfc9fe75",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&benchmarkId={{testBenchmark}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"ruleId\": \"consequat do commodo\",\n  \"ruleTitle\": \"elit proident dolore mollit dolor\",\n  \"groupId\": \"in sint dolore\",\n  \"groupTitle\": \"consectetur do veniam laboris Duis\",\n  \"severity\": \"medium\",\n  \"ccis\": [\n   {\n    \"cci\": \"cupidatat amet consequat labore\",\n    \"emassAp\": \"Excepteur ut culpa in\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"pariatur tempor\",\n      \"textRefNist\": \"aute ipsum tempor do\",\n      \"parentControl\": \"aute eu ullamco esse\"\n     },\n     {\n      \"indexDisa\": \"sit quis\",\n      \"textRefNist\": \"adipisicing enim\",\n      \"parentControl\": \"incididunt ullamco aliqua cillum\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"sed dolore\",\n    \"emassAp\": \"proident et ipsum voluptate commodo\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"consequa\",\n      \"textRefNist\": \"labore Excepteur consectetur aute\",\n      \"parentControl\": \"dolor commodo\"\n     },\n     {\n      \"indexDisa\": \"ullamco veniam labore\",\n      \"textRefNist\": \"consequat labore irure\",\n      \"parentControl\": \"sunt\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"nostrud elit cillum pariatur in\",\n   \"Lorem et proident anim dolore\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"laboris officia do\",\n    \"name\": \"dolore ex labore aute in\"\n   },\n   {\n    \"assetId\": \"ulla\",\n    \"name\": \"fugiat cupidatat\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"Ut Excepteur\",\n  \"ruleTitle\": \"irure est Lorem ut\",\n  \"groupId\": \"reprehenderit Duis\",\n  \"groupTitle\": \"cillum Lorem laborum dolor do\",\n  \"severity\": \"high\",\n  \"ccis\": [\n   {\n    \"cci\": \"officia dolor laborum\",\n    \"emassAp\": \"in do proident nostrud\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"proident id deserunt\",\n      \"textRefNist\": \"nostrud aute fugiat ex\",\n      \"parentControl\": \"in in consequat\"\n     },\n     {\n      \"indexDisa\": \"in do sint culpa anim\",\n      \"textRefNist\": \"in est irure ex\",\n      \"parentControl\": \"labore\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"laboris aliquip non\",\n    \"emassAp\": \"deserunt aliquip\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"adipisicing minim amet\",\n      \"textRefNist\": \"culpa nulla quis ut\",\n      \"parentControl\": \"ullamco adipisicing Lorem dolore\"\n     },\n     {\n      \"indexDisa\": \"magna quis sed\",\n      \"textRefNist\": \"consequat eu deserunt exercita\",\n      \"parentControl\": \"in\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"in aliqua\",\n   \"sit ut officia proident\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"eu ad\",\n    \"name\": \"ea laborum veniam in commodo\"\n   },\n   {\n    \"assetId\": \"dolore elit veniam in\",\n    \"name\": \"cupidatat do qui\"\n   }\n  ]\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return the Findings for the specified Collection for asset x ruleId Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7ba8c10-6a21-4e8a-b296-aa8e07d25b15",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&assetId={{testAsset}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionFinding response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"ruleId\": \"consequat do commodo\",\n  \"ruleTitle\": \"elit proident dolore mollit dolor\",\n  \"groupId\": \"in sint dolore\",\n  \"groupTitle\": \"consectetur do veniam laboris Duis\",\n  \"severity\": \"medium\",\n  \"ccis\": [\n   {\n    \"cci\": \"cupidatat amet consequat labore\",\n    \"emassAp\": \"Excepteur ut culpa in\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"pariatur tempor\",\n      \"textRefNist\": \"aute ipsum tempor do\",\n      \"parentControl\": \"aute eu ullamco esse\"\n     },\n     {\n      \"indexDisa\": \"sit quis\",\n      \"textRefNist\": \"adipisicing enim\",\n      \"parentControl\": \"incididunt ullamco aliqua cillum\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"sed dolore\",\n    \"emassAp\": \"proident et ipsum voluptate commodo\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"consequa\",\n      \"textRefNist\": \"labore Excepteur consectetur aute\",\n      \"parentControl\": \"dolor commodo\"\n     },\n     {\n      \"indexDisa\": \"ullamco veniam labore\",\n      \"textRefNist\": \"consequat labore irure\",\n      \"parentControl\": \"sunt\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"nostrud elit cillum pariatur in\",\n   \"Lorem et proident anim dolore\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"laboris officia do\",\n    \"name\": \"dolore ex labore aute in\"\n   },\n   {\n    \"assetId\": \"ulla\",\n    \"name\": \"fugiat cupidatat\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"Ut Excepteur\",\n  \"ruleTitle\": \"irure est Lorem ut\",\n  \"groupId\": \"reprehenderit Duis\",\n  \"groupTitle\": \"cillum Lorem laborum dolor do\",\n  \"severity\": \"high\",\n  \"ccis\": [\n   {\n    \"cci\": \"officia dolor laborum\",\n    \"emassAp\": \"in do proident nostrud\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"proident id deserunt\",\n      \"textRefNist\": \"nostrud aute fugiat ex\",\n      \"parentControl\": \"in in consequat\"\n     },\n     {\n      \"indexDisa\": \"in do sint culpa anim\",\n      \"textRefNist\": \"in est irure ex\",\n      \"parentControl\": \"labore\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"laboris aliquip non\",\n    \"emassAp\": \"deserunt aliquip\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"adipisicing minim amet\",\n      \"textRefNist\": \"culpa nulla quis ut\",\n      \"parentControl\": \"ullamco adipisicing Lorem dolore\"\n     },\n     {\n      \"indexDisa\": \"magna quis sed\",\n      \"textRefNist\": \"consequat eu deserunt exercita\",\n      \"parentControl\": \"in\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"in aliqua\",\n   \"sit ut officia proident\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"eu ad\",\n    \"name\": \"ea laborum veniam in commodo\"\n   },\n   {\n    \"assetId\": \"dolore elit veniam in\",\n    \"name\": \"cupidatat do qui\"\n   }\n  ]\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=<string>&acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"findings"
															],
															"query": [
																{
																	"key": "aggregator",
																	"value": "<string>"
																},
																{
																	"key": "acceptedOnly",
																	"value": "false"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b79f1d4d-8127-4dee-acd3-982d5a769364",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7b2ffb52-00c2-4878-9ea3-4c64441983f8",
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Response JSON is an array with expected length\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
													"",
													"});",
													"",
													"",
													"",
													"",
													"let findingKeys = []",
													"let assetsKeys = [",
													"    \"name\",",
													"    \"assetId\"",
													"]",
													"",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=ruleId/)) {",
													"    findingKeys = [",
													"        \"ruleId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"if (pm.request.url.getQueryString().match(/aggregator=groupId/)) {",
													"    findingKeys = [",
													"        \"groupId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=cci/)) {",
													"    findingKeys = [",
													"        \"cci\",",
													"        \"definition\",",
													"        \"apAcronym\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/projection=rules/)) {",
													"    findingKeys.push(\"rules\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=groups/)) {",
													"    findingKeys.push(\"groups\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"    findingKeys.push(\"assets\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"    findingKeys.push(\"stigs\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=ccis/)) {",
													"    findingKeys.push(\"ccis\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=poamRarSummary/)) {",
													"    findingKeys.push(\"poamRarSummary\")",
													"}",
													"",
													"pm.test(\"Each item in response has requested properties and values\", function () {",
													"    for (let item of jsonData){",
													"        pm.test(\"Check if object contains all provided keys\", function () {",
													"            pm.expect(item).to.have.all.keys(findingKeys);",
													"        });",
													"",
													"        if (pm.request.url.getQueryString().match(/workflow=continuous/)) {",
													"            pm.expect(item.workflow).to.eql(\"continuous\");",
													"        }",
													"",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"            pm.expect(item).to.have.property('assets');",
													"            let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"            var regex = new RegExp(assetMatchString);",
													"            for (let asset of item.assets){",
													"                pm.expect(asset).to.have.all.keys(assetsKeys);",
													"                pm.expect(asset.name).to.match(regex);",
													"",
													"",
													"            }",
													"        }",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
													"            // console.log(\"checking statistics projection\");",
													"            pm.expect(item).to.have.property('statistics');",
													"            pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
													"",
													"        }",
													"",
													"        // if (user == \"lvl1\"  ) {",
													"            let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));",
													"            for (let stig of item.stigs){",
													"                pm.expect(stig).to.be.oneOf(validStigs);",
													"            // }",
													"",
													"}",
													"",
													"    };",
													"",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CKL",
									"item": [
										{
											"name": "Return the Checklist for the supplied Collection and STIG-latest",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a3c48e58-956c-4764-b2ad-8fbd53c2c168",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "latest",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": [
												{
													"name": "CollectionProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"checklists",
																":benchmarkId",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "benchmarkId"
																},
																{
																	"key": "revisionStr"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"ruleId\": \"ex aute sunt\",\n \"ruleTitle\": \"enim est ut\",\n \"groupId\": \"adipisicing\",\n \"groupTitle\": \"officia magna deserunt nisi\",\n \"severity\": \"medium\",\n \"autoCheckAvailable\": false,\n \"counts\": {\n  \"results\": {\n   \"pass\": -70896812,\n   \"fail\": -4503341,\n   \"notapplicable\": 93498730,\n   \"notchecked\": 76406839\n  },\n  \"statuses\": {\n   \"saved\": 56214696,\n   \"submitted\": 29335437,\n   \"accepted\": -12779016,\n   \"rejected\": 44381039\n  }\n }\n}"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"checklists",
																":benchmarkId",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "benchmarkId"
																},
																{
																	"key": "revisionStr"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return the Checklist for the supplied Collection and STIG-revStr",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1d2b9b6-881a-4ccb-961f-f41b76dfbec3",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "{{testRev}}",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"checklists",
																":benchmarkId",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "benchmarkId"
																},
																{
																	"key": "revisionStr"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "CollectionProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"checklists",
																":benchmarkId",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "benchmarkId"
																},
																{
																	"key": "revisionStr"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"ruleId\": \"ex aute sunt\",\n \"ruleTitle\": \"enim est ut\",\n \"groupId\": \"adipisicing\",\n \"groupTitle\": \"officia magna deserunt nisi\",\n \"severity\": \"medium\",\n \"autoCheckAvailable\": false,\n \"counts\": {\n  \"results\": {\n   \"pass\": -70896812,\n   \"fail\": -4503341,\n   \"notapplicable\": 93498730,\n   \"notchecked\": 76406839\n  },\n  \"statuses\": {\n   \"saved\": 56214696,\n   \"submitted\": 29335437,\n   \"accepted\": -12779016,\n   \"rejected\": 44381039\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "poam",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "status",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Return a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64e64008-81ec-4331-8f93-ef4bce66f728",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\",\r",
													"    \"description\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"user\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let ownerKeys = [\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"    // ,\r",
													"    // \"display\",\r",
													"    // \"email\"\r",
													"]\r",
													"\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"assetCount\",\r",
													"    \"grantCount\",\r",
													"    \"checklistCount\"\r",
													"]\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"    collectionKeys.push(\"assets\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"    collectionKeys.push(\"grants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    collectionKeys.push(\"stigs\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"    collectionKeys.push(\"owners\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"    collectionKeys.push(\"statistics\")\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(collectionKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    var regex = new RegExp(collectionMatchString);\r",
													"    pm.test(\"Check that proper Collections are returned\", function () {\r",
													"        pm.expect(jsonData.name).to.match(regex);\r",
													"    });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=emass/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"emass\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=continuous/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"continuous\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"        var assetRegex = new RegExp(assetMatchString);\r",
													"        for (let asset of jsonData.assets){\r",
													"            pm.expect(asset).to.have.property('name');\r",
													"            pm.expect(asset).to.have.property('assetId');\r",
													"            pm.expect(asset.name).to.match(assetRegex);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        for (let grant of jsonData.grants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        for (let owner of jsonData.owners){\r",
													"            pm.expect(owner).to.have.all.keys(ownerKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"collectionId\": \"et\",\n \"name\": \"culpa sint\",\n \"description\": \"esse dolor amet in tempor\",\n \"workflow\": \"continuous\",\n \"metadata\": \"v\",\n \"created\": \"sit Duis\",\n \"assets\": [\n  {\n   \"assetId\": \"laboris tempor\",\n   \"name\": \"sed anim ut ad fugiat\"\n  },\n  {\n   \"assetId\": \"voluptate non\",\n   \"name\": \"Ut quis i\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"ea in ullamco velit\",\n   \"lastRevisionStr\": \"irure nisi occaecat do tempor\",\n   \"lastRevisionDate\": \"fugiat aliquip\",\n   \"title\": \"anim sunt eiusmod Duis\",\n   \"ruleCount\": -58767467\n  },\n  {\n   \"benchmarkId\": \"Ut commodo dolor\",\n   \"lastRevisionStr\": \"voluptate pariatur\",\n   \"lastRevisionDate\": \"dolor veniam\",\n   \"title\": \"proident ex\",\n   \"ruleCount\": 93488221\n  }\n ],\n \"grants\": [\n  {\n   \"user\": {\n    \"userId\": \"nostrud\",\n    \"username\": \"laborum irure mollit dolor\"\n   },\n   \"accessLevel\": 2\n  },\n  {\n   \"user\": {\n    \"userId\": \"adipisicing pariatur velit sed non\",\n    \"username\": \"quis eiusmod dolor reprehenderit\"\n   },\n   \"accessLevel\": 2\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Collections various params",
							"item": [
								{
									"name": "Return a list of Collections accessible to the requester TEST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12c6c87f-c553-4556-8466-8fb9a807cc0b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?workflow=emass&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow."
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"collectionId\": \"nostrud officia\",\n  \"name\": \"elit Lorem Duis\",\n  \"description\": \"culpa et minim\",\n  \"workflow\": \"continuous\",\n  \"metadata\": \"deserunt eiusmod\",\n  \"created\": \"sed in deserunt\",\n  \"owners\": [\n   {\n    \"userId\": \"dolor\",\n    \"username\": \"consectetur est aliqua aliquip voluptate\"\n   },\n   {\n    \"userId\": \"voluptate eiusmod dolore Excepteur in\",\n    \"username\": \"quis qui deserunt nulla\"\n   }\n  ],\n  \"statistics\": \"cupidatat Ut enim ullamco\"\n },\n {\n  \"collectionId\": \"si\",\n  \"name\": \"id pariatur\",\n  \"description\": \"sint\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Duis laboris\",\n  \"created\": \"dolor eiusmod mollit est\",\n  \"owners\": [\n   {\n    \"userId\": \"ei\",\n    \"username\": \"sunt mollit sint fugiat reprehenderit\"\n   },\n   {\n    \"userId\": \"sint veniam\",\n    \"username\": \"in dolore aute\"\n   }\n  ],\n  \"statistics\": \"ad sunt\"\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Return a list of Collections accessible to the requester No Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "804e36df-1bc1-449e-9bf0-5e0953b9689c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"collectionId\": \"nostrud officia\",\n  \"name\": \"elit Lorem Duis\",\n  \"description\": \"culpa et minim\",\n  \"workflow\": \"continuous\",\n  \"metadata\": \"deserunt eiusmod\",\n  \"created\": \"sed in deserunt\",\n  \"owners\": [\n   {\n    \"userId\": \"dolor\",\n    \"username\": \"consectetur est aliqua aliquip voluptate\"\n   },\n   {\n    \"userId\": \"voluptate eiusmod dolore Excepteur in\",\n    \"username\": \"quis qui deserunt nulla\"\n   }\n  ],\n  \"statistics\": \"cupidatat Ut enim ullamco\"\n },\n {\n  \"collectionId\": \"si\",\n  \"name\": \"id pariatur\",\n  \"description\": \"sint\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Duis laboris\",\n  \"created\": \"dolor eiusmod mollit est\",\n  \"owners\": [\n   {\n    \"userId\": \"ei\",\n    \"username\": \"sunt mollit sint fugiat reprehenderit\"\n   },\n   {\n    \"userId\": \"sint veniam\",\n    \"username\": \"in dolore aute\"\n   }\n  ],\n  \"statistics\": \"ad sunt\"\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Return a list of Collections accessible to the requester NAME",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db7c0acd-57f2-496e-b5a4-0bd1bfc4ce3c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?name={{collectionMatchString}}&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name"
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"collectionId\": \"nostrud officia\",\n  \"name\": \"elit Lorem Duis\",\n  \"description\": \"culpa et minim\",\n  \"workflow\": \"continuous\",\n  \"metadata\": \"deserunt eiusmod\",\n  \"created\": \"sed in deserunt\",\n  \"owners\": [\n   {\n    \"userId\": \"dolor\",\n    \"username\": \"consectetur est aliqua aliquip voluptate\"\n   },\n   {\n    \"userId\": \"voluptate eiusmod dolore Excepteur in\",\n    \"username\": \"quis qui deserunt nulla\"\n   }\n  ],\n  \"statistics\": \"cupidatat Ut enim ullamco\"\n },\n {\n  \"collectionId\": \"si\",\n  \"name\": \"id pariatur\",\n  \"description\": \"sint\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Duis laboris\",\n  \"created\": \"dolor eiusmod mollit est\",\n  \"owners\": [\n   {\n    \"userId\": \"ei\",\n    \"username\": \"sunt mollit sint fugiat reprehenderit\"\n   },\n   {\n    \"userId\": \"sint veniam\",\n    \"username\": \"in dolore aute\"\n   }\n  ],\n  \"statistics\": \"ad sunt\"\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Return a list of Collections accessible to the requester WORKFLOW",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fc7efdc-26a2-49d3-969b-55f2984bf7f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?workflow=emass&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow."
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"collectionId\": \"nostrud officia\",\n  \"name\": \"elit Lorem Duis\",\n  \"description\": \"culpa et minim\",\n  \"workflow\": \"continuous\",\n  \"metadata\": \"deserunt eiusmod\",\n  \"created\": \"sed in deserunt\",\n  \"owners\": [\n   {\n    \"userId\": \"dolor\",\n    \"username\": \"consectetur est aliqua aliquip voluptate\"\n   },\n   {\n    \"userId\": \"voluptate eiusmod dolore Excepteur in\",\n    \"username\": \"quis qui deserunt nulla\"\n   }\n  ],\n  \"statistics\": \"cupidatat Ut enim ullamco\"\n },\n {\n  \"collectionId\": \"si\",\n  \"name\": \"id pariatur\",\n  \"description\": \"sint\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Duis laboris\",\n  \"created\": \"dolor eiusmod mollit est\",\n  \"owners\": [\n   {\n    \"userId\": \"ei\",\n    \"username\": \"sunt mollit sint fugiat reprehenderit\"\n   },\n   {\n    \"userId\": \"sint veniam\",\n    \"username\": \"in dolore aute\"\n   }\n  ],\n  \"statistics\": \"ad sunt\"\n }\n]"
										}
									]
								},
								{
									"name": "Return a list of Collections accessible to the requester METADATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77cbde24-b941-497b-9209-430f49d338ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?metadata={{metadataKey}}:{{metadataValue}}&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections"
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"collectionId\": \"nostrud officia\",\n  \"name\": \"elit Lorem Duis\",\n  \"description\": \"culpa et minim\",\n  \"workflow\": \"continuous\",\n  \"metadata\": \"deserunt eiusmod\",\n  \"created\": \"sed in deserunt\",\n  \"owners\": [\n   {\n    \"userId\": \"dolor\",\n    \"username\": \"consectetur est aliqua aliquip voluptate\"\n   },\n   {\n    \"userId\": \"voluptate eiusmod dolore Excepteur in\",\n    \"username\": \"quis qui deserunt nulla\"\n   }\n  ],\n  \"statistics\": \"cupidatat Ut enim ullamco\"\n },\n {\n  \"collectionId\": \"si\",\n  \"name\": \"id pariatur\",\n  \"description\": \"sint\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Duis laboris\",\n  \"created\": \"dolor eiusmod mollit est\",\n  \"owners\": [\n   {\n    \"userId\": \"ei\",\n    \"username\": \"sunt mollit sint fugiat reprehenderit\"\n   },\n   {\n    \"userId\": \"sint veniam\",\n    \"username\": \"in dolore aute\"\n   }\n  ],\n  \"statistics\": \"ad sunt\"\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&metadata=<string>&metadata=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "workflow",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "metadata",
															"value": "<string>"
														},
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1822bcde-c960-453a-af81-5919e15922cb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "decebeee-d338-4f4c-821b-254cf8980000",
										"type": "text/javascript",
										"exec": [
											"let user = pm.environment.get(\"user\");",
											"console.log(\"user: \" + user);",
											"",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
											"    user = \"elevated\";",
											"    console.log(\"setting user to 'elevated'\");",
											"}",
											"",
											"if (user == \"bizarroLvl1\" ) {",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    return;",
											"}",
											"else {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											"if (pm.response.code !== 200) {",
											"    return;",
											"}",
											"",
											"",
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Response JSON is an array with expected length\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"    if (user != \"collectionCreator\" ) {",
											"        pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    }",
											"",
											"});",
											"",
											"let collectionKeys = [",
											"    \"collectionId\",",
											"    \"name\",",
											"    \"description\",",
											"    \"workflow\",",
											"    \"metadata\"",
											"]",
											"",
											"let grantKeys = [",
											"    \"user\",",
											"    \"accessLevel\",",
											"    // \"userId\",",
											"    // \"username\"",
											"]",
											"",
											"let userBasicKeys = [",
											"    // \"user\",",
											"    // \"accessLevel\",",
											"    \"userId\",",
											"    \"username\"",
											"]",
											"",
											"let stigKeys = [",
											"    \"title\",",
											"    \"ruleCount\",",
											"    \"benchmarkId\",",
											"    \"lastRevisionDate\",",
											"    \"lastRevisionStr\"",
											"]",
											"",
											"let ownerKeys = [",
											"    \"userId\",",
											"    \"username\"",
											"    // ,",
											"    // \"display\",",
											"    // \"email\"",
											"]",
											"",
											"let statisticsKeys = [",
											"    \"created\",",
											"    \"assetCount\",",
											"    \"grantCount\",",
											"    \"checklistCount\"",
											"]",
											"",
											"if (pm.request.url.getQueryString().match(/projection=assets/)) {",
											"    collectionKeys.push(\"assets\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=grants/)) {",
											"    collectionKeys.push(\"grants\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
											"    collectionKeys.push(\"stigs\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"    collectionKeys.push(\"owners\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"    collectionKeys.push(\"statistics\")",
											"}",
											"",
											"",
											"",
											"pm.test(\"Each item in response has requested properties and values\", function () {",
											"    for (let item of jsonData){",
											"        pm.test(\"Check if object contains all provided keys\", function () {",
											"            pm.expect(item).to.have.all.keys(collectionKeys);",
											"        });",
											"",
											"        let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"        var regex = new RegExp(collectionMatchString);",
											"        pm.test(\"Check that proper Collection names are returned\", function () {",
											"            pm.expect(item.name).to.match(regex);",
											"        });",
											"",
											"        if (pm.request.url.getQueryString().match(/workflow=emass/)) {",
											"            pm.expect(item.workflow).to.equal(\"emass\");",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/workflow=continuous/)) {",
											"            pm.expect(item.workflow).to.equal(\"continuous\");",
											"        }",
											"",
											"        pm.expect(item).to.have.property('metadata');",
											"        ",
											"        if (pm.request.url.getQueryString().match(/metadata=/)) {",
											"            let metaKey = pm.environment.get(\"metadataKey\");",
											"            let metaValue = pm.environment.get(\"metadataValue\");",
											"            let metaCheckObject = {}",
											"            metaCheckObject[metaKey] = metaValue",
											"            pm.expect(item.metadata).to.include(metaCheckObject);",
											"            // pm.expect(item.metadata).to.have.key({{metadataValue}});",
											"",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"            pm.expect(item).to.have.property('owners');",
											"            for (let owner of item.owners){",
											"                pm.expect(owner).to.have.all.keys(ownerKeys);",
											"            }",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"            // console.log(\"checking statistics projection\");",
											"            pm.expect(item).to.have.property('statistics');",
											"            pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
											"",
											"        }",
											"",
											"    };",
											"",
											"});",
											"",
											"",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"// // console.log(\"collection string = \" + collectionMatchString);",
											"// var regex = new RegExp(collectionMatchString);",
											"// let collectionNames = _.map(jsonData, 'name');",
											"// // console.log(collectionNames);",
											"",
											"// pm.test(\"Check that proper Collections are returned\", function () {",
											"//     for (let name of collectionNames){",
											"//         pm.expect(name).to.match(regex);",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );",
											"",
											"//     }",
											" ",
											"// })",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Asset GET",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "users",
													"item": [],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Return an Asset's STIG assignments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32b0b112-2d04-4fea-9b7a-218a46c6f780",
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigKeys = [\r",
															"    \"title\",\r",
															"    \"ruleCount\",\r",
															"    \"benchmarkId\",\r",
															"    \"lastRevisionDate\",\r",
															"    \"lastRevisionStr\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let item of jsonData){\r",
															"        pm.expect(item).to.have.all.keys(stigKeys);\r",
															"        pm.expect(item.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "STIGs response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"benchmarkId\": \"aliqua ad in Ut dolo\",\n  \"lastRevisionStr\": \"cupidatat nostrud in aliqua\",\n  \"lastRevisionDate\": \"aliqua et in voluptate dolor\",\n  \"title\": \"ipsum dolore\",\n  \"ruleCount\": -3314499\n },\n {\n  \"benchmarkId\": \"enim ex laborum\",\n  \"lastRevisionStr\": \"proident magna ea eiusmod\",\n  \"lastRevisionDate\": \"amet Duis\",\n  \"title\": \"deserunt consequat Duis\",\n  \"ruleCount\": 81128948\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Return an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd55ef63-2f7c-4f16-820b-126060989d76",
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"mac\",\r",
													"    \"fqdn\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        // START AZDO #105\r",
													"        // for (let grant of jsonData.stigGrants){\r",
													"        //     pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"        //     pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        //     for (let user of grant.users){\r",
													"        //         pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"        //     }\r",
													"        // }\r",
													"        // END AZDO #105\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										}
									]
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG JSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d19e7f37-5fe4-4f8d-a95f-a855d43a745c",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"}\r",
													"\r",
													"pm.test(\"Check for an array of checklist items.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"\r",
													"pm.test(\"Check for an array of correct length.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "json",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": [
										{
											"name": "Review response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"query": [
														{
															"key": "format",
															"value": "json"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "benchmarkId"
														},
														{
															"key": "revisionStr"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ruleId\": \"Ut ad\",\n \"ruleTitle\": \"laboris\",\n \"groupId\": \"in eu\",\n \"groupTitle\": \"minim nisi fugiat\",\n \"severity\": \"high\",\n \"autoCheckAvailable\": true,\n \"result\": \"notapplicable\",\n \"autoResult\": true,\n \"status\": \"submitted\",\n \"reviewComplete\": false\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"query": [
														{
															"key": "format",
															"value": "json"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "benchmarkId"
														},
														{
															"key": "revisionStr"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG XML",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f001d1c-10ef-45a6-adc8-266a5d7d33ac",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "ckl",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"query": [
														{
															"key": "format",
															"value": "json"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "benchmarkId"
														},
														{
															"key": "revisionStr"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "Review response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"query": [
														{
															"key": "format",
															"value": "json"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "benchmarkId"
														},
														{
															"key": "revisionStr"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ruleId\": \"Ut ad\",\n \"ruleTitle\": \"laboris\",\n \"groupId\": \"in eu\",\n \"groupTitle\": \"minim nisi fugiat\",\n \"severity\": \"high\",\n \"autoCheckAvailable\": true,\n \"result\": \"notapplicable\",\n \"autoResult\": true,\n \"status\": \"submitted\",\n \"reviewComplete\": false\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return a list of Assets accessible to the requester",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f64a3bf5-2cc5-4678-a678-1dcea1f2c77a",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\") {\r",
											"    pm.test(\"Status should be is 403 for user collectionCreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionKeys = [\r",
											"    \"collectionId\",\r",
											"    \"name\",\r",
											"    \"workflow\"\r",
											"]\r",
											"let assetKeys = [\r",
											"    \"assetId\",\r",
											"    \"name\",\r",
											"    \"collection\",\r",
											"    \"description\",\r",
											"    \"ip\",\r",
											"    \"mac\",\r",
											"    \"fqdn\",\r",
											"    \"noncomputing\",\r",
											"    \"metadata\"\r",
											"    \r",
											"]\r",
											"\r",
											"let stigKeys = [\r",
											"    \"title\",\r",
											"    \"ruleCount\",\r",
											"    \"benchmarkId\",\r",
											"    \"lastRevisionDate\",\r",
											"    \"lastRevisionStr\"\r",
											"]\r",
											"\r",
											"let stigGrantKeys = [\r",
											"    \"benchmarkId\",\r",
											"    \"users\"\r",
											"]\r",
											"\r",
											"let adminStatsKeys = [\r",
											"    \"ruleCount\",\r",
											"    \"stigCount\",\r",
											"    \"stigAssignedCount\"\r",
											"]\r",
											"let userBasicKeys = [\r",
											"    // \"user\",\r",
											"    // \"accessLevel\",\r",
											"    \"userId\",\r",
											"    \"username\"\r",
											"]\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    assetKeys.push(\"stigs\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"    assetKeys.push(\"adminStats\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    assetKeys.push(\"stigGrants\")\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"\r",
											"        pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"            pm.expect(asset.adminStats).to.have.all.keys(adminStatsKeys);\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"            for (let grant of asset.stigGrants){\r",
											"                pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"                for (let user of grant.users){\r",
											"                    pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId=<string>&benchmarkId=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId=<string>&benchmarkId=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"velit an\",\n  \"name\": \"exercitation ut adipisicing\",\n  \"collection\": {\n   \"collectionId\": \"su\",\n   \"name\": \"enim adipisicing\",\n   \"workflow\": \"emass\"\n  },\n  \"description\": \"proident quis\",\n  \"ip\": \"qui\",\n  \"noncomputing\": true,\n  \"metadata\": \"sunt ut dolore est ad\",\n  \"adminStats\": {\n   \"stigCount\": -37467820,\n   \"stigAssignedCount\": 85327543\n  },\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"eu cupidatat\",\n    \"lastRevisionStr\": \"eiusmod dolore f\",\n    \"lastRevisionDate\": \"culpa anim laborum exercitation\",\n    \"title\": \"Lorem ea aliqua\",\n    \"ruleCount\": 83504555\n   },\n   {\n    \"benchmarkId\": \"\",\n    \"lastRevisionStr\": \"Duis \",\n    \"lastRevisionDate\": \"sed ipsum esse\",\n    \"title\": \"incididunt\",\n    \"ruleCount\": 80760046\n   }\n  ],\n  \"stigGrants\": [\n   {\n    \"benchmarkId\": \"velit eu\",\n    \"users\": [\n     {\n      \"userId\": \"aute laboris incididunt\",\n      \"username\": \"Excepteur ut nisi dolore magna\"\n     },\n     {\n      \"userId\": \"veniam Ut culpa\",\n      \"username\": \"ut veniam ipsum id\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"exercitation et\",\n    \"users\": [\n     {\n      \"userId\": \"amet laborum magna commodo\",\n      \"username\": \"sunt elit\"\n     },\n     {\n      \"userId\": \"veniam ex\",\n      \"username\": \"magna elit\"\n     }\n    ]\n   }\n  ]\n },\n {\n  \"assetId\": \"aute proident\",\n  \"name\": \"commodo\",\n  \"collection\": {\n   \"collectionId\": \"fugiat cillum in\",\n   \"name\": \"ipsum\",\n   \"workflow\": \"emass\"\n  },\n  \"description\": \"sint et nulla\",\n  \"ip\": \"non Ut eiusmod qui\",\n  \"noncomputing\": true,\n  \"metadata\": \"in culpa\",\n  \"adminStats\": {\n   \"stigCount\": 28389351,\n   \"stigAssignedCount\": 64055353\n  },\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"laboris ut laborum\",\n    \"lastRevisionStr\": \"sint et sit\",\n    \"lastRevisionDate\": \"do officia elit\",\n    \"title\": \"v\",\n    \"ruleCount\": -77874834\n   },\n   {\n    \"benchmarkId\": \"culpa\",\n    \"lastRevisionStr\": \"labore non\",\n    \"lastRevisionDate\": \"minim eiusmod Excepteur\",\n    \"title\": \"sint cillum\",\n    \"ruleCount\": -62696157\n   }\n  ],\n  \"stigGrants\": [\n   {\n    \"benchmarkId\": \"minim labore deserunt\",\n    \"users\": [\n     {\n      \"userId\": \"pariatur do nostrud sint\",\n      \"username\": \"laboris fugiat commodo in\"\n     },\n     {\n      \"userId\": \"et sed Duis Lorem commodo\",\n      \"username\": \"do dolor et magna\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"id laborum eiusmod\",\n    \"users\": [\n     {\n      \"userId\": \"Excepteur\",\n      \"username\": \"quis voluptate anim\"\n     },\n     {\n      \"userId\": \"nisi id pariatur dolore\",\n      \"username\": \"quis cupidatat anim ut dolore\"\n     }\n    ]\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Return a list of Assets accessible to the requester - No StigGrants (for lvl1 user success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96c53ff7-a7f3-48bb-a80b-be64c6f172b8",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionKeys = [\r",
											"    \"collectionId\",\r",
											"    \"name\",\r",
											"    \"workflow\"\r",
											"]\r",
											"let assetKeys = [\r",
											"    \"assetId\",\r",
											"    \"name\",\r",
											"    \"collection\",\r",
											"    \"description\",\r",
											"    \"ip\",\r",
											"    \"mac\",\r",
											"    \"fqdn\",\r",
											"    \"noncomputing\",\r",
											"    \"metadata\"\r",
											"    \r",
											"]\r",
											"\r",
											"let stigKeys = [\r",
											"    \"title\",\r",
											"    \"ruleCount\",\r",
											"    \"benchmarkId\",\r",
											"    \"lastRevisionDate\",\r",
											"    \"lastRevisionStr\"\r",
											"]\r",
											"\r",
											"let stigGrantKeys = [\r",
											"    \"benchmarkId\",\r",
											"    \"users\"\r",
											"]\r",
											"\r",
											"let adminStatsKeys = [\r",
											"    \"ruleCount\",\r",
											"    \"stigCount\",\r",
											"    \"stigAssignedCount\"\r",
											"]\r",
											"let userBasicKeys = [\r",
											"    // \"user\",\r",
											"    // \"accessLevel\",\r",
											"    \"userId\",\r",
											"    \"username\"\r",
											"]\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    assetKeys.push(\"stigs\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"    assetKeys.push(\"adminStats\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    assetKeys.push(\"stigGrants\")\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"\r",
											"        pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"            pm.expect(asset.adminStats).to.have.all.keys(adminStatsKeys);\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"            for (let grant of asset.stigGrants){\r",
											"                pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"                for (let user of grant.users){\r",
											"                    pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&elevate={{elevated}}&projection=adminStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId=<string>&benchmarkId=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"velit an\",\n  \"name\": \"exercitation ut adipisicing\",\n  \"collection\": {\n   \"collectionId\": \"su\",\n   \"name\": \"enim adipisicing\",\n   \"workflow\": \"emass\"\n  },\n  \"description\": \"proident quis\",\n  \"ip\": \"qui\",\n  \"noncomputing\": true,\n  \"metadata\": \"sunt ut dolore est ad\",\n  \"adminStats\": {\n   \"stigCount\": -37467820,\n   \"stigAssignedCount\": 85327543\n  },\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"eu cupidatat\",\n    \"lastRevisionStr\": \"eiusmod dolore f\",\n    \"lastRevisionDate\": \"culpa anim laborum exercitation\",\n    \"title\": \"Lorem ea aliqua\",\n    \"ruleCount\": 83504555\n   },\n   {\n    \"benchmarkId\": \"\",\n    \"lastRevisionStr\": \"Duis \",\n    \"lastRevisionDate\": \"sed ipsum esse\",\n    \"title\": \"incididunt\",\n    \"ruleCount\": 80760046\n   }\n  ],\n  \"stigGrants\": [\n   {\n    \"benchmarkId\": \"velit eu\",\n    \"users\": [\n     {\n      \"userId\": \"aute laboris incididunt\",\n      \"username\": \"Excepteur ut nisi dolore magna\"\n     },\n     {\n      \"userId\": \"veniam Ut culpa\",\n      \"username\": \"ut veniam ipsum id\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"exercitation et\",\n    \"users\": [\n     {\n      \"userId\": \"amet laborum magna commodo\",\n      \"username\": \"sunt elit\"\n     },\n     {\n      \"userId\": \"veniam ex\",\n      \"username\": \"magna elit\"\n     }\n    ]\n   }\n  ]\n },\n {\n  \"assetId\": \"aute proident\",\n  \"name\": \"commodo\",\n  \"collection\": {\n   \"collectionId\": \"fugiat cillum in\",\n   \"name\": \"ipsum\",\n   \"workflow\": \"emass\"\n  },\n  \"description\": \"sint et nulla\",\n  \"ip\": \"non Ut eiusmod qui\",\n  \"noncomputing\": true,\n  \"metadata\": \"in culpa\",\n  \"adminStats\": {\n   \"stigCount\": 28389351,\n   \"stigAssignedCount\": 64055353\n  },\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"laboris ut laborum\",\n    \"lastRevisionStr\": \"sint et sit\",\n    \"lastRevisionDate\": \"do officia elit\",\n    \"title\": \"v\",\n    \"ruleCount\": -77874834\n   },\n   {\n    \"benchmarkId\": \"culpa\",\n    \"lastRevisionStr\": \"labore non\",\n    \"lastRevisionDate\": \"minim eiusmod Excepteur\",\n    \"title\": \"sint cillum\",\n    \"ruleCount\": -62696157\n   }\n  ],\n  \"stigGrants\": [\n   {\n    \"benchmarkId\": \"minim labore deserunt\",\n    \"users\": [\n     {\n      \"userId\": \"pariatur do nostrud sint\",\n      \"username\": \"laboris fugiat commodo in\"\n     },\n     {\n      \"userId\": \"et sed Duis Lorem commodo\",\n      \"username\": \"do dolor et magna\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"id laborum eiusmod\",\n    \"users\": [\n     {\n      \"userId\": \"Excepteur\",\n      \"username\": \"quis voluptate anim\"\n     },\n     {\n      \"userId\": \"nisi id pariatur dolore\",\n      \"username\": \"quis cupidatat anim ut dolore\"\n     }\n    ]\n   }\n  ]\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId=<string>&benchmarkId=<string>&elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reviews GET",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "Return the Review for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e50e8a3e-06b4-48a9-b171-a2c348322bf9",
																"exec": [
																	"//normal test start block:\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"let reviewKeys = [\r",
																	"\"assetId\",\r",
																	"\"assetName\",\r",
																	"\"ruleId\",\r",
																	"\"severity\",\r",
																	"\"result\",\r",
																	"\"resultComment\",\r",
																	"\"autoResult\",\r",
																	"\"action\",\r",
																	"\"actionComment\",\r",
																	"\"status\",\r",
																	"\"userId\",\r",
																	"\"username\",\r",
																	"\"ts\",\r",
																	"\"rejectText\",\r",
																	"\"rejectUserId\",\r",
																	"\"reviewComplete\"\r",
																	"]\r",
																	"\r",
																	"let historyKeys = [\r",
																	"    \"ts\",\r",
																	"    \"result\",\r",
																	"    \"resultComment\",\r",
																	"    \"autoResult\",\r",
																	"    \"action\",\r",
																	"    \"actionComment\",\r",
																	"    \"status\",\r",
																	"    \"userId\",\r",
																	"    \"username\",\r",
																	"    \"rejectText\"\r",
																	"]\r",
																	"\r",
																	"let stigKeys = [\r",
																	"    \"benchmarkId\",\r",
																	"    \"revisionStr\"\r",
																	"]\r",
																	"\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
																	"    reviewKeys.push(\"stigs\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
																	"    reviewKeys.push(\"history\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=ruleInfo/)) {\r",
																	"    reviewKeys.push(\"ruleInfo\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=collections/)) {\r",
																	"    reviewKeys.push(\"collections\")\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Check if object contains all provided keys\", function () {\r",
																	"    pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check if object contains proper ruleId\", function () {\r",
																	"    let testRuleId = pm.environment.get(\"testRuleId\");\r",
																	"    pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check review comment for regex match string\", function () {\r",
																	"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"    var regex = new RegExp(reviewMatchString);\r",
																	"    pm.expect(jsonData.resultComment).to.match(regex);\r",
																	"});\r",
																	"\r",
																	"// START AZDO #107\r",
																	"// pm.test(\"Response has requested properties and values\", function () {\r",
																	"//     let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"//     var regex = new RegExp(assetMatchString);\r",
																	"//     pm.expect(jsonData.name).to.match(regex);\r",
																	"\r",
																	"\r",
																	"//     if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
																	"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
																	"//         for (let grant of jsonData.stigGrants){\r",
																	"//             pm.expect(grant).to.have.all.keys(grantKeys);\r",
																	"//             pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
																	"\r",
																	"//             for (let user of grant.users){\r",
																	"//                 pm.expect(user).to.have.all.keys(userBasicKeys);\r",
																	"\r",
																	"//             }\r",
																	"//         }\r",
																	"//     }\r",
																	"\r",
																	"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
																	"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
																	"\r",
																	"//         for (let stig of jsonData.stigs){\r",
																	"//             pm.expect(stig).to.have.all.keys(stigKeys);\r",
																	"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
																	"\r",
																	"//         }\r",
																	"//     }\r",
																	"    \r",
																	"//     if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
																	"//             pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
																	"//     }\r",
																	"\r",
																	"//     // };\r",
																	"\r",
																	"// });\r",
																	"// END AZDO #107\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": [
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"assetId\": \"dolore in\",\n \"assetName\": \"mollit cillum nulla anim consectetur\",\n \"ruleId\": \"ipsum\",\n \"result\": \"<string>\",\n \"resultComment\": \"elit ullamco sint adipisicing\",\n \"autoResult\": false,\n \"action\": \"<string>\",\n \"actionComment\": \"nostrud fugiat pariatur eiusm\",\n \"status\": \"<string>\",\n \"userId\": \"adipisicing et deserunt enim\",\n \"username\": \"occaecat\",\n \"ts\": \"eu sed dolore do enim\",\n \"rejectText\": \"fugiat ad culpa\",\n \"rejectUserId\": \"sed dolore exercitation in\",\n \"history\": [\n  {\n   \"ts\": \"sit minim eiusmod\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"voluptate in dolor\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"esse Excepteur dolore\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"incididunt do veniam\",\n   \"username\": \"ex est\",\n   \"rejectText\": \"dolor sint\"\n  },\n  {\n   \"ts\": \"magna est\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"ad ut\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"in Ut qui velit\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla tempor\",\n   \"username\": \"labore adipisicing sunt ea\",\n   \"rejectText\": \"eiusmod\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"culpa reprehenderit incididunt\",\n  \"name\": \"incididunt qui do\"\n },\n \"stigs\": [\n  \"irure\",\n  \"dolore proident\"\n ],\n \"rule\": {\n  \"ruleId\": \"cupidatat\",\n  \"version\": \"ipsum\",\n  \"title\": \"laboris incididunt\",\n  \"severity\": \"ea id\"\n }\n}"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Reviews by Asset; Parameter variations",
											"item": [
												{
													"name": "Return a list of Reviews for an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2ba1a185-961d-44c4-b2ef-9320e8b61054",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT Fail",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fe3948a3-c7cd-415e-8566-20cfd5601c9f",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=fail&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "fail"
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT pass",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f83ff99f-13c2-40cb-a8cd-dc6eb50198a8",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=pass&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass"
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset ACTION Remediate",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "88dcd4ef-09fb-4b83-840f-7369b52d6be1",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?action=remediate&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate"
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS saved",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "106479cc-3ef6-4b6a-8b42-000cdf4685fc",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=saved&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "saved"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS submitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fa89f642-ad6a-4677-8896-e602da649cee",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=submitted&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset BENCHMARK",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f5600634-bdef-4b3b-87e0-7ee730d5065b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														}
													]
												},
												{
													"name": "Return a list of Reviews for an Asset REVISION",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7c74e18f-4a28-436e-9f86-a5e419cbbfa1",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?benchmarkId={{testBenchmark}}&revisionStr={{testRev}}&projection=rule&projection=stigs&projection=asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId"
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "asset"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": [
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "result",
																			"value": "<string>"
																		},
																		{
																			"key": "action",
																			"value": "<string>"
																		},
																		{
																			"key": "status",
																			"value": "<string>"
																		},
																		{
																			"key": "benchmarkId",
																			"value": "<string>"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a64219ed-654d-4a44-91c0-84b7a08250ab",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "31d6655b-b241-4b91-a3a1-3abe8aa95a20",
														"type": "text/javascript",
														"exec": [
															"//normal test start block:",
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"",
															"",
															"",
															"let reviewKeys = [",
															"\"assetId\",",
															"\"assetName\",",
															"\"ruleId\",",
															"\"severity\",",
															"\"result\",",
															"\"resultComment\",",
															"\"autoResult\",",
															"\"action\",",
															"\"actionComment\",",
															"\"status\",",
															"\"userId\",",
															"\"username\",",
															"\"ts\",",
															"\"rejectText\",",
															"\"rejectUserId\",",
															"\"reviewComplete\"",
															"]",
															"",
															"let historyKeys = [",
															"    \"ts\",",
															"    \"result\",",
															"    \"resultComment\",",
															"    \"autoResult\",",
															"    \"action\",",
															"    \"actionComment\",",
															"    \"status\",",
															"    \"userId\",",
															"    \"username\",",
															"    \"rejectText\"",
															"]",
															"",
															"let stigKeys = [",
															"    \"benchmarkId\",",
															"    \"revisionStr\"",
															"]",
															"",
															"",
															"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
															"    reviewKeys.push(\"stigs\")",
															"}",
															"if (pm.request.url.getQueryString().match(/projection=rule/)) {",
															"    reviewKeys.push(\"rule\")",
															"}",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {",
															"    reviewKeys.push(\"asset\")",
															"}",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"",
															"pm.test(\"Check if each object contains expected keys/values\", function () {",
															"",
															"    for (let review of jsonData){",
															"        pm.expect(review).to.have.all.keys(reviewKeys);",
															"        pm.expect(review.assetId).to.equal(testAsset);",
															"",
															"        // START AZDO #107",
															"        // let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
															"        // let regex = new RegExp(reviewMatchString);",
															"        // pm.expect(review.resultComment).to.match(regex);",
															"        // END AZDO #107",
															"",
															"        // let regexParamString = /result=([^&]+)&/;",
															"        // let regexParam = new RegExp(regexParamString);",
															"        // let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
															"        // console.log(regexParam)",
															"        // console.log(param)",
															"",
															"    if (pm.request.url.getQueryString().match(/result=/)) {",
															"        let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
															"        pm.expect(review.result).to.equal(param);",
															"        // console.log(param)",
															"        // console.log(\"matched\")",
															"    }",
															"    if (pm.request.url.getQueryString().match(/action=/)) {",
															"        let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];",
															"        pm.expect(review.action).to.equal(param);",
															"    }",
															"    if (pm.request.url.getQueryString().match(/status=/)) {",
															"        let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
															"        pm.expect(review.status).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/ruleId=/)) {",
															"        let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
															"        pm.expect(review.ruleId).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/groupId=/)) {",
															"        let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
															"        pm.expect(review.groupId).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/cci=/)) {",
															"        let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
															"        pm.expect(review.cci).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/userId=/)) {",
															"        let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
															"        pm.expect(review.userId).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
															"        pm.expect(review.assetId).to.equal(param);",
															"    }        ",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
															"        pm.expect(review.stigs[0].benchmarkId).to.equal(param);",
															"    }    ",
															"    if (pm.request.url.getQueryString().match(/revisionStr=/)) {",
															"        let param = pm.request.url.getQueryString().match(/revisionStr=([^&]+)&/)[1];",
															"        pm.expect(review.stigs[0].revisionStr).to.equal(param);",
															"        // console.log(param)",
															"        // console.log(\"matched\")",
															"    }  ",
															"",
															"    }",
															"});",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reviews; Parameter Variations",
									"item": [
										{
											"name": "Return a list of Reviews accessible to the requester",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e0cfc70a-7d80-4bf0-966d-9f4f52cb1ec1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "action",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester RESULT fail",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7af9a277-05fb-495c-878a-51aa9214d964",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=fail&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail"
														},
														{
															"key": "action",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester ACTION remediate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa24e6b4-4f26-4450-9b05-19a5fbac475b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?action=remediate&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate"
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester STATUS saved",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "36119f34-a3b4-43ef-b7d3-98709f01f530",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?status=saved&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved"
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester RULEID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3c88cb44-d71c-4afa-83f6-92ee22a62555",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?ruleId={{testRuleId}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule"
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester GROUPID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "27fdabdf-e312-481f-9542-423ef1d8d212",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?groupId={{testGroupId}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group"
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester USERID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3695b752-83cc-489b-91e1-afa6aa1be045",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?userId={{testUserId}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User"
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester ASSETID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "201b5e5a-297e-4533-a164-19fdc01f479c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?assetId={{testAsset}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester BENCHMARKID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "44961828-1781-4b39-9d1e-7e07c1bf9b4f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "<string>",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Return a list of Reviews accessible to the requester REVID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9a88e0c-894b-46c9-b9f5-19b65eed5014",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?benchmarkId={{testBenchmark}}&revisionStr={{testRev}}&projection=rule&projection=stigs&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "{{testRev}}",
															"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId"
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&groupId=<string>&cci=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>"
																},
																{
																	"key": "action",
																	"value": "<string>"
																},
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "ruleId",
																	"value": "<string>"
																},
																{
																	"key": "groupId",
																	"value": "<string>"
																},
																{
																	"key": "cci",
																	"value": "<string>"
																},
																{
																	"key": "userId",
																	"value": "<string>"
																},
																{
																	"key": "assetId",
																	"value": "<string>"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>"
																},
																{
																	"key": "revisionStr",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "collectionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"assetId\": \"eu laboris sed\",\n  \"assetName\": \"consectetur pariatur exercitation amet \",\n  \"ruleId\": \"Lorem\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"reprehenderit nostrud\",\n  \"autoResult\": false,\n  \"action\": \"<string>\",\n  \"actionComment\": \"sit ullamco eiusmod\",\n  \"status\": \"<string>\",\n  \"userId\": \"non reprehenderit\",\n  \"username\": \"su\",\n  \"ts\": \"ad consequat Excepteur sunt labore\",\n  \"rejectText\": \"non reprehenderit consequat elit\",\n  \"rejectUserId\": \"in reprehenderit exercitation\",\n  \"asset\": {\n   \"assetId\": \"cupidatat nostrud\",\n   \"name\": \"mollit sint velit id\"\n  },\n  \"stigs\": [\n   \"ipsum enim minim sed incididunt\",\n   \"esse\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"tem\",\n   \"version\": \"Ut\",\n   \"title\": \"do Lorem anim minim\",\n   \"severity\": \"ad ea officia\"\n  }\n },\n {\n  \"assetId\": \"est in\",\n  \"assetName\": \"non id ex elit\",\n  \"ruleId\": \"consectetur adipisicing in ex\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"anim dolore\",\n  \"autoResult\": true,\n  \"action\": \"<string>\",\n  \"actionComment\": \"\",\n  \"status\": \"<string>\",\n  \"userId\": \"id ut\",\n  \"username\": \"minim sunt\",\n  \"ts\": \"voluptate dolor pariatur deserunt quis\",\n  \"rejectText\": \"tempor adipisicing proident Duis aliquip\",\n  \"rejectUserId\": \"labore sint aliqua proident\",\n  \"asset\": {\n   \"assetId\": \"laboris pariatur in ullamco qui\",\n   \"name\": \"aliqua in qui\"\n  },\n  \"stigs\": [\n   \"cupidatat\",\n   \"ex commodo\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"in cupidatat eiusmod do velit\",\n   \"version\": \"eiusmo\",\n   \"title\": \"ad\",\n   \"severity\": \"consequat pariatur et\"\n  }\n }\n]"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "930a67ab-c47b-44f1-8406-a1a2f1555a6b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5397dc07-0dda-482b-a3b3-74903be1fc80",
												"type": "text/javascript",
												"exec": [
													"//normal test start block:",
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectionCreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectionCreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Response JSON is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"let reviewKeys = [",
													"\"assetId\",",
													"\"assetName\",",
													"\"ruleId\",",
													"\"severity\",",
													"\"result\",",
													"\"resultComment\",",
													"\"autoResult\",",
													"\"action\",",
													"\"actionComment\",",
													"\"status\",",
													"\"userId\",",
													"\"username\",",
													"\"ts\",",
													"\"rejectText\",",
													"\"rejectUserId\",",
													"\"reviewComplete\"",
													"]",
													"",
													"let historyKeys = [",
													"    \"ts\",",
													"    \"result\",",
													"    \"resultComment\",",
													"    \"autoResult\",",
													"    \"action\",",
													"    \"actionComment\",",
													"    \"status\",",
													"    \"userId\",",
													"    \"username\",",
													"    \"rejectText\"",
													"]",
													"",
													"let stigKeys = [",
													"    \"benchmarkId\",",
													"    \"revisionStr\"",
													"]",
													"",
													"",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"    reviewKeys.push(\"stigs\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=rule/)) {",
													"    reviewKeys.push(\"rule\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=asset/)) {",
													"    reviewKeys.push(\"asset\")",
													"}",
													"",
													"let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
													"let reviewRegex = new RegExp(reviewMatchString);",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"let assetRegex = new RegExp(assetMatchString);",
													"",
													"pm.test(\"Check if each object contains expected keys/values\", function () {",
													"",
													"    for (let review of jsonData){",
													"        pm.expect(review).to.have.all.keys(reviewKeys);",
													"",
													"        // START AZDO #107",
													"        // pm.expect(review.resultComment).to.match(regex);",
													"        // END AZDO #107",
													"        ",
													"        pm.expect(review.assetName).to.match(assetRegex);",
													"",
													"        // let regexParamString = /result=([^&]+)&/;",
													"        // let regexParam = new RegExp(regexParamString);",
													"        // let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
													"        // console.log(regexParam)",
													"        // console.log(param)",
													"",
													"    if (pm.request.url.getQueryString().match(/result=/)) {",
													"        let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
													"        pm.expect(review.result).to.equal(param);",
													"        // console.log(param)",
													"        // console.log(\"matched\")",
													"    }",
													"    if (pm.request.url.getQueryString().match(/action=/)) {",
													"        let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];",
													"        pm.expect(review.action).to.equal(param);",
													"    }",
													"    if (pm.request.url.getQueryString().match(/status=/)) {",
													"        let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
													"        pm.expect(review.status).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/ruleId=/)) {",
													"        let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
													"        pm.expect(review.ruleId).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/groupId=/)) {",
													"        let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
													"        pm.expect(review.rule.groupId).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/cci=/)) {",
													"        let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
													"        pm.expect(review.cci).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/userId=/)) {",
													"        let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
													"        pm.expect(review.userId).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
													"        let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
													"        pm.expect(review.assetId).to.equal(param);",
													"    }        ",
													"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
													"        let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
													"        pm.expect(review.stigs[0].benchmarkId).to.equal(param);",
													"    }    ",
													"    if (pm.request.url.getQueryString().match(/revisionStr=/)) {",
													"        let param = pm.request.url.getQueryString().match(/revisionStr=([^&]+)&/)[1];",
													"        pm.expect(review.stigs[0].revisionStr).to.equal(param);",
													"        // console.log(param)",
													"        // console.log(\"matched\")",
													"    }  ",
													"",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "users GET",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Return a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b95282-c877-4c56-9e13-0a404871d7b1",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"elevated\") { //placeholder for \"users\" that should fail. this endpoint is \"elevated\" only\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"// START AZDO #151\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    // \"display\",\r",
													"    // \"email\",\r",
													"    // \"metadata\",\r",
													"    // \"privileges\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"// END AZDO #151\r",
													"\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\",\r",
													"    \"collectionGrantCount\",\r",
													"    \"lastClaims\"\r",
													"]\r",
													"let privilegesKeys = [\r",
													"    \"canAdmin\",\r",
													"    \"globalAccess\",\r",
													"    \"canCreateCollection\"\r",
													"]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"// START AZDO #151\r",
													"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
													"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
													"// });\r",
													"// END AZDO #151\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"let testUserId = pm.environment.get(\"testUserId\");\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    pm.expect(jsonData.userId).to.equal(testUserId);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{testUserId}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "UserProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"userId\": \"incididunt nisi nulla\",\n \"username\": \"Excepteur nulla\",\n \"display\": \"consectetur aute\",\n \"email\": \"id adipisicing sunt magna\",\n \"metadata\": \"commodo i\",\n \"created\": \"proident qui sint fugiat\",\n \"lastAccess\": \"eiusmod Lorem ut quis\",\n \"privileges\": {\n  \"globalAccess\": false,\n  \"canCreateCollection\": true,\n  \"canAdmin\": false\n },\n \"collectionGrants\": [\n  {\n   \"collection\": {\n    \"collectionId\": \"culpa aute ad magna\",\n    \"name\": \"sed adipisicing id\"\n   },\n   \"accessLevel\": 14011472\n  },\n  {\n   \"collection\": {\n    \"collectionId\": \"quis occaecat proident\",\n    \"name\": \"Lorem do\"\n   },\n   \"accessLevel\": 26218064\n  }\n ],\n \"statistics\": {\n  \"created\": \"laborum mollit\",\n  \"lastAccess\": \"laboris fugiat\"\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return a list of Users accessible to the requester",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a037a88-6397-4bca-bdc0-34868187c5f9",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"// START AZDO #151\r",
											"let userKeys = [\r",
											"    \"userId\",\r",
											"    \"username\",\r",
											"    // \"display\",\r",
											"    // \"email\",\r",
											"    // \"metadata\",\r",
											"    // \"privileges\",\r",
											"    \"collectionGrants\",\r",
											"    \"statistics\"\r",
											"]\r",
											"// END AZDO #151\r",
											"\r",
											"let collectionGrantKeys = [\r",
											"    \"collection\",\r",
											"    \"accessLevel\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let collectionKeys = [\r",
											"    \"name\",\r",
											"    \"collectionId\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let statisticsKeys = [\r",
											"    \"created\",\r",
											"    \"lastAccess\",\r",
											"    \"collectionGrantCount\",\r",
											"    \"lastClaims\"\r",
											"]\r",
											"let privilegesKeys = [\r",
											"    \"canAdmin\",\r",
											"    \"globalAccess\",\r",
											"    \"canCreateCollection\"\r",
											"]\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        // START AZDO #151\r",
											"        // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"        //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"        // });\r",
											"        // END AZDO #151\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": [
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						},
						{
							"name": "Return a list of Users accessible to the requester - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f29fd510-dda4-4ae2-a34e-f6a9bf82fd1d",
										"exec": [
											"// let user = pm.environment.get(\"user\");\r",
											"// console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('array');\r",
											"// });\r",
											"\r",
											"// let userKeys = [\r",
											"//     \"userId\",\r",
											"//     \"username\",\r",
											"//     // \"display\",\r",
											"//     // \"email\",\r",
											"//     // \"metadata\",\r",
											"//     // \"privileges\",\r",
											"//     \"collectionGrants\",\r",
											"//     \"statistics\"\r",
											"// ]\r",
											"\r",
											"// let collectionGrantKeys = [\r",
											"//     \"collection\",\r",
											"//     \"accessLevel\",\r",
											"//     // \"userId\",\r",
											"//     // \"username\"\r",
											"// ]\r",
											"// let collectionKeys = [\r",
											"//     \"name\",\r",
											"//     \"collectionId\",\r",
											"//     // \"userId\",\r",
											"//     // \"username\"\r",
											"// ]\r",
											"// let statisticsKeys = [\r",
											"//     \"created\",\r",
											"//     \"lastAccess\",\r",
											"//     \"collectionGrantCount\",\r",
											"//     \"lastClaims\"\r",
											"// ]\r",
											"// let privilegesKeys = [\r",
											"//     \"canAdmin\",\r",
											"//     \"globalAccess\",\r",
											"//     \"canCreateCollection\"\r",
											"// ]\r",
											"\r",
											"\r",
											"// pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"//     for (let user of jsonData){\r",
											"//         // pm.expect(review).to.have.all.keys(reviewKeys);\r",
											"\r",
											"//         // let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
											"//         // var regex = new RegExp(reviewMatchString);\r",
											"//         // pm.expect(review.resultComment).to.match(regex);\r",
											"\r",
											"//         pm.test(\"Check if object contains all required keys\", function () {\r",
											"//             pm.expect(user).to.have.all.keys(userKeys);\r",
											"//         });\r",
											"\r",
											"//         if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"//             let testUser = pm.environment.get(\"testUser\");\r",
											"//             pm.test(\"Check if object contains info for expected user\", function () {\r",
											"//                 pm.expect(user.username).to.equal(testUser);\r",
											"//             });\r",
											"//         }\r",
											"        \r",
											"//         for (let grant of user.collectionGrants){\r",
											"//             pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"//             pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"//         }\r",
											"\r",
											"//         // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"//         //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"//         // });\r",
											"\r",
											"//         pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"//             pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"//         });\r",
											"\r",
											"\r",
											"//     }\r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "018ee79d-7a6e-4fcb-8a7d-d16661624417",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"// START AZDO #151\r",
											"let userKeys = [\r",
											"    \"userId\",\r",
											"    \"username\",\r",
											"    // \"display\",\r",
											"    // \"email\",\r",
											"    // \"metadata\",\r",
											"    // \"privileges\",\r",
											"    \"collectionGrants\",\r",
											"    \"statistics\"\r",
											"]\r",
											"// END AZDO #151\r",
											"\r",
											"let collectionGrantKeys = [\r",
											"    \"collection\",\r",
											"    \"accessLevel\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let collectionKeys = [\r",
											"    \"name\",\r",
											"    \"collectionId\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let statisticsKeys = [\r",
											"    \"created\",\r",
											"    \"lastAccess\",\r",
											"    \"collectionGrantCount\",\r",
											"    \"lastClaims\"\r",
											"]\r",
											"let privilegesKeys = [\r",
											"    \"canAdmin\",\r",
											"    \"globalAccess\",\r",
											"    \"canCreateCollection\"\r",
											"]\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        // START AZDO #151\r",
											"        // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"        //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"        // });\r",
											"        // END AZDO #151\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								},
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9deec3-7e60-42b1-bc0e-32f0a1428061",
										"exec": [
											"// let user = pm.environment.get(\"user\");\r",
											"// console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('array');\r",
											"// });\r",
											"\r",
											"// let userKeys = [\r",
											"//     \"userId\",\r",
											"//     \"username\",\r",
											"//     // \"display\",\r",
											"//     // \"email\",\r",
											"//     // \"metadata\",\r",
											"//     // \"privileges\",\r",
											"//     \"collectionGrants\",\r",
											"//     \"statistics\"\r",
											"// ]\r",
											"\r",
											"// let collectionGrantKeys = [\r",
											"//     \"collection\",\r",
											"//     \"accessLevel\",\r",
											"//     // \"userId\",\r",
											"//     // \"username\"\r",
											"// ]\r",
											"// let collectionKeys = [\r",
											"//     \"name\",\r",
											"//     \"collectionId\",\r",
											"//     // \"userId\",\r",
											"//     // \"username\"\r",
											"// ]\r",
											"// let statisticsKeys = [\r",
											"//     \"created\",\r",
											"//     \"lastAccess\",\r",
											"//     \"collectionGrantCount\",\r",
											"//     \"lastClaims\"\r",
											"// ]\r",
											"// let privilegesKeys = [\r",
											"//     \"canAdmin\",\r",
											"//     \"globalAccess\",\r",
											"//     \"canCreateCollection\"\r",
											"// ]\r",
											"\r",
											"\r",
											"// pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"//     for (let user of jsonData){\r",
											"//         // pm.expect(review).to.have.all.keys(reviewKeys);\r",
											"\r",
											"//         // let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
											"//         // var regex = new RegExp(reviewMatchString);\r",
											"//         // pm.expect(review.resultComment).to.match(regex);\r",
											"\r",
											"//         pm.test(\"Check if object contains all required keys\", function () {\r",
											"//             pm.expect(user).to.have.all.keys(userKeys);\r",
											"//         });\r",
											"\r",
											"//         if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"//             let testUser = pm.environment.get(\"testUser\");\r",
											"//             pm.test(\"Check if object contains info for expected user\", function () {\r",
											"//                 pm.expect(user.username).to.equal(testUser);\r",
											"//             });\r",
											"//         }\r",
											"        \r",
											"//         for (let grant of user.collectionGrants){\r",
											"//             pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"//             pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"//         }\r",
											"\r",
											"//         // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"//         //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"//         // });\r",
											"\r",
											"//         pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"//             pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"//         });\r",
											"\r",
											"\r",
											"//     }\r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								},
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "op GET",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Export application data",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "elevate",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Exported data",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"consequat do irure\""
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return API version and configuration information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc1a5abe-54cf-454d-a8f0-3fb785caca7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let configKeys = [\r",
											"    \"version\",\r",
											"    \"commit\"\r",
											"]"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/op/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Configuration response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/op/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"branch\": \"magna sit nisi\",\n \"commit\": \"consectetur ea\",\n \"nearest-tag\": \"Duis minim enim dolor quis\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Return the requester's user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462e098a-8fc2-42de-8666-4d9688f204e0",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let userKeys = [\r",
									"    \"userId\",\r",
									"    \"username\",\r",
									"    // \"display\",\r",
									"    // \"email\",\r",
									"    // \"metadata\",\r",
									"    // \"privileges\",\r",
									"    \"collectionGrants\",\r",
									"    \"statistics\"\r",
									"]\r",
									"let collectionGrantKeys = [\r",
									"    \"collection\",\r",
									"    \"accessLevel\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let collectionKeys = [\r",
									"    \"name\",\r",
									"    \"collectionId\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let statisticsKeys = [\r",
									"    \"created\",\r",
									"    \"lastAccess\",\r",
									"    \"collectionGrantCount\",\r",
									"    \"lastClaims\"\r",
									"]\r",
									"let privilegesKeys = [\r",
									"    \"canAdmin\",\r",
									"    \"globalAccess\",\r",
									"    \"canCreateCollection\"\r",
									"]\r",
									"\r",
									"// START AZDO #151\r",
									"// pm.test(\"Check if object contains all required keys\", function () {\r",
									"//     pm.expect(jsonData).to.have.all.keys(userKeys);\r",
									"// });\r",
									"\r",
									"// for (let grant of jsonData.collectionGrants){\r",
									"//     pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
									"//     pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
									"// }\r",
									"\r",
									"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
									"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Check if object contains all required statistics keys\", function () {\r",
									"//     pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
									"// });\r",
									"// STOP AZDO #151\r",
									"\r",
									"pm.test(\"Check if object contains info for expected user\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(user);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
						},
						{
							"name": "UserProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"userId\": \"incididunt ut nisi anim\",\n \"username\": \"v\",\n \"display\": \"amet\",\n \"email\": \"qui\",\n \"metadata\": \"do eu\",\n \"created\": \"eu aute nostrud voluptate\",\n \"lastAccess\": \"aliqua Duis\",\n \"privileges\": {\n  \"globalAccess\": true,\n  \"canCreateCollection\": true,\n  \"canAdmin\": false\n },\n \"collectionGrants\": [\n  {\n   \"collection\": {\n    \"collectionId\": \"mollit adipisicing irure\",\n    \"name\": \"est ea nostrud veniam\"\n   },\n   \"accessLevel\": 1620254\n  },\n  {\n   \"collection\": {\n    \"collectionId\": \"Ut dolor eiusmod officia\",\n    \"name\": \"ea labore ipsum\"\n   },\n   \"accessLevel\": -68580387\n  }\n ],\n \"statistics\": {\n  \"created\": \"consequat\",\n  \"lastAccess\": \"exercitation sed magna\"\n }\n}"
						}
					]
				}
			],
			"description": "All tests that do not change data.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "POSTS, Puts, Patches, and Deletes",
			"item": [
				{
					"name": "Collection PPPD",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Set the Assets mapped to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dc99102a-71fe-4e0c-b629-9950c8aa1857",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user != \"stigmanadmin\" && user != \"elevated\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array with expected length\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"{{scrapAsset}}\"\n    ]\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate={{elevated}}&projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{scrapCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"stigs",
																		":benchmarkId",
																		"assets"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "Revision response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"stigs",
																		":benchmarkId",
																		"assets"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"assetId\": \"ipsum Excepteur no\",\n  \"name\": \"culpa aute anim esse Lorem\"\n },\n {\n  \"assetId\": \"Lorem adipisicing ad\",\n  \"name\": \"ut amet deserunt aute\"\n }\n]"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "grants/{userId}/access PPPD",
									"item": [
										{
											"name": "set stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d5485a62-eafe-411d-b5a5-cb02791f9c75",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{scrapBenchmark}}\",\r\n        \"assetId\": \"{{scrapAsset}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{scrapCollection}}"
														},
														{
															"key": "userId",
															"value": "{{scrapLvl1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76be1cbb-5170-4cad-b56b-4db9291e9a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed3e1e47-5969-4743-a561-21f20529deda",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Merge provided properties with a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9747123-0524-4a08-80a6-e71ae9487fcb",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Collection Z Patched\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"workflow\": \"emass\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"collectionId\": \"et\",\n \"name\": \"culpa sint\",\n \"description\": \"esse dolor amet in tempor\",\n \"workflow\": \"continuous\",\n \"metadata\": \"v\",\n \"created\": \"sit Duis\",\n \"assets\": [\n  {\n   \"assetId\": \"laboris tempor\",\n   \"name\": \"sed anim ut ad fugiat\"\n  },\n  {\n   \"assetId\": \"voluptate non\",\n   \"name\": \"Ut quis i\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"ea in ullamco velit\",\n   \"lastRevisionStr\": \"irure nisi occaecat do tempor\",\n   \"lastRevisionDate\": \"fugiat aliquip\",\n   \"title\": \"anim sunt eiusmod Duis\",\n   \"ruleCount\": -58767467\n  },\n  {\n   \"benchmarkId\": \"Ut commodo dolor\",\n   \"lastRevisionStr\": \"voluptate pariatur\",\n   \"lastRevisionDate\": \"dolor veniam\",\n   \"title\": \"proident ex\",\n   \"ruleCount\": 93488221\n  }\n ],\n \"grants\": [\n  {\n   \"user\": {\n    \"userId\": \"nostrud\",\n    \"username\": \"laborum irure mollit dolor\"\n   },\n   \"accessLevel\": 2\n  },\n  {\n   \"user\": {\n    \"userId\": \"adipisicing pariatur velit sed non\",\n    \"username\": \"quis eiusmod dolor reprehenderit\"\n   },\n   \"accessLevel\": 2\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"workflow\": \"emass\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Set all properties of a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac688745-f178-4c13-a6ce-f67701db39db",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Collection Z Put\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": true\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"workflow\": \"continuous\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"description\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"collectionId\": \"et\",\n \"name\": \"culpa sint\",\n \"description\": \"esse dolor amet in tempor\",\n \"workflow\": \"continuous\",\n \"metadata\": \"v\",\n \"created\": \"sit Duis\",\n \"assets\": [\n  {\n   \"assetId\": \"laboris tempor\",\n   \"name\": \"sed anim ut ad fugiat\"\n  },\n  {\n   \"assetId\": \"voluptate non\",\n   \"name\": \"Ut quis i\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"ea in ullamco velit\",\n   \"lastRevisionStr\": \"irure nisi occaecat do tempor\",\n   \"lastRevisionDate\": \"fugiat aliquip\",\n   \"title\": \"anim sunt eiusmod Duis\",\n   \"ruleCount\": -58767467\n  },\n  {\n   \"benchmarkId\": \"Ut commodo dolor\",\n   \"lastRevisionStr\": \"voluptate pariatur\",\n   \"lastRevisionDate\": \"dolor veniam\",\n   \"title\": \"proident ex\",\n   \"ruleCount\": 93488221\n  }\n ],\n \"grants\": [\n  {\n   \"user\": {\n    \"userId\": \"nostrud\",\n    \"username\": \"laborum irure mollit dolor\"\n   },\n   \"accessLevel\": 2\n  },\n  {\n   \"user\": {\n    \"userId\": \"adipisicing pariatur velit sed non\",\n    \"username\": \"quis eiusmod dolor reprehenderit\"\n   },\n   \"accessLevel\": 2\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"workflow\": \"continuous\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"description\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2254008c-6497-4ad0-83dc-d1fb22dba56c",
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectionCreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"user\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let ownerKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"display\",\r",
													"    \"email\"\r",
													"]\r",
													"\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"assetCount\",\r",
													"    \"grantCount\",\r",
													"    \"checklistCount\"\r",
													"]\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"    collectionKeys.push(\"assets\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"    collectionKeys.push(\"grants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    collectionKeys.push(\"stigs\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"    collectionKeys.push(\"owners\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"    collectionKeys.push(\"statistics\")\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(collectionKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=emass/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"emass\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=continuous/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"continuous\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        for (let asset of jsonData.assets){\r",
													"            pm.expect(asset).to.have.property('name');\r",
													"            pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        for (let grant of jsonData.grants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        for (let owner of jsonData.owners){\r",
													"            pm.expect(owner).to.have.all.keys(ownerKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{deleteCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "CollectionProjected response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"collectionId\": \"et\",\n \"name\": \"culpa sint\",\n \"description\": \"esse dolor amet in tempor\",\n \"workflow\": \"continuous\",\n \"metadata\": \"v\",\n \"created\": \"sit Duis\",\n \"assets\": [\n  {\n   \"assetId\": \"laboris tempor\",\n   \"name\": \"sed anim ut ad fugiat\"\n  },\n  {\n   \"assetId\": \"voluptate non\",\n   \"name\": \"Ut quis i\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"ea in ullamco velit\",\n   \"lastRevisionStr\": \"irure nisi occaecat do tempor\",\n   \"lastRevisionDate\": \"fugiat aliquip\",\n   \"title\": \"anim sunt eiusmod Duis\",\n   \"ruleCount\": -58767467\n  },\n  {\n   \"benchmarkId\": \"Ut commodo dolor\",\n   \"lastRevisionStr\": \"voluptate pariatur\",\n   \"lastRevisionDate\": \"dolor veniam\",\n   \"title\": \"proident ex\",\n   \"ruleCount\": 93488221\n  }\n ],\n \"grants\": [\n  {\n   \"user\": {\n    \"userId\": \"nostrud\",\n    \"username\": \"laborum irure mollit dolor\"\n   },\n   \"accessLevel\": 2\n  },\n  {\n   \"user\": {\n    \"userId\": \"adipisicing pariatur velit sed non\",\n    \"username\": \"quis eiusmod dolor reprehenderit\"\n   },\n   \"accessLevel\": 2\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf24634a-bb42-4447-b0bf-a8884da34820",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectionCreator\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectionCreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Collection CREATED BY TESTS2\",\n  \"description\": \"Collection TEST description\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Put\",\n  \"pocEmail\": \"pocEmailPut@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n    \"grants\": [\n\n        {\n                \"userId\": \"1\",\n            \"accessLevel\": 4\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=grants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "grants"
										}
									]
								}
							},
							"response": [
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"workflow\": \"continuous\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?projection=<string>&projection=<string>&elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"collectionId\": \"in veniam minim\",\n  \"name\": \"Lorem enim qui\",\n  \"description\": \"velit Ut ut et nostrud\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"Lorem al\",\n  \"created\": \"reprehenderit sunt\",\n  \"assets\": [\n   {\n    \"assetId\": \"Ut\",\n    \"name\": \"adipisicing esse Ut nostrud\"\n   },\n   {\n    \"assetId\": \"sit quis in ut\",\n    \"name\": \"cillum dolor\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"aute\",\n    \"lastRevisionStr\": \"sed enim elit ullamco\",\n    \"lastRevisionDate\": \"laboris adipisicing\",\n    \"title\": \"dolore dolore\",\n    \"ruleCount\": 28998636\n   },\n   {\n    \"benchmarkId\": \"ea ullamco dolor do\",\n    \"lastRevisionStr\": \"laborum ea consectetur irure velit\",\n    \"lastRevisionDate\": \"Lorem\",\n    \"title\": \"tempor culpa\",\n    \"ruleCount\": 77543577\n   }\n  ],\n  \"grants\": [\n   {\n    \"user\": {\n     \"userId\": \"esse consequat labore\",\n     \"username\": \"Lorem sint labore nulla in\"\n    },\n    \"accessLevel\": 1\n   },\n   {\n    \"user\": {\n     \"userId\": \"voluptate aliquip labore\",\n     \"username\": \"aliqua anim fugiat elit\"\n    },\n    \"accessLevel\": 2\n   }\n  ]\n },\n {\n  \"collectionId\": \"eu incididunt laborum fugiat in\",\n  \"name\": \"irure\",\n  \"description\": \"cillum voluptate adipisicing exercitation\",\n  \"workflow\": \"emass\",\n  \"metadata\": \"ullamco ut in deserunt ut\",\n  \"created\": \"voluptate labore sint\",\n  \"assets\": [\n   {\n    \"assetId\": \"voluptate\",\n    \"name\": \"culpa eu mollit adipisicing \"\n   },\n   {\n    \"assetId\": \"irure ut voluptate et\",\n    \"name\": \"consequat magna dolore commodo exercitation\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"sed \",\n    \"lastRevisionStr\": \"ea\",\n    \"lastRevisionDate\": \"exercitation magna\",\n    \"title\": \"adipisicing\",\n    \"ruleCount\": -55471259\n   },\n   {\n    \"benchmarkId\": \"Excepteur s\",\n    \"lastRevisionStr\": \"minim occaecat veniam s\",\n    \"lastRevisionDate\": \"in\",\n    \"title\": \"dolor laboris\",\n    \"ruleCount\": 78070538\n   }\n  ],\n  \"grants\": [\n   {\n    \"user\": {\n     \"userId\": \"tempor qui enim\",\n     \"username\": \"voluptate commo\"\n    },\n    \"accessLevel\": 2\n   },\n   {\n    \"user\": {\n     \"userId\": \"in\",\n     \"username\": \"aliquip\"\n    },\n    \"accessLevel\": 2\n   }\n  ]\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"workflow\": \"continuous\",\n    \"metadata\": \"<object>\",\n    \"grants\": [\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"userId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?projection=<string>&projection=<string>&elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a0662d6-6a18-4082-99c2-3375c877d1c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed3ad956-6ff9-42b2-8b15-4c4b04059aca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Asset PPPD",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "Delete a STIG assignment to an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "424b0981-6294-46d8-a249-0093b0ac3caa",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId?elevate={{elevated}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																}
															],
															"variable": [
																{
																	"key": "assetId",
																	"value": "{{scrapAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": [
														{
															"name": "AssetProjected response",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId?elevate=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"assets",
																		":assetId",
																		"stigs",
																		":benchmarkId"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		}
																	],
																	"variable": [
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"benchmarkId\": \"anim cupidatat ad magna ex\",\n  \"lastRevisionStr\": \"esse sint fugia\",\n  \"lastRevisionDate\": \"est ullamco\",\n  \"title\": \"ad veniam d\",\n  \"ruleCount\": -38661142\n },\n {\n  \"benchmarkId\": \"ut deserunt in\",\n  \"lastRevisionStr\": \"in\",\n  \"lastRevisionDate\": \"qui Lorem exercitation incididunt\",\n  \"title\": \"aute aliqua\",\n  \"ruleCount\": 80171764\n }\n]"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId?elevate=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"assets",
																		":assetId",
																		"stigs",
																		":benchmarkId"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		}
																	],
																	"variable": [
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "benchmarkId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Delete all STIG assignments to an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca0af41c-4027-42c5-be90-6e185bc68ddc",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "AssetStigs response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"benchmarkId\": \"anim cupidatat ad magna ex\",\n  \"lastRevisionStr\": \"esse sint fugia\",\n  \"lastRevisionDate\": \"est ullamco\",\n  \"title\": \"ad veniam d\",\n  \"ruleCount\": -38661142\n },\n {\n  \"benchmarkId\": \"ut deserunt in\",\n  \"lastRevisionStr\": \"in\",\n  \"lastRevisionDate\": \"qui Lorem exercitation incididunt\",\n  \"title\": \"aute aliqua\",\n  \"ruleCount\": 80171764\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Merge provided properties with an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e798a594-7b2d-4e61-8b30-e7eeae8a6759",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test asset PATCH {{user}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\",\n        \"RHEL_7_STIG\"\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Set all properties of an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e5b3389-edf1-4542-af5f-12a61e395d5f",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test asset PUT {{user}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\",\n        \"RHEL_7_STIG\"\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Delete an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d441014b-5193-402d-8bae-fa90cbfcb430",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{deleteAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ed54837-ce2f-4991-98f4-7714179cb07b",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test asset POST {{user}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reviews PPPD",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "Set all properties of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2805dd86-a7e0-4230-aef5-87008fbd7281",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"globular\" || user == \"collectionCreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "ruleInfo",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "collections"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"assetId\": \"reprehenderit sed\",\n \"assetName\": \"Lorem in Except\",\n \"ruleId\": \"aute\",\n \"result\": \"<string>\",\n \"resultComment\": \"occaecat ut sed qui\",\n \"autoResult\": true,\n \"action\": \"<string>\",\n \"actionComment\": \"elit commodo proident\",\n \"status\": \"<string>\",\n \"userId\": \"offi\",\n \"username\": \"tempor Ut\",\n \"ts\": \"id tempor\",\n \"rejectText\": \"id incididunt do\",\n \"rejectUserId\": \"\",\n \"history\": [\n  {\n   \"ts\": \"Lorem\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"culpa sit\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"ad tempor proident aliquip\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"in ullamco do\",\n   \"username\": \"cupidatat Lorem eu\",\n   \"rejectText\": \"esse non\"\n  },\n  {\n   \"ts\": \"eu nostrud exercit\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"labore nulla\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"Ut nisi sit sint\",\n   \"autoResult\": false,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla non\",\n   \"username\": \"proident fugiat nulla\",\n   \"rejectText\": \"reprehenderit anim\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"reprehenderit nisi officia\",\n  \"name\": \"est Excepteur nostrud\"\n },\n \"stigs\": [\n  \"culpa commodo sed ullamco\",\n  \"dolore\"\n ],\n \"rule\": {\n  \"ruleId\": \"anim\",\n  \"version\": \"sunt amet reprehenderit\",\n  \"title\": \"eu do culpa\",\n  \"severity\": \"ad ex velit aute laboris\"\n }\n}"
														}
													]
												},
												{
													"name": "Merge provided properties with a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d72c4c5c-4429-4475-9fbc-2c454f700816",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"globular\" || user == \"collectionCreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "ruleInfo",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "collections"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Update the given properties of a Review, if it exists"
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"assetId\": \"reprehenderit sed\",\n \"assetName\": \"Lorem in Except\",\n \"ruleId\": \"aute\",\n \"result\": \"<string>\",\n \"resultComment\": \"occaecat ut sed qui\",\n \"autoResult\": true,\n \"action\": \"<string>\",\n \"actionComment\": \"elit commodo proident\",\n \"status\": \"<string>\",\n \"userId\": \"offi\",\n \"username\": \"tempor Ut\",\n \"ts\": \"id tempor\",\n \"rejectText\": \"id incididunt do\",\n \"rejectUserId\": \"\",\n \"history\": [\n  {\n   \"ts\": \"Lorem\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"culpa sit\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"ad tempor proident aliquip\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"in ullamco do\",\n   \"username\": \"cupidatat Lorem eu\",\n   \"rejectText\": \"esse non\"\n  },\n  {\n   \"ts\": \"eu nostrud exercit\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"labore nulla\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"Ut nisi sit sint\",\n   \"autoResult\": false,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla non\",\n   \"username\": \"proident fugiat nulla\",\n   \"rejectText\": \"reprehenderit anim\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"reprehenderit nisi officia\",\n  \"name\": \"est Excepteur nostrud\"\n },\n \"stigs\": [\n  \"culpa commodo sed ullamco\",\n  \"dolore\"\n ],\n \"rule\": {\n  \"ruleId\": \"anim\",\n  \"version\": \"sunt amet reprehenderit\",\n  \"title\": \"eu do culpa\",\n  \"severity\": \"ad ex velit aute laboris\"\n }\n}"
														}
													]
												},
												{
													"name": "Delete a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d1f1493d-bf41-44ee-97bf-9592cc039e7c",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"globular\" || user == \"collectionCreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate={{elevated}}&projection=ruleInfo&projection=history&projection=stigs&projection=collections",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																},
																{
																	"key": "projection",
																	"value": "ruleInfo",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "collections"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": [
														{
															"name": "ReviewProjected response",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"assetId\": \"reprehenderit sed\",\n \"assetName\": \"Lorem in Except\",\n \"ruleId\": \"aute\",\n \"result\": \"<string>\",\n \"resultComment\": \"occaecat ut sed qui\",\n \"autoResult\": true,\n \"action\": \"<string>\",\n \"actionComment\": \"elit commodo proident\",\n \"status\": \"<string>\",\n \"userId\": \"offi\",\n \"username\": \"tempor Ut\",\n \"ts\": \"id tempor\",\n \"rejectText\": \"id incididunt do\",\n \"rejectUserId\": \"\",\n \"history\": [\n  {\n   \"ts\": \"Lorem\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"culpa sit\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"ad tempor proident aliquip\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"in ullamco do\",\n   \"username\": \"cupidatat Lorem eu\",\n   \"rejectText\": \"esse non\"\n  },\n  {\n   \"ts\": \"eu nostrud exercit\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"labore nulla\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"Ut nisi sit sint\",\n   \"autoResult\": false,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla non\",\n   \"username\": \"proident fugiat nulla\",\n   \"rejectText\": \"reprehenderit anim\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"reprehenderit nisi officia\",\n  \"name\": \"est Excepteur nostrud\"\n },\n \"stigs\": [\n  \"culpa commodo sed ullamco\",\n  \"dolore\"\n ],\n \"rule\": {\n  \"ruleId\": \"anim\",\n  \"version\": \"sunt amet reprehenderit\",\n  \"title\": \"eu do culpa\",\n  \"severity\": \"ad ex velit aute laboris\"\n }\n}"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"collections",
																		":collectionId",
																		"reviews",
																		":assetId",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "elevate",
																			"value": "<boolean>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		},
																		{
																			"key": "projection",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "collectionId"
																		},
																		{
																			"key": "assetId"
																		},
																		{
																			"key": "ruleId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Import one or more Reviews from a STIGViewer CKL file",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"description": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
															"type": "file",
															"src": "/E:/gits/github/stig-manager/test/test-ckl_VPN_SRG-latest-42.ckl"
														},
														{
															"key": "strictAssetCheck",
															"value": "false",
															"description": "Whether file contents will be checked for asset name match",
															"type": "text"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "If provided, file contents will be checked for match",
															"type": "text"
														}
													],
													"options": {
														"formdata": {}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": [
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"value": "<binary>",
																	"description": {
																		"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "strictAssetCheck",
																	"value": "false",
																	"description": {
																		"content": "Whether file contents will be checked for asset name match",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": {
																		"content": "If provided, file contents will be checked for match",
																		"type": "text/plain"
																	},
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"assetId\": \"occaecat nisi Excepteur\",\n \"assetName\": \"ex do\",\n \"ruleId\": \"sit culpa et\",\n \"result\": \"<string>\",\n \"resultComment\": \"aute occaecat dolor deserunt\",\n \"autoResult\": false,\n \"action\": \"<string>\",\n \"actionComment\": \"nulla in dolore\",\n \"status\": \"<string>\",\n \"userId\": \"reprehenderit commodo pariatur in\",\n \"username\": \"ipsum ut occaecat min\",\n \"ts\": \"deserunt ex laboris\",\n \"rejectText\": \"non ex voluptate aute\",\n \"rejectUserId\": \"do quis\",\n \"asset\": {\n  \"assetId\": \"amet in\",\n  \"name\": \"elit in id anim\"\n },\n \"stigs\": [\n  \"aute dolor Excepteur sunt\",\n  \"ad velit nostrud enim\"\n ],\n \"rule\": {\n  \"ruleId\": \"consectetur Ut nulla proident anim\",\n  \"version\": \"nisi in ipsum\",\n  \"title\": \"Ut reprehenderit enim dolore\",\n  \"severity\": \"sed adipisicing\"\n }\n}"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"value": "<binary>",
																	"description": {
																		"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "strictAssetCheck",
																	"value": "false",
																	"description": {
																		"content": "Whether file contents will be checked for asset name match",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": {
																		"content": "If provided, file contents will be checked for match",
																		"type": "text/plain"
																	},
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										},
										{
											"name": "Import one or more Reviews from an SCC XCCDF file",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"value": "<binary>",
															"description": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
															"type": "text"
														},
														{
															"key": "strictAssetCheck",
															"value": "false",
															"description": "Whether file contents will be checked for asset name match",
															"type": "text"
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "If provided, file contents will be checked for match",
															"type": "text"
														}
													],
													"options": {
														"formdata": {}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"value": "<binary>",
																	"description": {
																		"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "strictAssetCheck",
																	"value": "false",
																	"description": {
																		"content": "Whether file contents will be checked for asset name match",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": {
																		"content": "If provided, file contents will be checked for match",
																		"type": "text/plain"
																	},
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "ReviewProjected response",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"value": "<binary>",
																	"description": {
																		"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "strictAssetCheck",
																	"value": "false",
																	"description": {
																		"content": "Whether file contents will be checked for asset name match",
																		"type": "text/plain"
																	},
																	"type": "text"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": {
																		"content": "If provided, file contents will be checked for match",
																		"type": "text/plain"
																	},
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"variable": [
																{
																	"key": "collectionId"
																},
																{
																	"key": "assetId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"assetId\": \"occaecat nisi Excepteur\",\n \"assetName\": \"ex do\",\n \"ruleId\": \"sit culpa et\",\n \"result\": \"<string>\",\n \"resultComment\": \"aute occaecat dolor deserunt\",\n \"autoResult\": false,\n \"action\": \"<string>\",\n \"actionComment\": \"nulla in dolore\",\n \"status\": \"<string>\",\n \"userId\": \"reprehenderit commodo pariatur in\",\n \"username\": \"ipsum ut occaecat min\",\n \"ts\": \"deserunt ex laboris\",\n \"rejectText\": \"non ex voluptate aute\",\n \"rejectUserId\": \"do quis\",\n \"asset\": {\n  \"assetId\": \"amet in\",\n  \"name\": \"elit in id anim\"\n },\n \"stigs\": [\n  \"aute dolor Excepteur sunt\",\n  \"ad velit nostrud enim\"\n ],\n \"rule\": {\n  \"ruleId\": \"consectetur Ut nulla proident anim\",\n  \"version\": \"nisi in ipsum\",\n  \"title\": \"Ut reprehenderit enim dolore\",\n  \"severity\": \"sed adipisicing\"\n }\n}"
												}
											]
										},
										{
											"name": "Import one or more Reviews from a JSON body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "810402ca-b159-4f6f-b5fc-6341e30f1426",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/assets?elevate=<boolean>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												},
												{
													"name": "AssetProjected response",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/assets?elevate=<boolean>&projection=<string>&projection=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "<boolean>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																},
																{
																	"key": "projection",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "users PPD",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Merge provided properties with a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35ee92d1-0435-4c59-b024-514399ae1064",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"display\",\r",
													"    \"email\",\r",
													"    \"metadata\",\r",
													"    \"privileges\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\"\r",
													"]\r",
													"let privilegesKeys = [\r",
													"    \"canAdmin\",\r",
													"    \"globalAccess\",\r",
													"    \"canCreateCollection\"\r",
													"]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all required privileges keys\", function () {\r",
													"    pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    pm.expect(jsonData.username).to.eql(user);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"display\": \"scrap lvl1\",\n    \"email\": \"scrap\",\n    \"metadata\": {},\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": false,\n        \"canAdmin\": false\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=privileges&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": [
										{
											"name": "UserProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"metadata\": \"<object>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": false,\n        \"canAdmin\": false\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"metadata\": \"<object>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": false,\n        \"canAdmin\": false\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Set all properties of a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc5469a-fd51-48ec-aac9-700a5dfb9e51",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"display\",\r",
													"    \"email\",\r",
													"    \"metadata\",\r",
													"    \"privileges\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\"\r",
													"]\r",
													"let privilegesKeys = [\r",
													"    \"canAdmin\",\r",
													"    \"globalAccess\",\r",
													"    \"canCreateCollection\"\r",
													"]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all required privileges keys\", function () {\r",
													"    pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    pm.expect(jsonData.username).to.eql(user);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"display\": \"scrap lvl1\",\n    \"email\": \"scrap\",\n    \"metadata\": {},\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": false,\n        \"canAdmin\": false\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=privileges&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": [
										{
											"name": "UserProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": true,\n        \"canAdmin\": true\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": true,\n        \"canAdmin\": true\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Delete a User",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "<string>",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": [
										{
											"name": "UserProjected response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"bizarroLvl1234\",\n    \"display\": \"scrap lvl2\",\n    \"email\": \"scrap\",\n    \"metadata\": {},\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": false,\n        \"canAdmin\": false\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=privileges&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "wat",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": true,\n        \"canAdmin\": true\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								},
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": false,\n        \"canCreateCollection\": true,\n        \"canAdmin\": true\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"voluptate do minim\",\n  \"username\": \"fu\",\n  \"display\": \"et in magna sit\",\n  \"email\": \"ad Ut Excepteur\",\n  \"metadata\": \"velit\",\n  \"created\": \"anim dolor in incididunt\",\n  \"lastAccess\": \"ut sunt\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": false,\n   \"canAdmin\": true\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"sunt \",\n     \"name\": \"in minim\"\n    },\n    \"accessLevel\": 72584974\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"veniam adipisicing cill\",\n     \"name\": \"in\"\n    },\n    \"accessLevel\": -7259017\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"Ut irure voluptate ex\",\n   \"lastAccess\": \"dolore do labore consectetur exercitation\"\n  }\n },\n {\n  \"userId\": \"quis magna enim\",\n  \"username\": \"qui\",\n  \"display\": \"incididunt elit Duis\",\n  \"email\": \"ut Lorem Ut nisi\",\n  \"metadata\": \"consectetur Ut elit anim sunt\",\n  \"created\": \"proi\",\n  \"lastAccess\": \"id labore pariatur magna\",\n  \"privileges\": {\n   \"globalAccess\": false,\n   \"canCreateCollection\": true,\n   \"canAdmin\": false\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"Excepteur pariatur Duis ipsum\",\n     \"name\": \"ea in sit\"\n    },\n    \"accessLevel\": -86637379\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"ullamco deserunt magna ea\",\n     \"name\": \"anim tempor aliqua occaecat\"\n    },\n    \"accessLevel\": 27304912\n   }\n  ],\n  \"statistics\": {\n   \"created\": \"exercitation velit ipsum labore\",\n   \"lastAccess\": \"irure est in nostrud\"\n  }\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "op PPPD",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Import and overwrite application data",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "/E:/gits/github/stig-manager/test/stig-manager-appdata.json.zip"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": [
										{
											"name": "Import successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"value": "<binary>",
															"description": {
																"content": "",
																"type": "text/plain"
															},
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"consequat do irure\""
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"value": "<binary>",
															"description": {
																"content": "",
																"type": "text/plain"
															},
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Requests that alter data",
			"protocolProfileBehavior": {}
		},
		{
			"name": "STIGS",
			"item": [
				{
					"name": "stigs GET",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "groups",
													"item": [
														{
															"name": "Return the list of groups for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c615abaa-378b-4f3a-a7e8-48117d1689bc",
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																},
																{
																	"name": "Group response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"rules\": [\n  {\n   \"ruleId\": \"fugiat ad incididunt\",\n   \"version\": \"dolore ullamco irure\",\n   \"title\": \"dolore qui dolore\",\n   \"severity\": \"dolore reprehenderit ex id\"\n  },\n  {\n   \"ruleId\": \"non occaecat adipisicing\",\n   \"version\": \"consequat elit dolor ex\",\n   \"title\": \"dolore officia consectetur\",\n   \"severity\": \"quis ullamco Duis aliqua Ut\"\n  }\n ]\n}"
																}
															]
														},
														{
															"name": "Return the rules, checks and fixes for a Group from a specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "07164475-4c41-4f66-bf52-70805be28983",
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an object\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('object');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups",
																		":groupId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "groupId",
																			"value": "{{testGroupId}}",
																			"description": "(Required) A path parameter that indentifies a Group"
																		}
																	]
																},
																"description": "None"
															},
															"response": [
																{
																	"name": "Group response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups",
																				":groupId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "groupId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"rules\": [\n  {\n   \"ruleId\": \"in amet exercitation ut\",\n   \"version\": \"sint ex aute consequat et\",\n   \"title\": \"c\",\n   \"severity\": \"irure deserunt\"\n  },\n  {\n   \"ruleId\": \"elit tempor\",\n   \"version\": \"do\",\n   \"title\": \"ut in\",\n   \"severity\": \"ea voluptate enim\"\n  }\n ]\n}"
																},
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups",
																				":groupId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "groupId"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																}
															]
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "rules",
													"item": [
														{
															"name": "Return rule data for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "68d19a3a-bad2-41ac-99f8-bb6e1ba6b356",
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=details&projection=cci&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "details",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "cci",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																},
																{
																	"name": "Rule response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n {\n  \"ruleId\": \"est adipisicing veniam\",\n  \"groupId\": \"fugiat Duis aliquip\",\n  \"groupTitle\": \"qui voluptate Lorem\",\n  \"version\": \"elit mollit cupidatat commodo\",\n  \"title\": \"cillum sit\",\n  \"severity\": \"Lorem dolore voluptate\",\n  \"weight\": \"magna dolor\",\n  \"vulnDiscussion\": \"Excepteu\",\n  \"falsePositives\": \"aliqua et sint\",\n  \"falseNegatives\": \"non\",\n  \"documentable\": \"dolore est sed anim ut\",\n  \"mitigations\": \"esse minim ipsum\",\n  \"securityOverrideGuidance\": \"cupidatat consectetur sunt aliqua eiusmod\",\n  \"potentialImpacts\": \"dolor in amet sed consequat\",\n  \"thirdPartyTools\": \"voluptate exercitation fugiat aute non\",\n  \"mitigationControl\": \"ma\",\n  \"responsibility\": \"ullamco eiusmod amet\"\n },\n {\n  \"ruleId\": \"ut qui ex\",\n  \"groupId\": \"elit nostrud ad\",\n  \"groupTitle\": \"eiusmod aliqua voluptate sed\",\n  \"version\": \"nostrud ut adipisicing\",\n  \"title\": \"enim anim\",\n  \"severity\": \"cillum\",\n  \"weight\": \"amet dolor minim\",\n  \"vulnDiscussion\": \"sunt cupidatat Lorem eiusmod Ut\",\n  \"falsePositives\": \"consectetur tempor nulla\",\n  \"falseNegatives\": \"incididunt\",\n  \"documentable\": \"Excepteur in pariatur\",\n  \"mitigations\": \"Duis culpa dolor\",\n  \"securityOverrideGuidance\": \"dolor deserunt\",\n  \"potentialImpacts\": \"consectetur dolor qui\",\n  \"thirdPartyTools\": \"nulla ullamco qui nostrud culpa\",\n  \"mitigationControl\": \"sunt et\",\n  \"responsibility\": \"in eu occaecat\"\n }\n]"
																}
															]
														},
														{
															"name": "Return rule data for the LATEST revision of a STIG",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f97d12fc-a333-4047-a914-5a9222e1cbd3",
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=details&projection=cci&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "details",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "cci",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "latest",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																},
																{
																	"name": "Rule response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n {\n  \"ruleId\": \"est adipisicing veniam\",\n  \"groupId\": \"fugiat Duis aliquip\",\n  \"groupTitle\": \"qui voluptate Lorem\",\n  \"version\": \"elit mollit cupidatat commodo\",\n  \"title\": \"cillum sit\",\n  \"severity\": \"Lorem dolore voluptate\",\n  \"weight\": \"magna dolor\",\n  \"vulnDiscussion\": \"Excepteu\",\n  \"falsePositives\": \"aliqua et sint\",\n  \"falseNegatives\": \"non\",\n  \"documentable\": \"dolore est sed anim ut\",\n  \"mitigations\": \"esse minim ipsum\",\n  \"securityOverrideGuidance\": \"cupidatat consectetur sunt aliqua eiusmod\",\n  \"potentialImpacts\": \"dolor in amet sed consequat\",\n  \"thirdPartyTools\": \"voluptate exercitation fugiat aute non\",\n  \"mitigationControl\": \"ma\",\n  \"responsibility\": \"ullamco eiusmod amet\"\n },\n {\n  \"ruleId\": \"ut qui ex\",\n  \"groupId\": \"elit nostrud ad\",\n  \"groupTitle\": \"eiusmod aliqua voluptate sed\",\n  \"version\": \"nostrud ut adipisicing\",\n  \"title\": \"enim anim\",\n  \"severity\": \"cillum\",\n  \"weight\": \"amet dolor minim\",\n  \"vulnDiscussion\": \"sunt cupidatat Lorem eiusmod Ut\",\n  \"falsePositives\": \"consectetur tempor nulla\",\n  \"falseNegatives\": \"incididunt\",\n  \"documentable\": \"Excepteur in pariatur\",\n  \"mitigations\": \"Duis culpa dolor\",\n  \"securityOverrideGuidance\": \"dolor deserunt\",\n  \"potentialImpacts\": \"consectetur dolor qui\",\n  \"thirdPartyTools\": \"nulla ullamco qui nostrud culpa\",\n  \"mitigationControl\": \"sunt et\",\n  \"responsibility\": \"in eu occaecat\"\n }\n]"
																}
															]
														},
														{
															"name": "Return rule data for the specified Rule in a revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7ef8b224-57cd-46a6-84ad-38b4a88558b8",
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an object\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('object');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=details&projection=cci&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "details",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "cci",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "ruleId",
																			"value": "{{testRuleId}}",
																			"description": "(Required) A path parameter that indentifies a Rule"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Rule response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules",
																				":ruleId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "ruleId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n {\n  \"ruleId\": \"ad ea Lorem in\",\n  \"groupId\": \"exercitation Lorem ullamco\",\n  \"groupTitle\": \"veniam sint deserunt\",\n  \"version\": \"officia dolore sunt aliquip occaecat\",\n  \"title\": \"pariatur in\",\n  \"severity\": \"reprehenderit id exercitation Lorem\",\n  \"weight\": \"commodo esse Duis\",\n  \"vulnDiscussion\": \"quis tempor Excepteur nulla\",\n  \"falsePositives\": \"enim\",\n  \"falseNegatives\": \"aliqua cillum proident nisi do\",\n  \"documentable\": \"ullamco magna in dolore\",\n  \"mitigations\": \"in exercitation tempor\",\n  \"securityOverrideGuidance\": \"magna et\",\n  \"potentialImpacts\": \"proident\",\n  \"thirdPartyTools\": \"Ut laborum elit\",\n  \"mitigationControl\": \"elit\",\n  \"responsibility\": \"esse Excepteur irure sed pariatur\",\n  \"cci\": [\n   {\n    \"cci\": \"nisi eu\",\n    \"apAcronym\": \"velit qui\",\n    \"control\": \"dolor nostrud ipsum qui elit\"\n   },\n   {\n    \"cci\": \"in aliquip sunt\",\n    \"apAcronym\": \"eu anim\",\n    \"control\": \"reprehenderit deserunt Duis dolor\"\n   }\n  ],\n  \"checks\": [\n   {\n    \"checkId\": \"Ut cillum\",\n    \"content\": \"veniam\"\n   },\n   {\n    \"checkId\": \"aliqua ex incididunt ullamco mollit\",\n    \"content\": \"sint\"\n   }\n  ],\n  \"fixes\": [\n   {\n    \"fixId\": \"laboris tempor in in\",\n    \"text\": \"sit eu\"\n   },\n   {\n    \"fixId\": \"cupidatat velit ipsum\",\n    \"text\": \"exercitation\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"in Lorem est\",\n  \"groupId\": \"nostrud velit irure dolore\",\n  \"groupTitle\": \"nisi tempor ad consequat\",\n  \"version\": \"ullamco ipsum\",\n  \"title\": \"dolore ea\",\n  \"severity\": \"mollit irure\",\n  \"weight\": \"eu et\",\n  \"vulnDiscussion\": \"in\",\n  \"falsePositives\": \"nulla mollit do\",\n  \"falseNegatives\": \"cillum Ut\",\n  \"documentable\": \"ad nulla culpa\",\n  \"mitigations\": \"Excepteur Duis ex Lorem\",\n  \"securityOverrideGuidance\": \"dolore consequat exercitation\",\n  \"potentialImpacts\": \"Lorem minim aliqua incididunt enim\",\n  \"thirdPartyTools\": \"aliquip culpa dolor pariatur\",\n  \"mitigationControl\": \"consequat do voluptate\",\n  \"responsibility\": \"aliqua\",\n  \"cci\": [\n   {\n    \"cci\": \"in\",\n    \"apAcronym\": \"dolore amet occaecat\",\n    \"control\": \"commodo et adipisicing do mol\"\n   },\n   {\n    \"cci\": \"amet sit\",\n    \"apAcronym\": \"consequat\",\n    \"control\": \"dolore dolor\"\n   }\n  ],\n  \"checks\": [\n   {\n    \"checkId\": \"nulla nostrud veniam incididunt\",\n    \"content\": \"consectetur cupidatat\"\n   },\n   {\n    \"checkId\": \"Lorem\",\n    \"content\": \"nostrud eu laboris exercitation\"\n   }\n  ],\n  \"fixes\": [\n   {\n    \"fixId\": \"deserunt elit Lorem sed\",\n    \"text\": \"proident commodo ut\"\n   },\n   {\n    \"fixId\": \"reprehenderit eiusmo\",\n    \"text\": \"non consequat\"\n   }\n  ]\n }\n]"
																},
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"rules",
																				":ruleId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "ruleId"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																}
															]
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Return metadata for the specified revision of a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "16ef7d1d-4d19-428e-9dfd-98cdc8439b78",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "Revision response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"benchmarkId\": \"nisi id q\",\n \"revisionStr\": \"consectetur dolore\",\n \"version\": \"velit cupidatat anim qui\",\n \"release\": \"in dolor aliqua fugiat\",\n \"benchmarkDate\": \"ad in\",\n \"status\": \"pariatur cillum\",\n \"statusDate\": \"in sunt\",\n \"description\": \"Excepteur\"\n}"
														}
													]
												},
												{
													"name": "Return a list of CCIs from a STIG revision",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b53b0cc4-2cb7-4920-9949-da9233a8ce47",
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/ccis",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr",
																"ccis"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": [
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/ccis",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"ccis"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														},
														{
															"name": "CCI response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/ccis",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"ccis"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n {\n  \"cci\": \"magna in\",\n  \"type\": \"exercitation aliqua Lorem\",\n  \"references\": [\n   {\n    \"creator\": \"Excepteur aute\",\n    \"title\": \"sint minim\",\n    \"version\": \"dolor ad\",\n    \"location\": \"sed pariat\",\n    \"indexDisa\": \"sunt Duis reprehenderit\",\n    \"textRefNist\": \"anim non ipsum\",\n    \"parentControl\": \"Duis \"\n   },\n   {\n    \"creator\": \"tempor veniam\",\n    \"title\": \"mollit culpa nisi ipsum\",\n    \"version\": \"adipisicing in Duis sed\",\n    \"location\": \"Lorem laborum eu Duis minim\",\n    \"indexDisa\": \"ut in sunt\",\n    \"textRefNist\": \"tempor esse labore\",\n    \"parentControl\": \"nisi cillum laborum ipsum dolor\"\n   }\n  ]\n },\n {\n  \"cci\": \"sint magna laborum adipisicing minim\",\n  \"type\": \"nostrud adipisicing tempor\",\n  \"references\": [\n   {\n    \"creator\": \"reprehenderit labore m\",\n    \"title\": \"irure in deserunt pariatur\",\n    \"version\": \"mollit ut\",\n    \"location\": \"anim pariatur qui velit\",\n    \"indexDisa\": \"incididunt esse ullamco quis\",\n    \"textRefNist\": \"aliqua commodo aute\",\n    \"parentControl\": \"velit veniam ad magna enim\"\n   },\n   {\n    \"creator\": \"proident qui laboris amet\",\n    \"title\": \"et fugiat aute\",\n    \"version\": \"sed\",\n    \"location\": \"deserunt\",\n    \"indexDisa\": \"culpa mollit\",\n    \"textRefNist\": \"dolore id in\",\n    \"parentControl\": \"in Duis\"\n   }\n  ]\n }\n]"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Return a list of revisions for the specified STIG",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35da2c16-cad4-421d-960c-b38e1119fe54",
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions"
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														}
													]
												}
											},
											"response": [
												{
													"name": "Revision response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions"
															],
															"variable": [
																{
																	"key": "benchmarkId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"benchmarkId\": \"et ea aliquip voluptate\",\n  \"revisionStr\": \"non commodo voluptate\",\n  \"version\": \"minim elit aute\",\n  \"release\": \"exercitation dolor\",\n  \"benchmarkDate\": \"consectetur ea\",\n  \"status\": \"in ea\",\n  \"statusDate\": \"Ut f\",\n  \"description\": \"ea et laboris\"\n },\n {\n  \"benchmarkId\": \"aute magna\",\n  \"revisionStr\": \"do incididunt\",\n  \"version\": \"in ex cupidatat voluptate occaecat\",\n  \"release\": \"dolor veniam ex proident sit\",\n  \"benchmarkDate\": \"aliqua irure\",\n  \"status\": \"ipsum consequat Excepteur\",\n  \"statusDate\": \"nisi esse officia fugiat tempor\",\n  \"description\": \"irure aliquip do officia\"\n }\n]"
												},
												{
													"name": "unexpected error",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions"
															],
															"variable": [
																{
																	"key": "benchmarkId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Return properties of the specified STIG",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f97f8a0-661b-4ab8-a8ab-26ca92a73ec8",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": [
										{
											"name": "STIG response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId"
													],
													"variable": [
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"benchmarkId\": \"occaecat eiusmod ullamco nostrud lab\",\n \"lastRevisionStr\": \"deserunt dolor sit\",\n \"lastRevisionDate\": \"dolor in mollit amet\",\n \"title\": \"cillum labore esse\",\n \"ruleCount\": -91310498\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId"
													],
													"variable": [
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return a list of available STIGs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73ebe8ac-2929-44fb-abe0-ed6fb9782658",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "<string>",
											"description": "A string found anywhere in a STIG title",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "STIG response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs?title=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "title",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"benchmarkId\": \"magna dolor\",\n  \"lastRevisionStr\": \"consequat ex\",\n  \"lastRevisionDate\": \"proident dolor\",\n  \"title\": \"nulla qui ut\",\n  \"ruleCount\": 24492673\n },\n {\n  \"benchmarkId\": \"ad qui\",\n  \"lastRevisionStr\": \"anim ad laboris\",\n  \"lastRevisionDate\": \"exercitation sint\",\n  \"title\": \"pariatur quis sunt enim dolore\",\n  \"ruleCount\": 23301812\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs?title=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "title",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						},
						{
							"name": "Return a list of available STIGs NAME FILTER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9102c569-4d5d-4d11-80d4-b2367ce3c075",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs?title=vpn",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "vpn",
											"description": "A string found anywhere in a STIG title"
										}
									]
								}
							},
							"response": [
								{
									"name": "STIG response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs?title=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "title",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"benchmarkId\": \"magna dolor\",\n  \"lastRevisionStr\": \"consequat ex\",\n  \"lastRevisionDate\": \"proident dolor\",\n  \"title\": \"nulla qui ut\",\n  \"ruleCount\": 24492673\n },\n {\n  \"benchmarkId\": \"ad qui\",\n  \"lastRevisionStr\": \"anim ad laboris\",\n  \"lastRevisionDate\": \"exercitation sint\",\n  \"title\": \"pariatur quis sunt enim dolore\",\n  \"ruleCount\": 23301812\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs?title=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "title",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						},
						{
							"name": "Return the defintion and associated checks and fixes for the specified Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4254c5e9-668d-45ff-904e-503adc76d6d7",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/rules/:ruleId?projection=details&projection=cci&projection=checks&projection=fixes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"rules",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "details",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "cci",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "checks"
										},
										{
											"key": "projection",
											"value": "fixes"
										}
									],
									"variable": [
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": [
								{
									"name": "Rule response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/rules/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												"rules",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ruleId\": \"deserunt Duis Ut dolor\",\n \"groupId\": \"culpa non \",\n \"groupTitle\": \"est aute deserunt\",\n \"version\": \"amet labore commod\",\n \"title\": \"in\",\n \"severity\": \"minim sunt\",\n \"weight\": \"amet dolor\",\n \"vulnDiscussion\": \"aliquip dolore voluptate ut\",\n \"falsePositives\": \"dolore id\",\n \"falseNegatives\": \"fugiat anim\",\n \"documentable\": \"aliqua qui reprehenderit occaecat deserunt\",\n \"mitigations\": \"veniam Excepteur aute consequat ullamco\",\n \"securityOverrideGuidance\": \"velit nostrud\",\n \"potentialImpacts\": \"exercitation occae\",\n \"thirdPartyTools\": \"aliqua\",\n \"mitigationControl\": \"in\",\n \"responsibility\": \"esse al\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/rules/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												"rules",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						},
						{
							"name": "Return data for the specified CCI",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29a787a2-3abc-453e-8277-c928955340a2",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/ccis/:cci",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"ccis",
										":cci"
									],
									"variable": [
										{
											"key": "cci",
											"value": "{{testCci}}",
											"description": "(Required) A path parameter that indentifies a CCI"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/ccis/:cci",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												"ccis",
												":cci"
											],
											"variable": [
												{
													"key": "cci"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								},
								{
									"name": "CCI response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/ccis/:cci",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												"ccis",
												":cci"
											],
											"variable": [
												{
													"key": "cci"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"cci\": \"amet et aliqua adipisicing anim\",\n  \"status\": \"id amet ut\",\n  \"publishdate\": \"amet et proident labo\",\n  \"contributor\": \"Excepteur sed exercitation\",\n  \"type\": \"sed\",\n  \"defintion\": \"nostrud et in\",\n  \"emassAp\": {\n   \"apAcronym\": \"ad elit consectetur\",\n   \"implementation\": \"dolor reprehenderit incididunt dolore\",\n   \"assessmentProcedure\": \"officia do laborum\"\n  },\n  \"references\": [\n   {\n    \"creator\": \"sed commodo\",\n    \"title\": \"nulla velit eu dolore\",\n    \"version\": \"cillum Duis consequat non\",\n    \"location\": \"aliquip deserunt ullamco\",\n    \"indexDisa\": \"consequat\",\n    \"textRefNist\": \"tempor ipsum mollit qui\",\n    \"parentControl\": \"cupidatat sint\"\n   },\n   {\n    \"creator\": \"veniam\",\n    \"title\": \"do id eu enim\",\n    \"version\": \"\",\n    \"location\": \"in in nulla anim\",\n    \"indexDisa\": \"culpa\",\n    \"textRefNist\": \"deserunt\",\n    \"parentControl\": \"lab\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"paria\",\n    \"revisionStr\": \"est cupidatat sed reprehenderit\"\n   },\n   {\n    \"benchmarkId\": \"nisi ut\",\n    \"revisionStr\": \"labore eu in\"\n   }\n  ]\n },\n {\n  \"cci\": \"cupidatat sunt eiusmod in\",\n  \"status\": \"Ut ut\",\n  \"publishdate\": \"do exer\",\n  \"contributor\": \"ut Duis quis cillum\",\n  \"type\": \"commodo dolore occaecat\",\n  \"defintion\": \"ut fugiat\",\n  \"emassAp\": {\n   \"apAcronym\": \"minim et quis sint mollit\",\n   \"implementation\": \"ea ex esse irure\",\n   \"assessmentProcedure\": \"in sit ipsum\"\n  },\n  \"references\": [\n   {\n    \"creator\": \"reprehenderit dolore cillum\",\n    \"title\": \"aliqua sit amet ea\",\n    \"version\": \"do\",\n    \"location\": \"ea aute\",\n    \"indexDisa\": \"anim amet\",\n    \"textRefNist\": \"reprehenderit labore\",\n    \"parentControl\": \"dolor amet sunt do\"\n   },\n   {\n    \"creator\": \"dolor occaecat Duis ut dolore\",\n    \"title\": \"non aute id sit\",\n    \"version\": \"ipsum est cons\",\n    \"location\": \"ad ut ipsum\",\n    \"indexDisa\": \"magna minim in velit\",\n    \"textRefNist\": \"id in cillum\",\n    \"parentControl\": \"aute\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"eu minim reprehenderit\",\n    \"revisionStr\": \"veniam esse\"\n   },\n   {\n    \"benchmarkId\": \"irure quis co\",\n    \"revisionStr\": \"voluptate pariatur in\"\n   }\n  ]\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "stigs PPPD",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "groups",
													"item": [
														{
															"name": "Return the list of groups for the specified revision of a STIG.",
															"request": {
																"auth": {
																	"type": "oauth2"
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "<string>",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Group response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"rules\": [\n  {\n   \"ruleId\": \"fugiat ad incididunt\",\n   \"version\": \"dolore ullamco irure\",\n   \"title\": \"dolore qui dolore\",\n   \"severity\": \"dolore reprehenderit ex id\"\n  },\n  {\n   \"ruleId\": \"non occaecat adipisicing\",\n   \"version\": \"consequat elit dolor ex\",\n   \"title\": \"dolore officia consectetur\",\n   \"severity\": \"quis ullamco Duis aliqua Ut\"\n  }\n ]\n}"
																},
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																}
															]
														},
														{
															"name": "Return the rules, checks and fixes for a Group from a specified revision of a STIG.",
															"request": {
																"auth": {
																	"type": "oauth2"
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=<string>&projection=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups",
																		":groupId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "<string>",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "<string>",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "groupId",
																			"value": "<string>",
																			"description": "(Required) A path parameter that indentifies a Group"
																		}
																	]
																},
																"description": "None"
															},
															"response": [
																{
																	"name": "unexpected error",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups",
																				":groupId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "groupId"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
																},
																{
																	"name": "Group response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=<string>&projection=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"stigs",
																				":benchmarkId",
																				"revisions",
																				":revisionStr",
																				"groups",
																				":groupId"
																			],
																			"query": [
																				{
																					"key": "projection",
																					"value": "<string>"
																				},
																				{
																					"key": "projection",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "benchmarkId"
																				},
																				{
																					"key": "revisionStr"
																				},
																				{
																					"key": "groupId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"rules\": [\n  {\n   \"ruleId\": \"in amet exercitation ut\",\n   \"version\": \"sint ex aute consequat et\",\n   \"title\": \"c\",\n   \"severity\": \"irure deserunt\"\n  },\n  {\n   \"ruleId\": \"elit tempor\",\n   \"version\": \"do\",\n   \"title\": \"ut in\",\n   \"severity\": \"ea voluptate enim\"\n  }\n ]\n}"
																}
															]
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "rules",
													"item": [],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Deletes the specified revision of a STIG",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "zOS_TDMF_for_RACF_STIG",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "V6R4",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": [
														{
															"name": "The deleted Revision",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"benchmarkId\": \"nisi id q\",\n \"revisionStr\": \"consectetur dolore\",\n \"version\": \"velit cupidatat anim qui\",\n \"release\": \"in dolor aliqua fugiat\",\n \"benchmarkDate\": \"ad in\",\n \"status\": \"pariatur cillum\",\n \"statusDate\": \"in sunt\",\n \"description\": \"Excepteur\"\n}"
														},
														{
															"name": "unexpected error",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr"
																	],
																	"variable": [
																		{
																			"key": "benchmarkId"
																		},
																		{
																			"key": "revisionStr"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Deletes a STIG (*** and all revisions ***)",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "zOS_Websphere_Application_Server_for_RACF_STIG",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId"
													],
													"variable": [
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "The deleted STIG",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId"
													],
													"variable": [
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"benchmarkId\": \"occaecat eiusmod ullamco nostrud lab\",\n \"lastRevisionStr\": \"deserunt dolor sit\",\n \"lastRevisionDate\": \"dolor in mollit amet\",\n \"title\": \"cillum labore esse\",\n \"ruleCount\": -91310498\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Import a new STIG",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "<string>",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"value": "<binary>",
											"type": "text"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									]
								}
							},
							"response": [
								{
									"name": "The added STIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "<string>",
													"description": {
														"content": " (This can only be one of true,false)",
														"type": "text/plain"
													},
													"type": "text"
												},
												{
													"key": "importFile",
													"value": "<binary>",
													"description": {
														"content": "",
														"type": "text/plain"
													},
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"benchmarkId\": \"occaecat eiusmod ullamco nostrud lab\",\n \"lastRevisionStr\": \"deserunt dolor sit\",\n \"lastRevisionDate\": \"dolor in mollit amet\",\n \"title\": \"cillum labore esse\",\n \"ruleCount\": -91310498\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "<string>",
													"description": {
														"content": " (This can only be one of true,false)",
														"type": "text/plain"
													},
													"type": "text"
												},
												{
													"key": "importFile",
													"value": "<binary>",
													"description": {
														"content": "",
														"type": "text/plain"
													},
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invalid Requests",
			"item": [
				{
					"name": "Invalid Requests GET",
					"item": [
						{
							"name": "Collections",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assets",
							"item": [
								{
									"name": "Return an Asset (no grant)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b8c1ff2-18f5-49db-88e0-9b1b5ea7e99f",
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    // pm.expect(jsonData.collection).to.have.all.keys(collectionKeys);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            for (let user of grant.users){\r",
													"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Return the Review for an INVALID Asset (wrong collection)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "34",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{reviews.testRule}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										}
									},
									"response": [
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"dolore in\",\n \"assetName\": \"mollit cillum nulla anim consectetur\",\n \"ruleId\": \"ipsum\",\n \"result\": \"<string>\",\n \"resultComment\": \"elit ullamco sint adipisicing\",\n \"autoResult\": false,\n \"action\": \"<string>\",\n \"actionComment\": \"nostrud fugiat pariatur eiusm\",\n \"status\": \"<string>\",\n \"userId\": \"adipisicing et deserunt enim\",\n \"username\": \"occaecat\",\n \"ts\": \"eu sed dolore do enim\",\n \"rejectText\": \"fugiat ad culpa\",\n \"rejectUserId\": \"sed dolore exercitation in\",\n \"history\": [\n  {\n   \"ts\": \"sit minim eiusmod\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"voluptate in dolor\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"esse Excepteur dolore\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"incididunt do veniam\",\n   \"username\": \"ex est\",\n   \"rejectText\": \"dolor sint\"\n  },\n  {\n   \"ts\": \"magna est\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"ad ut\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"in Ut qui velit\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla tempor\",\n   \"username\": \"labore adipisicing sunt ea\",\n   \"rejectText\": \"eiusmod\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"culpa reprehenderit incididunt\",\n  \"name\": \"incididunt qui do\"\n },\n \"stigs\": [\n  \"irure\",\n  \"dolore proident\"\n ],\n \"rule\": {\n  \"ruleId\": \"cupidatat\",\n  \"version\": \"ipsum\",\n  \"title\": \"laboris incididunt\",\n  \"severity\": \"ea id\"\n }\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reviews",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e70dfd7f-f54c-4170-be10-53322baf019a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ae72c71-829d-44b1-aa1e-2186fc9f9727",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invalid Requests PPPD",
					"item": [
						{
							"name": "Collections",
							"item": [
								{
									"name": "set stig-asset grants for a lvl1 user in this collection. NON-LVL1 USER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f8e6bf2-f7d9-4a01-8e70-2723817ed757",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"pm.test(\"Status should be is 403 for all users. Attempting to give invalid users a stig-asset assignment.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"return;\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 200\", function () {\r",
													"//         pm.response.to.have.status(200);\r",
													"//     });\r",
													"// }\r",
													"// if (pm.response.code !== 200) {\r",
													"//     return;\r",
													"// }\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"//     pm.expect(jsonData).to.be.an('array');\r",
													"//     pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"//     pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{scrapBenchmark}}\",\r\n        \"assetId\": \"{{scrapAsset}}\"\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}"
												},
												{
													"key": "userId",
													"value": "{{scrapAdmin}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grants for a lvl1 user in this collection. INVALID CollectionId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd597f37-8e0b-4cc8-a24d-804ffa0cec8f",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"pm.test(\"Status should be is 403 for all users. Attempting to give invalid users a stig-asset assignment.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"return;\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" ) { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 200\", function () {\r",
													"//         pm.response.to.have.status(200);\r",
													"//     });\r",
													"// }\r",
													"// if (pm.response.code !== 200) {\r",
													"//     return;\r",
													"// }\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"//     pm.expect(jsonData).to.be.an('array');\r",
													"//     pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"//     pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{scrapBenchmark}}\",\r\n        \"assetId\": \"{{scrapAsset}}\"\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "666"
												},
												{
													"key": "userId",
													"value": "{{scrapAdmin}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assets",
							"item": [
								{
									"name": "map invalid Assets to a STIG [expect fail]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e143e554-a0f5-494c-8bcd-151695a0722a",
												"exec": [
													"    pm.test(\"Status code is 403 for invalid requests\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"664\"\n    ]\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate={{elevated}}&projection=userGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId",
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "userGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{scrapBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "Revision response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"assetId\": \"ipsum Excepteur no\",\n  \"name\": \"culpa aute anim esse Lorem\"\n },\n {\n  \"assetId\": \"Lorem adipisicing ad\",\n  \"name\": \"ut amet deserunt aute\"\n }\n]"
										}
									]
								},
								{
									"name": "Set the Assets mapped to a STIG - Asset Not In Collection - fail expected",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<string>\",\n    \"<string>\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId",
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{scrapBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "Revision response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"assetId\": \"ipsum Excepteur no\",\n  \"name\": \"culpa aute anim esse Lorem\"\n },\n {\n  \"assetId\": \"Lorem adipisicing ad\",\n  \"name\": \"ut amet deserunt aute\"\n }\n]"
										}
									]
								},
								{
									"name": "Set the Assets mapped to a STIG - Asset Not In Collection - fail expected Copy",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<string>\",\n    \"<string>\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId",
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{scrapBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": [
										{
											"name": "Revision response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"assetId\": \"ipsum Excepteur no\",\n  \"name\": \"culpa aute anim esse Lorem\"\n },\n {\n  \"assetId\": \"Lorem adipisicing ad\",\n  \"name\": \"ut amet deserunt aute\"\n }\n]"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs",
														":benchmarkId",
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "benchmarkId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Merge provided properties with an Asset (move asset to different collection that already has asset of same name)",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test asset PATCH {{user}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\"\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": [
										{
											"name": "AssetProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"eu et\",\n \"name\": \"quis exercitation do cupidatat\",\n \"collection\": {\n  \"collectionId\": \"est et\",\n  \"name\": \"aliquip reprehenderit\",\n  \"workflow\": \"continuous\"\n },\n \"description\": \"in nulla do exercitation\",\n \"ip\": \"labore ullamco\",\n \"noncomputing\": true,\n \"metadata\": \"id occaecat Lorem deserunt ad\",\n \"adminStats\": {\n  \"stigCount\": -4608915,\n  \"stigAssignedCount\": -68692699\n },\n \"stigs\": [\n  {\n   \"benchmarkId\": \"est reprehenderit pariatur nostrud anim\",\n   \"lastRevisionStr\": \"qui anim dolore veniam\",\n   \"lastRevisionDate\": \"eu dolor fugiat\",\n   \"title\": \"aute aliquip nulla\",\n   \"ruleCount\": 23322456\n  },\n  {\n   \"benchmarkId\": \"dolore occaecat cupidatat ipsum\",\n   \"lastRevisionStr\": \"Duis aliqua sint\",\n   \"lastRevisionDate\": \"incididunt id in ex cupidatat\",\n   \"title\": \"sed Ut consectetur dolor\",\n   \"ruleCount\": 6875346\n  }\n ],\n \"stigGrants\": [\n  {\n   \"benchmarkId\": \"eiusmod sunt adipisicing in\",\n   \"users\": [\n    {\n     \"userId\": \"sint culpa aute in\",\n     \"username\": \"mollit consequat Ut deserunt\"\n    },\n    {\n     \"userId\": \"reprehenderit\",\n     \"username\": \"in quis\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"minim con\",\n   \"users\": [\n    {\n     \"userId\": \"non Excepteur ex\",\n     \"username\": \"eiusmod do anim\"\n    },\n    {\n     \"userId\": \"pariatur veniam culpa ut\",\n     \"username\": \"commodo enim\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"collectionId\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"noncomputing\": \"<boolean>\",\n    \"metadata\": \"<object>\",\n    \"stigs\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reviews",
							"item": [
								{
									"name": "Set all properties of a Review (expect fail) TBD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78eb63c7-d7c2-4093-9b3c-b7b698623db4",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"globular\" || user == \"collectionCreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{testRuleId}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": [
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"reprehenderit sed\",\n \"assetName\": \"Lorem in Except\",\n \"ruleId\": \"aute\",\n \"result\": \"<string>\",\n \"resultComment\": \"occaecat ut sed qui\",\n \"autoResult\": true,\n \"action\": \"<string>\",\n \"actionComment\": \"elit commodo proident\",\n \"status\": \"<string>\",\n \"userId\": \"offi\",\n \"username\": \"tempor Ut\",\n \"ts\": \"id tempor\",\n \"rejectText\": \"id incididunt do\",\n \"rejectUserId\": \"\",\n \"history\": [\n  {\n   \"ts\": \"Lorem\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"culpa sit\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"ad tempor proident aliquip\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"in ullamco do\",\n   \"username\": \"cupidatat Lorem eu\",\n   \"rejectText\": \"esse non\"\n  },\n  {\n   \"ts\": \"eu nostrud exercit\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"labore nulla\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"Ut nisi sit sint\",\n   \"autoResult\": false,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla non\",\n   \"username\": \"proident fugiat nulla\",\n   \"rejectText\": \"reprehenderit anim\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"reprehenderit nisi officia\",\n  \"name\": \"est Excepteur nostrud\"\n },\n \"stigs\": [\n  \"culpa commodo sed ullamco\",\n  \"dolore\"\n ],\n \"rule\": {\n  \"ruleId\": \"anim\",\n  \"version\": \"sunt amet reprehenderit\",\n  \"title\": \"eu do culpa\",\n  \"severity\": \"ad ex velit aute laboris\"\n }\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										}
									]
								},
								{
									"name": "Try to add review for a rule that does not exist in STIG Man",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52917d4f-8345-4897-b460-715e4319b547",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"globular\" || user == \"collectionCreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{testRuleId}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 97991014,\n \"message\": \"laboris proident\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"reprehenderit sed\",\n \"assetName\": \"Lorem in Except\",\n \"ruleId\": \"aute\",\n \"result\": \"<string>\",\n \"resultComment\": \"occaecat ut sed qui\",\n \"autoResult\": true,\n \"action\": \"<string>\",\n \"actionComment\": \"elit commodo proident\",\n \"status\": \"<string>\",\n \"userId\": \"offi\",\n \"username\": \"tempor Ut\",\n \"ts\": \"id tempor\",\n \"rejectText\": \"id incididunt do\",\n \"rejectUserId\": \"\",\n \"history\": [\n  {\n   \"ts\": \"Lorem\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"culpa sit\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"ad tempor proident aliquip\",\n   \"autoResult\": true,\n   \"status\": \"<string>\",\n   \"userId\": \"in ullamco do\",\n   \"username\": \"cupidatat Lorem eu\",\n   \"rejectText\": \"esse non\"\n  },\n  {\n   \"ts\": \"eu nostrud exercit\",\n   \"result\": \"<string>\",\n   \"resultComment\": \"labore nulla\",\n   \"action\": \"<string>\",\n   \"actionComment\": \"Ut nisi sit sint\",\n   \"autoResult\": false,\n   \"status\": \"<string>\",\n   \"userId\": \"nulla non\",\n   \"username\": \"proident fugiat nulla\",\n   \"rejectText\": \"reprehenderit anim\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"reprehenderit nisi officia\",\n  \"name\": \"est Excepteur nostrud\"\n },\n \"stigs\": [\n  \"culpa commodo sed ullamco\",\n  \"dolore\"\n ],\n \"rule\": {\n  \"ruleId\": \"anim\",\n  \"version\": \"sunt amet reprehenderit\",\n  \"title\": \"eu do culpa\",\n  \"severity\": \"ad ex velit aute laboris\"\n }\n}"
										}
									]
								},
								{
									"name": "test .ckls that are empty, illegal for particular user, etc. ",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "review with null result comment",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Requests that attempt to exceed accessLevels or use invalid data",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test tests",
			"item": [
				{
					"name": "Only Owners can Approve reviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "92cf5c97-5891-4bca-96f5-821313e2c1a7",
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"curUser\", \"staff\");",
					"",
					"let user = pm.iterationData.get(\"user\");",
					"let elevate = pm.iterationData.get(\"elevate\");",
					"console.log(`user: ${user} elevate: ${elevate}`);",
					"",
					"",
					"//default to stigmanadmin user, elevated, if not iterating, and user is not in env",
					"if (user === undefined) {",
					"    user = \"stigmanadmin\";",
					"    elevate = true;",
					"    pm.environment.set(\"user\", user);",
					"    pm.environment.set(\"elevated\", elevate);",
					"    let token = pm.environment.get(\"token.\" + user)",
					"    pm.environment.set(\"token\", token);",
					"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"    return;  // Just use whatever settings are currently left in the env.",
					"}",
					"",
					"",
					"",
					"let token = pm.iterationData.get(\"token\");",
					"pm.environment.set(\"token.\"+ user, token);",
					"pm.environment.set(\"token\", token);",
					"pm.environment.set(\"user\", user);",
					"pm.environment.set(\"elevated\", elevate);",
					"console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"//constructed data targets to test",
					"pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
					"pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
					"pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
					"pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
					"pm.environment.set(\"testAsset\", pm.iterationData.get(\"testAsset\"));",
					"pm.environment.set(\"testAssetName\", pm.iterationData.get(\"testAssetName\"));",
					"pm.environment.set(\"testRuleId\", pm.iterationData.get(\"testRuleId\"));",
					"pm.environment.set(\"testUserId\", pm.iterationData.get(\"testUserId\"));",
					"pm.environment.set(\"metadataKey\", pm.iterationData.get(\"metadataKey\"));",
					"pm.environment.set(\"metadataValue\", pm.iterationData.get(\"metadataValue\"));",
					"// pm.environment.set(\"targetCollectionName\", pm.iterationData.get(\"targetCollectionName\"));",
					"pm.environment.set(\"checklistLength\", pm.iterationData.get(\"checklistLength\"));",
					"",
					"//targets for data changes",
					"pm.environment.set(\"deleteAsset\", pm.iterationData.get(\"deleteAsset\"));",
					"pm.environment.set(\"scrapAsset\", pm.iterationData.get(\"scrapAsset\"));",
					"pm.environment.set(\"scrapCollection\", pm.iterationData.get(\"scrapCollection\"));",
					"",
					"",
					"//regex strings",
					"pm.environment.set(\"collectionMatchString\", pm.iterationData.get(\"collectionMatchString\"));",
					"pm.environment.set(\"assetMatchString\", pm.iterationData.get(\"assetMatchString\"));",
					"pm.environment.set(\"reviewMatchString\", pm.iterationData.get(\"reviewMatchString\"));",
					"",
					"//misc",
					"pm.environment.set(\"globalAccess\", pm.iterationData.get(\"globalAccess\"));",
					"pm.environment.set(\"accessLevel\", pm.iterationData.get(\"accessLevel\"));",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "99da3aa5-2526-4216-85b5-d36ecf57467b",
				"type": "text/javascript",
				"exec": [
					"// var user = pm.environment.get(\"user\");",
					"// var elevated = pm.environment.get(\"elevated\");",
					"",
					"// pm.test(`Collections Tests with user: ${user} elevated: ${elevated} `, function () {",
					"//     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
					"// });",
					"",
					"",
					"let user = pm.environment.get(\"user\");",
					"let elevated = pm.environment.get(\"elevated\");",
					"",
					"pm.test(`user: ${user}, elevate variable (not always used): ${elevated}`, function () {",
					"    pm.expect(1).to.equal(1);",
					"});",
					"",
					"let env = pm.environment.get(\"env\");",
					"pm.test(`environment: ${env}`, function () {",
					"    pm.expect(env).to.equal(\"STIGMan Env\");",
					"});",
					"",
					"",
					"",
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}