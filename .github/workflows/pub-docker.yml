name: Publish Docker images
on:
  workflow_dispatch:
jobs:
  build-push-alpine:
    name: Build and push from Alpine base
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Get repository metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare variables
        id: prep
        run: |
          git fetch --prune --unshallow
          DOCKER_IMAGE=nuwcdivnpt/stig-manager
          BRANCH=$(git symbolic-ref --short HEAD)
          SHA=$(git rev-parse --short=10 HEAD)
          DESCRIBE=$(git describe --tags)
          TAG=$(git describe --tags --abbrev=0)
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:latest-alpine,${DOCKER_IMAGE}:${TAG},${DOCKER_IMAGE}:${TAG}-alpine"
          echo ::set-output name=version::${TAG}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=branch::${BRANCH}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=describe::${DESCRIBE}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')                    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ORG_OWNER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ORG_OWNER_PW }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            COMMIT_BRANCH=${{ steps.prep.outputs.branch }}
            COMMIT_SHA=${{ github.sha }}
            COMMIT_TAG=${{ steps.prep.outputs.tag }}
            COMMIT_DESCRIBE=${{ steps.prep.outputs.describe }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            stig-manager.last-migration.mysql=1.0.0-beta.27
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.describe }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_ORG_OWNER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ORG_OWNER_PW }}
          repository: nuwcdivnpt/stig-manager
          short-description: An API and Web client for managing STIG assessments.
          readme-filepath: ./docs/the-project/DockerHub_Readme.md
  build-push-ironbank:
    name: Build and push from Iron Bank base
    runs-on: ubuntu-latest
    steps:
      - name: Create local registry
        id: local-registry
        run: |
          docker run -d -p 5000:5000 --name registry registry:2 
      - name: Load Iron Bank tarball
        id: tarball
        run: |
          ZIPFILE="nodejs-ib.zip"
          IB_TAG="localhost:5000/stig-manager/nodejs-ib:latest"
          URL="https://repo1.dso.mil/dsop/opensource/nodejs/nodejs14/-/jobs/artifacts/development/download?job=sign+image"
          echo "Fetching $URL"
          wget --quiet -O $ZIPFILE $URL
          echo "Unzipping the tarball"
          unzip -jq $ZIPFILE "*.tar"
          echo "Docker loading the tarball"
          IMAGE_SHA=$(find . -name "node*.tar" -exec docker load -i {} \; -quit | awk '{print $4}')
          echo "Loaded $IMAGE_SHA"
          echo "Tagging as $IB_TAG"
          docker tag $IMAGE_SHA $IB_TAG
          docker push $IB_TAG
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Get repository metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare variables
        id: prep
        run: |
          git fetch --prune --unshallow
          DOCKER_IMAGE=nuwcdivnpt/stig-manager
          BRANCH=$(git symbolic-ref --short HEAD)
          SHA=$(git rev-parse --short=10 HEAD)
          DESCRIBE=$(git describe --tags)
          TAG=$(git describe --tags --abbrev=0)
          TAGS="${DOCKER_IMAGE}:latest-ironbank,${DOCKER_IMAGE}:${TAG}-ironbank"
          echo ::set-output name=version::${TAG}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=branch::${BRANCH}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=describe::${DESCRIBE}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')                    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ORG_OWNER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ORG_OWNER_PW }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            BASE_IMAGE=localhost:5000/stig-manager/nodejs-ib:latest
            COMMIT_BRANCH=${{ steps.prep.outputs.branch }}
            COMMIT_SHA=${{ github.sha }}
            COMMIT_TAG=${{ steps.prep.outputs.tag }}
            COMMIT_DESCRIBE=${{ steps.prep.outputs.describe }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            stig-manager.last-migration.mysql=1.0.0-beta.27
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.describe }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
