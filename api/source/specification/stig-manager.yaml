openapi: 3.0.1
info:
  title: STIG Manager API
  description: An API for managing evaluations of Security Technical Implementation Guide (STIG) assessments.
  contact:
    name: Carl Smigielski
    email: carl.a.smigielski@saic.com
  version: 'v1'
servers:
  - url: 'http://localhost:64001/api'
paths:
  /assets:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetProjectionQuery'
    get:
      tags:
        - Asset
      summary: Return a list of Assets accessible to the requester
      operationId: getAssets
      parameters:
        - $ref: '#/components/parameters/CollectionIdQuery'
        - $ref: '#/components/parameters/LabelIdQuery'
        - $ref: '#/components/parameters/NameQuery'
        - $ref: '#/components/parameters/NameMatchQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/BenchmarkIdQuery'
      responses:
        '200':
          description: AssetProjected array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Asset
      summary: Create an Asset
      operationId: createAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateOrReplace'
      responses:
        '201':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        '400':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorDuplicateAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/AssetProjectionQuery'
    get:
      tags:
        - Asset
      summary: Return an Asset
      operationId: getAsset
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Asset
      summary: Merge provided properties with an Asset
      operationId: updateAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Asset
      summary: Set all properties of an Asset
      operationId: replaceAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateOrReplace'
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete an Asset
      operationId: deleteAsset
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/checklists':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
    get:
      tags:
        - Asset
      summary: Return a multi-STIG CKL for an Asset and its mapped STIGs
      operationId: getChecklistByAsset
      responses:
        '200':
          description: Review response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ChecklistCkl'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/checklists/{benchmarkId}/{revisionStr}':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
      - $ref: '#/components/parameters/RevisionStrPath'
    get:
      tags:
        - Asset
      summary: Return JSON summary, or CKL file, or XCCDF file for an Asset and STIG
      operationId: getChecklistByAssetStig
      parameters:
        - name: format
          in: query
          description: The format of the response. Default is 'json'
          schema:
            type: string
            default: json
            enum:
              - json
              - ckl
              - xccdf
      responses:
        '200':
          description: A JSON array of Checklist summary items or a CKL
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChecklistAssetStig'
            application/xml:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/ChecklistCkl'
                    - $ref: '#/components/schemas/ChecklistXccdf'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  # '/assets/{assetId}/labels':
  #   parameters:
  #     - $ref: '#/components/parameters/AssetIdPath'
  #   get:
  #     tags:
  #       - Asset
  #     summary: Return the Labels for Asset
  #     operationId: getAssetLabels
  #     responses:
  #       '200':
  #         description: Labels response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Label'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     security:
  #       - oauth:
  #           - 'stig-manager:collection:read'
  #   post:
  #     tags:
  #       - Asset
  #     summary: Add labels to an Asset
  #     operationId: addAssetLabels
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/LabelId'
  #     responses:
  #       '200':
  #         description: Labels response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Label'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     security:
  #       - oauth:
  #           - 'stig-manager:collection'
  #   put:
  #     tags:
  #       - Asset
  #     summary: Removes any previous labels and sets the new labels for an Asset
  #     operationId: replaceAssetLabels
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/LabelId'
  #     responses:
  #       '200':
  #         description: Labels response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Label'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     security:
  #       - oauth:
  #           - 'stig-manager:collection'
  #   delete:
  #     tags:
  #       - Asset
  #     summary: Removes all labels from an Asset
  #     operationId: deleteAssetLabels
  #     responses:
  #       '200':
  #         description: Labels response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Label'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     security:
  #       - oauth:
  #           - 'stig-manager:collection'
  # '/assets/{assetId}/labels/{labelId}':
  #   parameters:
  #     - $ref: '#/components/parameters/AssetIdPath'
  #     - $ref: '#/components/parameters/LabelIdPath'
  #   delete:
  #     tags:
  #       - Asset
  #     summary: Remove a label from an Asset
  #     operationId: deleteAssetLabelById
  #     responses:
  #       '200':
  #         description: Labels response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Label'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     security:
  #       - oauth:
  #           - 'stig-manager:collection'
  '/assets/{assetId}/metadata':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return the metadata for Asset
      operationId: getAssetMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Asset
      summary: Merge the provided object to a Assetmetadata
      operationId: patchAssetMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Asset
      summary: Set a Asset metadata to the provided object
      operationId: putAssetMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return the keys of the provided Asset's metadata
      operationId: getAssetMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/assets/{assetId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Asset
      summary: Return the value of the provided Asset metadata key
      operationId: getAssetMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Asset
      summary: Set the value of the provided Asset metadata key to the provided string
      operationId: putAssetMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Remove the provided Asset metadata key
      operationId: deleteAssetMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/stigs':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return an Asset's STIG assignments
      operationId: getStigsByAsset
      responses:
        '200':
          description: STIG array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    # put:
    #   tags:
    #     - Asset
    #   summary: UNIMPLEMENTED Set all the STIG assignments of an Asset
    #   operationId: attachStigsToAsset
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: array
    #           minItems: 1
    #           items:
    #             type: string
    #   responses:
    #     '200':
    #       description: Asset response
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Asset'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete all STIG assignments to an Asset
      operationId: removeStigsFromAsset
      responses:
        '200':
          description: STIG array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/stigs/{benchmarkId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
    put:
      tags:
        - Asset
      summary: Assign a STIG to an Asset
      operationId: attachStigToAsset
      responses:
        '200':
          description: STIG array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete a STIG assignment to an Asset
      operationId: removeStigFromAsset
      responses:
        '200':
          description: STIG array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  /collections:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      # - $ref: '#/components/parameters/CollectionsProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return a list of Collections accessible to the requester
      description: ''
      operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/NameQuery'
        - $ref: '#/components/parameters/NameMatchQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/CollectionsProjectionQuery'
      responses:
        '200':
          description: CollectionsProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionsProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Collection
      summary: Create a Collection
      description: |
        The `settings` property is optional and can be partially provided.
        - If `settings` is not provided, the Collection will be created with the default settings.
        - If a partial `settings` object is provided, the Collection will be created with settings merged from the provided object and the default settings.
        
        The default settings are:
        ```
         {
            fields: {
              detail: {
                enabled: 'always',
                required: 'always'
              },
              comment: {
                enabled: 'findings',
                required: 'findings'
              }
            },
            status: {
              canAccept: true,
              resetCriteria: 'result',
              minAcceptGrant: 3
            },
            history: {
              maxReviews: 15
            }
          }
        ```
      operationId: createCollection
      parameters:
        - $ref: '#/components/parameters/CollectionProjectionQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreateOrReplace'
      responses:
        '201':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        '400':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorDuplicateCollection'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/CollectionProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return a Collection
      description: ''
      operationId: getCollection
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Collection
      summary: Merge provided properties with a Collection
      description: |
        The `settings` property can be partially provided. If a partial `settings` object is provided, the Collection settings will be updated to the provided object merged with the **default** settings. This sets exisiting property values not specified in the partial object to their default values.
        
        The default settings are found in the description of `POST /collection`
      operationId: updateCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Collection
      summary: Set all properties of a Collection
      description: |
        See the description of path `POST /collections` for notes about the `settings` property
      operationId: replaceCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreateOrReplace'
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Collection
      summary: Delete a Collection
      operationId: deleteCollection
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/checklists/{benchmarkId}/{revisionStr}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
      - $ref: '#/components/parameters/RevisionStrPath'
    get:
      tags:
        - Collection
      summary: Return the Checklist for the supplied Collection and STIG
      operationId: getChecklistByCollectionStig
      responses:
        '200':
          description: ChecklistCollectionStig response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChecklistCollectionStig'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/archive/ckl':
    post:
      tags:
        - Collection
      summary: Return a ZIP archive containing CKLs for the supplied Assets and STIGs
      description: |
        The request body is an array that selects the Assets/STIG checklists whose results will be serialized.
        
        Each array member is an object that MUST include the property `assetId` and MIGHT include the property `stigs`.
        
        If the `stigs` property is absent, the API serializes the latest revision of each STIG to which the requesting User
        has been granted access on the Asset.
        
        If the `stigs` property is present, the value MUST be an array. Each array member is EITHER a string whose value is a `benchmarkId` OR an object that identifies a `benchmarkId` and `revisionStr`. When a string is provided, the API will serialize the `latest` revision of the Benchmark.
      operationId: postCklArchiveByCollection
      parameters:
       - $ref: '#/components/parameters/CollectionIdPath'
       - $ref: '#/components/parameters/CklModeQuery'
      requestBody:
        required: true
        description: AssetStigSelection
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/AssetStigSelection'
      responses:
        '200':
          description: ZIP file stream
          content:
            application/zip:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/archive/xccdf':
    post:
      tags:
        - Collection
      summary: Return a ZIP archive containing XCCDF results for the supplied Assets and STIGs
      description: For documentation of the request body, see the description for `POST /collections/{collectionId}/archive/ckl`
      operationId: postXccdfArchiveByCollection
      parameters:
       - $ref: '#/components/parameters/CollectionIdPath'
      requestBody:
        required: true
        description: AssetStigSelection
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/AssetStigSelection'
      responses:
        '200':
          description: ZIP file stream
          content:
            application/zip:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/findings':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/FindingAggregatorQuery'
      - name: acceptedOnly
        in: query
        schema:
          type: boolean
          default: false
      - $ref: '#/components/parameters/BenchmarkIdQuery'
      - $ref: '#/components/parameters/AssetIdQuery'
      - $ref: '#/components/parameters/FindingProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return the Findings for the specified Collection
      operationId: getFindingsByCollection
      responses:
        '200':
          description: CollectionFinding response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindingProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/grants/{userId}/access':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/UserIdPath'
    get:
      tags:
        - Collection
      summary: Return an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel >= 3 to the Collection.
      operationId: getStigAssetsByCollectionUser
      responses:
        '200':
          description: Collection STIGAssetProjected array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StigAssetProjected'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Collection
      summary: Set an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel >= 3 to the Collection.
      operationId: setStigAssetsByCollectionUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StigAsset'
      responses:
        '200':
          description: StigAssetProjected array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StigAssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/poam':
    get:
      tags:
        - Collection
      summary: Return a POAM-like spreadsheet for the specified Collection aggregated by groupId
      operationId: getPoamByCollection
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/PoamAggregatorQuery'
        - name: acceptedOnly
          in: query
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/AssetIdQuery'
        - name: date
          description: Value for columns Scheduled Completion Date, Milestone With Completion Dates, Milestone Changes
          in: query
          schema:
            type: string
        - name: office
          description: Value for column Office/Org
          in: query
          schema:
            type: string
          allowReserved: true
        - name: status
          description: Value for column Status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: CollectionFinding response
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/reviews':
    get:
      tags:
        - Review
      summary: Return a list of Reviews accessible to the requester
      description: ''
      operationId: getReviewsByCollection
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/ReviewRulesQuery'
        - $ref: '#/components/parameters/ReviewResultQuery'
        - $ref: '#/components/parameters/ReviewStatusQuery'
        - $ref: '#/components/parameters/RuleIdQuery'
        - $ref: '#/components/parameters/GroupIdQuery'
        - $ref: '#/components/parameters/CciQuery'
        - $ref: '#/components/parameters/UserIdQuery'
        - $ref: '#/components/parameters/AssetIdQuery'
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/ReviewsProjectionQuery'
      responses:
        '200':
          description: Review response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewRead'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Review
      summary: Insert, update, or merge a complete or partial Review to multiple Assets and Rules
      description: |

        Applies a complete or partial Review to multiple target Asset/Rule pairs. Depending on the Review properties supplied, new Reviews may be created, existing Reviews may be updated, or both operations may occur (similar to an SQL merge).
        
        ## Caution

        **It is possible to send a request which will place the database under considerable load and take many seconds (or minutes) to complete. To determine if a request affects a large set of Reviews, clients are strongly encouraged to send a "preflight" request with the `dryRun` option enabled.**
        
        ## Request Validation
        
        The overall request is validated as follows:
        
        - conformance with the OAS schema for `ReviewBatch`
        - the requesting user has been granted access to the {collectionId}
        
        ## Request body
        
        **source** *(required)*
        
          The Review source is applied to the product of `assets` x `rules` (see below). It MUST contain at least one of the properties `result`, `detail`, `comment`, `resultEngine`, `metadata` or `status`.
        - Multiple properties can be specified.
        - a string value for the `status` property is normalized to `{ label: <string>, text: null }`
        
        
        **assets** *(required)*
        
        The target Assets, which are specified as either:
          - an array of `assetId`
          - an array of `benchmarkId` where target Assets are calculated as the list of distinct Assets assigned at least one of the given STIGs, taking into account the requesting User's collection grant.
        
        **rules** *(required)*
        
        The target Rules, which are specified as either:
          - an array of `ruleId`
          - an array of `benchmarkId` where target Rules are calculated as the list of distinct Rules from all available revisions of the given STIGs.
        
        **action** *(optional)*
        
        Constrains the data action to be taken. If present, the value MUST be one of `insert`, `update`, or `merge`.
        
          - `insert`: only create new Reviews, do not update existing Reviews
          - `update`: only update existing Reviews, do not create new Reviews
          - `merge`: create new Reviews and update existing Reviews
        
        If not present, the default value is:
          
          - `merge` if the source Review includes `result`
          - `update` if the source Review does not include `result`   
        
        New Reviews cannot be created when `source` does not include `result`. In that case, specifying either the `insert` or `merge` value is an error. 
        
        **updateFilters** *(optional)*
        
        Limits the Reviews to be updated, based on an array of filtering objects. If present, updates are applied to Reviews from the product `assets` x `rules` that pass each of the filters (filters are combined with logical AND). If not present, updates are applied to each Review from the product `assets` x `rules`. 
        
        Filtering objects specify a Review `field` , a `condition`, and a `value`. See the schema defintion for further details. 
        
        **dryRun** *(optional)*
        
        If present with a `true` value, performs all processing and vaidation logic without actually changing any data. Useful to verify what a given request would do and to reveal any validation errors. The default value is `false`.
        
        ## Review candidates
        
        Candidate Reviews are created by cross joining the source Review with the product of `assets` x `rules` and applying the resulting rows to existing Reviews (if any) in accordance with the Collection settings.
        
        **For updated Reviews** 
        
        In general, an absent source Review property will retain existing values except as below.
        
        - an absent `status` property will either retain the existing value or update the `status` value to `{ label: "saved", text: "Review change triggered status update" }`, in accordance with the Collection `settings.status.resetCriteria`.
        - an absent `resultEngine` property will either retain the existing value or update the `resultEngine` value to `null`. If applying the source Review changes an existing `result`, the `resultEngine` value will be set to `null`.
        
        **For new Reviews**
        
        - an absent `detail` or `comment` property will set the candidate value to the empty string.
        - an absent `status` property will set the candidate value to `{ label: "saved", text: null }`.
        - an absent `resutEngine` property will set the candidate value to `null`.
        - an absent `metadata` property will set the candidate value to `{}`
        
        ## Candidate validation
        
        Each candidate Review is permitted or rejected as follows:
        
        - If the requesting user's collection grant is `restricted` AND the `ruleId` is not included in any version of any `benchmarkId` for which the requesting user been granted access, then **reject** the Review.
        - If `status.label` has value `saved`, then permit the Review.
        - If the Review would not be submittable according to the Collection settings, then **reject** the Review
        - If the value of `status.label` is `submitted`, then **permit** the Review.
        - If the value of `status.label` is `accepted` or `rejected` AND the Collection settings allow Reviews to be Accepted or Rejected, then **permit** the Review.
        - If `status.label` has value `accepted` or `rejected` AND the Collection settings prohibit Reviews from being Accepted or Rejected, then **reject** the Review.

      operationId: postReviewBatch
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewBatch'
      responses:
        '200':
          description: ReviewBatchResponse response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ReviewBatchResponse'
                  - $ref: '#/components/schemas/ReviewBatchResponseDryRun'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'      
  '/collections/{collectionId}/reviews/{assetId}':
    get:
      tags:
        - Review
      summary: Return a list of Reviews for an Asset
      operationId: getReviewsByAsset
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/AssetIdPath'
        - $ref: '#/components/parameters/ReviewRulesQuery'
        - $ref: '#/components/parameters/ReviewResultQuery'
        - $ref: '#/components/parameters/ReviewStatusQuery'
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/ReviewsProjectionQuery'
      responses:
        '200':
          description: ReviewAssetProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Review
      summary: Post one or more Reviews
      description: |
        The request body is an array that can contain both new and updated Reviews. All Reviews MUST contain the properties `ruleId`, `result`, `detail`, and `comment`. The overall request is validated as follows:

        - conformance with the OAS schema for `ReviewAssetPost`
        - the requesting user has been granted access to the {collectionId}
        
        **For all Reviews**
        
        - a string value for the `status` property will set the stored value to `{ label: <string>, text: null }`
        - an absent `resultEngine` property will set the stored value to `null`

        **For updated Reviews** 
        
        - a `null` value for either `detail` or `comment` will retain the existing value.
        - an absent `status` property will either retain the existing value or update the `status` value to `{ label: "saved", text: "Review change triggered status update" }`, in accordance with the Collection `settings.status.resetCriteria`.
        
        **For new Reviews**
        
        - a `null` value for either `detail` or `comment` will set the stored value to the empty string.
        - an absent `status` property will set the stored value to `{ label: "saved", text: null }`.
        
        **Each new or updated Review is permitted or rejected as follows:**
        
        - If the requesting user's collection grant is `restricted` AND the `ruleId` is not included in any version of any `benchmarkId` for which the requesting user been granted access, then **reject** the Review
        - If the optional property `status` is absent or `status.label` has value `saved`, then permit the Review
        - If the new or updated Review would not be submittable according to the Collection settings, then **reject** the Review
        - If the value of `status.label` is `submitted`, then **permit** the Review.
        - If the value of `status.label` is `accepted` or `rejected` AND the Collection settings allow Reviews to be Accepted or Rejected, then **permit** the Review.
        - If `status.label` has value `accepted` or `rejected` AND the Collection settings prohibit Reviews from being Accepted or Rejected, then **reject** the Review.
      operationId: postReviewsByAsset
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/AssetIdPath'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/ReviewAssetPost'
      responses:
        '200':
          description: ReviewPostResponse response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewPostResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
      - $ref: '#/components/parameters/ReviewProjectionQuery'
    get:
      tags:
        - Review
      summary: Return the Review for an Asset and Rule
      operationId: getReviewByAssetRule
      responses:
        '200':
          description: ReviewAssetRuleRead response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewAssetRuleRead'
        '204':
          description: The requested resource has no content.            
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Review
      summary: Merge the provided properties with an existing Review
      description: |
        The request MUST target an existing Review and the request body MUST contain one or more Review properties. The overall request is validated as follows:
        
        - conformance with the OAS schema for `ReviewAssetRulePatch`
        - the requesting user has been granted access to the {collectionId}
        - a Review already exists for the {assetId} and {ruleId}
        
        A string value for the `status` property will set the stored value to `{ label: <string>, text: null }`.
        
        If the request changes the existing `result`, then the `resultEngine` value will be set to `null` unless the request includes an explicit `resultEngine` value. 

        An absent `status` property may still lead to the `status` value being updated to `{ label: "saved", text: "Review change triggered status update" }`, in accordance with the Collection `settings.status.resetCriteria`.

        Unlike the corresponding PUT endpoint, the `detail` and `comment` properties do not support `null` as a value.

        The request is permitted or rejected as follows:
        
        - If the requesting user's collection grant is `restricted` AND the `assetId` is not included in any user grant, then **reject** the Review
        - If the requesting user's collection grant is `restricted` AND the `ruleId` is not included in any version of any `benchmarkId` for which the user been granted access, then **reject** the Review
        - If the new or updated Review would not be submittable according to the Collection settings, then **reject** the Review
        - If the value of `status.label` is `submitted`, then **permit** the Review.
        - If the value of `status.label` is `accepted` or `rejected` AND the Collection settings allow Reviews to be Accepted or Rejected, then **permit** the Review.
        - If `status.label` has value `accepted` or `rejected` AND the Collection settings prohibit Reviews from being Accepted or Rejected, then **reject** the Review.
      operationId: patchReviewByAssetRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewAssetRulePatch'
      responses:
        '200':
          description: ReviewProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewAssetRuleRead'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Review
      summary: Set all properties of a Review
      description: |
        The request can target either a new or an existing Review. The request body MUST contain the Review properties `result`, `detail`, and `comment`. The overall request is validated as follows:
        
        - conformance with the OAS schema for `ReviewAssetRulePut`
        - the requesting user has been granted access to the {collectionId}

        **For all Reviews**
        
        - a string value for the `status` property will set the stored value to `{ label: <string>, text: null }`
        - an absent `resultEngine` property will set the stored value to `resultEngine: null`
        
        **For updated Reviews** 
        
        - a `null` value for either `detail` or `comment` will retain the existing value.
        - an absent `status` property will either retain or update the `status` value to `{ label: "saved", text: "Review change triggered status update" }`, in accordance with the Collection `settings.status.resetCriteria`.

        **For new Reviews**
        
        - a `null` value for either `detail` or `comment` will set the stored value to the empty string.
        - an absent `status` property will set the stored value to `{ label: "saved", text: null }`.
        
        The request is permitted or rejected as follows:
        
        - If the requesting user's collection grant is `restricted` AND the `assetId` is not included in any user grant, then **reject** the Review
        - If the requesting user's collection grant is `restricted` AND the `ruleId` is not included in any version of any `benchmarkId` for which the user been granted access, then **reject** the Review
        - If the new or updated Review would not be submittable according to the Collection settings, then **reject** the Review
        - If the value of `status.label` is `submitted`, then **permit** the Review.
        - If the value of `status.label` is `accepted` or `rejected` AND the Collection settings allow Reviews to be Accepted or Rejected, then **permit** the Review.
        - If `status.label` has value `accepted` or `rejected` AND the Collection settings prohibit Reviews from being Accepted or Rejected, then **reject** the Review.
      operationId: putReviewByAssetRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewAssetRulePut'
      responses:
        '200':
          description: ReviewProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewAssetRuleRead'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Review
      summary: Delete a Review
      operationId: deleteReviewByAssetRule
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      responses:
        '200':
          description: ReviewProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewAssetRuleRead'
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
    get:
      tags:
        - Review
      summary: Return the metadata for Review
      operationId: getReviewMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Review
      summary: Merge the provided object to a Review metadata
      operationId: patchReviewMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Review
      summary: Set a Review metadata to the provided object
      operationId: putReviewMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
    get:
      tags:
        - Review
      summary: Return the keys of the provided Review's metadata
      operationId: getReviewMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Review
      summary: Return the value of the provided Review metadata key
      operationId: getReviewMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Review
      summary: Set the value of the provided Review metadata key to the provided string
      operationId: putReviewMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Review
      summary: Remove the provided Review metadata key
      operationId: deleteReviewMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/labels':
    get:
      tags:
        - Collection
      summary: Return labels of the specified Collection
      operationId: getCollectionLabels
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
      responses:
        200:
          description: Labels response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Collection
      summary: Create a label in the specified Collection
      operationId: createCollectionLabel
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelCreate'
      responses:
        201:
          description: Label response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/labels/{labelId}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/LabelIdPath'
    get:
      tags:
        - Collection
      summary: Return the specified Label of the specified Collection
      operationId: getCollectionLabelById
      responses:
        200:
          description: Labels response
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Label'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Collection
      summary: Update an existing Label
      operationId: patchCollectionLabelById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelUpdate'
      responses:
        '200':
          description: Label response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Collection
      summary: Delete a Label
      operationId: deleteCollectionLabelById
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/labels/{labelId}/assets':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/LabelIdPath'
    get:
      tags:
        - Collection
        - Asset
      summary: Return the Assets mapped to the Label
      operationId: getAssetsByCollectionLabelId
      responses:
        '200':
          description: Asset response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBasic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Collection
        - Asset
      summary: Replace the Label's Asset mappings
      operationId: putAssetsByCollectionLabelId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/String255'
      responses:
        '200':
          description: The Label's Asset mappings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBasic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'          
  '/collections/{collectionId}/metadata':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/ElevateQuery'
    get:
      tags:
        - Collection
      summary: Return the metadata for Collection
      operationId: getCollectionMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Collection
      summary: Merge the provided object to a Collection metadata
      operationId: patchCollectionMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Collection
      summary: Set a Collection metadata to the provided object
      operationId: putCollectionMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/ElevateQuery'
    get:
      tags:
        - Collection
      summary: Return the keys of the provided Collection metadata
      operationId: getCollectionMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Collection
      summary: Return the value of the provided Collection metadata key
      operationId: getCollectionMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Collection
      summary: Set the value of the provided Collection metadata key to the provided string
      operationId: putCollectionMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Collection
      summary: Remove the provided Collection metadata key
      operationId: deleteCollectionMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'

  '/collections/{collectionId}/metrics/detail':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return unaggregated Asset/STIG metrics for the specified Collection
      operationId: getMetricsDetailByCollection
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsDetailUnagg'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/detail/asset':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by Asset
      operationId: getMetricsDetailByCollectionAggAsset
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsDetailAggAsset'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/detail/collection':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return aggregated metrics for the specified Collection
      operationId: getMetricsDetailByCollectionAgg
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDetailAggCollection'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/detail/label':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by Label
      operationId: getMetricsDetailByCollectionAggLabel
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsDetailAggLabel'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/detail/stig':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by STIG
      operationId: getMetricsDetailByCollectionAggStig
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsDetailAggStig'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'

  '/collections/{collectionId}/metrics/summary':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return unaggregated Asset/STIG metrics for the specified Collection
      operationId: getMetricsSummaryByCollection
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsSummaryUnagg'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/summary/asset':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by Asset
      operationId: getMetricsSummaryByCollectionAggAsset
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsSummaryAggAsset'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/summary/collection':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return aggregated metrics for the specified Collection
      operationId: getMetricsSummaryByCollectionAgg
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsSummaryAggCollection'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/summary/label':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by Label
      operationId: getMetricsSummaryByCollectionAggLabel
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsSummaryAggLabel'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metrics/summary/stig':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/LabelMatchQuery'
      - $ref: '#/components/parameters/MetricsFormatQuery'
    get:
      tags:
        - Metrics
      summary: Return metrics for the specified Collection aggregated by STIG
      operationId: getMetricsSummaryByCollectionAggStig
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsSummaryAggStig'
            text/csv:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/review-history':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
    get:
      tags:
        - Collection
      summary: Return history records for the specified Collection that meet the specified criteria
      operationId: getReviewHistoryByCollection
      parameters: 
        - $ref: '#/components/parameters/StartDateQuery' # Lower bound (earliest date) of returned history entry timestamps
        - $ref: '#/components/parameters/EndDateQuery'    # Upper bound (latest date) of returned history entry timestamps 
        - $ref: '#/components/parameters/AssetIdQuery'  # return review history entries for just the specified assetId, if provided.
        - $ref: '#/components/parameters/RuleIdQuery'  # return review history entries for just the specified RuleId, if provided.        
        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history entries with the specified status
      responses:
        '200':
          description: ReviewHistory response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewHistoryAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    delete:
      tags:
        - Collection
      summary: Remove history records that meet specified criteria
      operationId: deleteReviewHistoryByCollection
      parameters: 
        - $ref: '#/components/parameters/RetentionDateQuery' # Review History Entries older than this date will be deleted.
        - $ref: '#/components/parameters/AssetIdQuery'  # Apply operation to just the specified assetId, if provided.
      responses:
        '200':
          description: Number of history records deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewHistoryDeleted'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'            
  '/collections/{collectionId}/review-history/stats':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
    get:
      tags:
        - Collection
      summary: Return history statistics for the specified Collection
      operationId: getReviewHistoryStatsByCollection
      parameters:
        - $ref: '#/components/parameters/StartDateQuery' # Lower bound (earliest date) of returned history entry count
        - $ref: '#/components/parameters/EndDateQuery'    # Upper bound (latest date) of returned history entry count
        - $ref: '#/components/parameters/AssetIdQuery'  # return review history stats for just the specified assetId, if provided.
        - $ref: '#/components/parameters/RuleIdQuery'  # return review history stats for just the specified RuleId, if provided.        
        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history stats with the specified status        
        - $ref: '#/components/parameters/ReviewHistoryStatsProjectionQuery' 
      responses:
        '200':
          description: ReviewHistoryStats response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewHistoryStats'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'            
  '/collections/{collectionId}/status':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'
      - $ref: '#/components/parameters/AssetIdArrayQuery'
    get:
      tags:
        - Collection
      summary: DEPRECATED - targeted for removal soon, please use the Metrics endpoints
      operationId: getStatusByCollection
      responses:
        '200':
          description: Metrics response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionStatus'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/stigs':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/LabelIdQuery'
    get:
      tags:
        - Collection
      summary: Return the STIGs mapped in the specified Collection
      operationId: getStigsByCollection
      responses:
        '200':
          description: Collection STIGs array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionStig'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/stigs/{benchmarkId}/assets':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
      - $ref: '#/components/parameters/StigAssetsProjectionQuery'
    get:
      tags:
        - Asset
        - Collection
      summary: Get the Assets in a Collection attached to a STIG
      description: ''
      operationId: getAssetsByStig
      parameters:
        - $ref: '#/components/parameters/LabelIdQuery'
      responses:
        '200':
          description: AssetBasicProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBasicProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Asset
        - Collection
      summary: Set the Assets mapped to a STIG
      description: ''
      operationId: attachAssetsToStig
      requestBody:
        required: true
        description: A list of assetIds from the specified Collection
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: AssetBasicProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBasicProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/unreviewed/assets':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/BenchmarkIdQuery'
      - $ref: '#/components/parameters/RuleSeverityQuery'
      - $ref: '#/components/parameters/UnreviewedAssetsProjectionQuery'
    get:
      tags:
        - Collection
      summary: EXPERIMENTAL - Return the Assets in the specified Collection with unreviewed Rules 
      operationId: getUnreviewedAssetsByCollection
      responses:
        '200':
          description: UnreviewedAsset response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnreviewedAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/unreviewed/rules':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/RuleIdQuery'
      - $ref: '#/components/parameters/LabelIdQuery'
      - $ref: '#/components/parameters/LabelNameQuery'
      - $ref: '#/components/parameters/BenchmarkIdQuery'
      - $ref: '#/components/parameters/RuleSeverityQuery'
      - $ref: '#/components/parameters/UnreviewedRulesProjectionQuery'
    get:
      tags:
        - Collection
      summary: EXPERIMENTAL - Return the Rules in the specified Collection with unreviewed Assets 
      operationId: getUnreviewedRulesByCollection
      responses:
        '200':
          description: UnreviewedRules response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnreviewedRule'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  /op/appdata:
    get:
      tags:
        - Operation
      summary: Export application data
      operationId: getAppData
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      responses:
        '200':
          description: Exported data
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - stig-manager:op:read
    post:
      tags:
        - Operation
      summary: Import and overwrite application data
      operationId: replaceAppData
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                collections:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                importFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: Import successful
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - stig-manager:op
  /op/configuration:
    get:
      tags:
        - Operation
      summary: Return API version and configuration information
      operationId: getConfiguration
      security: []
      responses:
        '200':
          description: Configuration response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConfiguration'
  /op/definition:
    get:
      tags:
        - Operation
      summary: Return the API definition
      operationId: getDefinition
      security: []
      parameters:
        - $ref: '#/components/parameters/JsonPathQuery'
      responses:
        '200':
          description: Definition response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDefinition'
  /op/details:
    get:
      tags:
        - Operation
      summary: Return deployment details
      operationId: getDetails
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      responses:
        '200':
           description: Detail response
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
      security:
        - oauth:
            - stig-manager:op:read
  /stigs:
    get:
      tags:
        - STIG
      summary: Return a list of available STIGs
      operationId: getSTIGs
      parameters:
        - name: title
          in: query
          description: A string found anywhere in a STIG title
          schema:
            type: string
      responses:
        '200':
          description: STIG response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    post:
      tags:
        - STIG
      summary: Import a STIG Benchmark
      operationId: importBenchmark
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                importFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: The added STIG
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
  '/stigs/ccis/{cci}':
    get:
      tags:
        - STIG
      summary: Return data for the specified CCI
      operationId: getCci
      parameters:
        - $ref: '#/components/parameters/CciProjectionQuery'
        - name: cci
          in: path
          description: A path parameter that identifies a CCI
          required: true
          schema:
            pattern: ^[0-9]{6}$
            type: string
      responses:
        '200':
          description: CCI response
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Cci'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/rules/{ruleId}':
    get:
      tags:
        - STIG
      summary: Return the defintion and associated checks and fixes for the specified Rule
      operationId: getRuleByRuleId
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: ruleId
          in: path
          description: A path parameter that identifies a Rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/scap-maps':
    get:
      tags:
        - STIG
      summary: Return a list of SCAP benchmarkIds mapped to Manual benchmarkIds
      operationId: getScapMap
      responses:
        '200':
          description: SCAP Map response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SCAPMap'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}':
    get:
      tags:
        - STIG
      summary: Return properties of the specified STIG
      operationId: getStigById
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: STIG response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    delete:
      tags:
        - STIG
      summary: Deletes a STIG (*** and all revisions ***)
      operationId: deleteStigById
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The deleted STIG
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
      x-rbac:
        - admin
  '/stigs/{benchmarkId}/revisions':
    get:
      tags:
        - STIG
      summary: Return a list of revisions for the specified STIG
      operationId: getRevisionsByBenchmarkId
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}':
    get:
      tags:
        - STIG
      summary: Return metadata for the specified revision of a STIG
      operationId: getRevisionByString
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    delete:
      tags:
        - STIG
      summary: Deletes the specified revision of a STIG
      operationId: deleteRevisionByString
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?)$
            type: string
      responses:
        '200':
          description: The deleted Revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
      x-rbac:
        - admin
  '/stigs/{benchmarkId}/revisions/{revisionStr}/ccis':
    get:
      tags:
        - STIG
      summary: Return a list of CCIs from a STIG revision
      operationId: getCcisByRevision
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: CCI response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CciListItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups':
    get:
      tags:
        - STIG
      summary: Return the list of groups for the specified revision of a STIG.
      operationId: getGroupsByRevision
      parameters:
        - $ref: '#/components/parameters/GroupProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: GroupProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups/{groupId}':
    get:
      tags:
        - STIG
      summary: Return the rules, checks and fixes for a Group from a specified revision of a STIG.
      description: None
      operationId: getGroupByRevision
      parameters:
        - $ref: '#/components/parameters/GroupProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
        - name: groupId
          in: path
          description: A path parameter that identifies a Group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules':
    get:
      tags:
        - STIG
      summary: Return rule data for the specified revision of a STIG.
      operationId: getRulesByRevision
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: Rule response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules/{ruleId}':
    get:
      tags:
        - STIG
      summary: Return rule data for the specified Rule in a revision of a STIG.
      operationId: getRuleByRevision
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
        - name: ruleId
          in: path
          description: A path parameter that identifies a Rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RuleProjected response
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  /user:
    get:
      tags:
        - User
      summary: Return the requester's user information
      operationId: getUserObject
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
  /users:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/UserProjectionQuery'
    get:
      tags:
        - User
      summary: Return a list of Users accessible to the requester
      operationId: getUsers
      parameters:
      - $ref: '#/components/parameters/UsernameQuery'
      - $ref: '#/components/parameters/UsernameMatchQuery'
      responses:
        '200':
          description: UserProjected array response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
    post:
      tags:
        - User
      summary: Create a User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrReplace'
      responses:
        '201':
          description: UserProjected response
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/UserProjectionQuery'
      - $ref: '#/components/parameters/UserIdPath'
    get:
      tags:
        - User
      summary: Return a User
      operationId: getUserByUserId
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
    patch:
      tags:
        - User
      summary: Merge provided properties with a User
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
    put:
      tags:
        - User
      summary: Set all properties of a User
      operationId: replaceUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrReplace'
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
    delete:
      tags:
        - User
      summary: Delete a User
      operationId: deleteUser
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
components:
  schemas:
    AccessLevel:
      type: integer
      minimum: 1
      maximum: 3
    ApiConfiguration:
      type: object
      additionalProperties: false
      properties:
        classification:
          type: string
          enum:
            - NONE
            - U
            - FOUO
            - CUI
            - C
            - S
            - TS
            - SCI
        commit:
          type: object
          properties:
            branch:
              type: string
            sha:
              type: string
            tag:
              type: string
            describe:
              type: string
        version:
          type: string
    ApiDefinition:
      oneOf:
        - type: object
        - type: array
    Asset:
      type: object
      required:
        - assetId
        - name
        - fqdn
        - collection
        - description
        - ip
        - mac
        - noncomputing
        # - metadata
      additionalProperties: false
      properties:
        assetId:
          readOnly: true
          type: string
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collection:
          $ref: '#/components/schemas/CollectionBasic'
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        labelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'  
    AssetBasic:
      type: object
      required:
        - assetId
        - name
      additionalProperties: false
      properties:
        assetId:
          type: string
        name:
          type: string
    AssetLabels:
      type: object
      required:
        - assetId
        - name
        - labels
      additionalProperties: false
      properties:
        assetId:
          $ref: '#/components/schemas/String255'
        name:
          $ref: '#/components/schemas/String255'

    AssetBasicProjected:
      type: object
      required:
        - assetId
        - name
      additionalProperties: false
      properties:
        assetId:
          type: string
        name:
          type: string
        collectionId:
          type: string  #This is redundant except when in response to a request that changed an Asset's collection. 
        assetLabelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'          
        restrictedUserAccess:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
    AssetCreateOrReplace:
      type: object
      required:
        - name
        - collectionId
        - description
        - ip
        - noncomputing
        - metadata
        - stigs
      additionalProperties: false
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collectionId:
          description: The collectionId mapped to this Asset
          type: string
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        labelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        stigs:
          description: The benchmarkIds mapped to this Asset
          type: array
          items:
            type: string
    AssetForCollection:
      type: object
      additionalProperties: false
      properties:
        assetId:
          type: string
        name:
          type: string
    AssetId:
      $ref: '#/components/schemas/StringIntId'
    AssetProjected:
      type: object
      required:
        - assetId
        - name
        - fqdn
        - collection
        - description
        - ip
        - mac
        - noncomputing
        - labelIds
      additionalProperties: false
      properties:
        assetId:
          readOnly: true
          type: string
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collection:
          $ref: '#/components/schemas/CollectionBasic'
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        labelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'    
        statusStats:
          type: object
          additionalProperties: false
          properties:
            stigCount:
              type: integer
            ruleCount:
              type: integer
              nullable: true
            acceptedCount:
              type: integer
              nullable: true
            rejectedCount:
              type: integer
              nullable: true
            submittedCount:
              type: integer
              nullable: true
            savedCount:
              type: integer
              nullable: true
            minTs:
              type: string
              format: date-time
              nullable: true
            maxTs:
              type: string
              format: date-time
              nullable: true
        stigs:
          type: array
          description: The benchmarkIds mapped to this Asset
          items:
            $ref: '#/components/schemas/STIG'
        stigGrants:
          type: array
          items:
            $ref: '#/components/schemas/StigGrantProjected'          
    AssetStigSelection:
      type: object
      additionalProperties: false
      required:
        - assetId
      properties:
        assetId:
          $ref: '#/components/schemas/StringUuid'
        stigs:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            oneOf:
              - $ref: '#/components/schemas/RevisionBasic'
              - $ref: '#/components/schemas/String255'
    AssetUpdate:
      additionalProperties: false
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collectionId:
          description: The collectionId mapped to this Asset
          type: string
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        labelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        stigs:
          description: The benchmarkIds mapped to this Asset
          type: array
          items:
            type: string
    BenchmarkId:
        type: string           
    Cci:
      type: object
      additionalProperties: false
      properties:
        cci:
          type: string
        status:
          type: string
        publishdate:
          type: string
          format: date-time
        contributor:
          type: string
        type:
          type: string
        definition:
          type: string
        emassAp:
          $ref: '#/components/schemas/EmassAp'
        references:
          type: array
          items:
            $ref: '#/components/schemas/CciReferenceItem'
        stigs:
          type: array
          items:
            $ref: '#/components/schemas/RevisionBasic'
    CciBasic:
      type: object
      additionalProperties: false
      properties:
        cci:
          type: string
        apAcronym:
          type: string
        definition:
          type: string
    CciListItem:
      type: object
      additionalProperties: false
      properties:
        cci:
          type: string
        type:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/CciReferenceItem'
    CciReferenceItem:
      type: object
      additionalProperties: false
      properties:
        creator:
          type: string
        title:
          type: string
        version:
          type: string
        location:
          type: string
        indexDisa:
          type: string
        textRefNist:
          type: string
        parentControl:
          type: string
    CciReferenceRev4:
      type: object
      additionalProperties: false
      properties:
        indexDisa:
          type: string
        textRefNist:
          type: string
        parentControl:
          type: string
    Check:
      type: object
      additionalProperties: false
      properties:
        checkId:
          type: string
        content:
          type: string
    ChecklistAssetStig:
      type: object
      additionalProperties: false  
      properties:
        assetId:
          type: string
        ruleId:
          type: string
        ruleTitle:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        version:
          type: string
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        result:
          $ref: '#/components/schemas/ChecklistResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        autoResult:
          type: boolean
        status:
          $ref: '#/components/schemas/ChecklistStatus'
    ChecklistCkl:
      type: object
      description: The CKL format generated and read by DISA STIG VIewer
      xml:
        name: CHECKLIST
      additionalProperties: false
      properties:
        ASSET:
          type: object
          additionalProperties: false
          properties:
            ASSET_TYPE:
              type: string
            HOST_NAME:
              type: string
            HOST_IP:
              type: string
            HOST_MAC:
              type: string
            HOST_GUID:
              type: string
            HOST_FQDN:
              type: string
            TECH_AREA:
              type: string
            TARGET_KEY:
              type: string
        STIGS:
          type: object
          additionalProperties: false
          properties:
            iSTIG:
              type: array
              items:
                type: object
                properties:
                  STIG_INFO:
                    type: array
                    items:
                      type: object
                      properties:
                        SI_DATA:
                          type: object
                          properties:
                            SID_NAME:
                              type: string
                            SID_DATA:
                              type: string
                  VULN:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        STIG_DATA:
                          type: array
                          items:
                            type: object
                            properties:
                              VULN_ATTRIBUTE:
                                type: string
                              ATTRIBUTE_DATA:
                                type: string
                        STATUS:
                          type: string
                          enum:
                            - Open
                            - NotAFinding
                            - Not_Applicable
                            - Not_Reviewed
                        FINDING_DETAILS:
                          type: string
                        COMMENTS:
                          type: string
                        SEVERITY_OVERRIDE:
                          type: string
                        SEVERITY_JUSTIFICATION:
                          type: string
    ChecklistCollectionStig:
      type: object
      additionalProperties: false
      properties:
        ruleId:
          type: string
        ruleTitle:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        version:
          type: string
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        counts:
          type: object
          additionalProperties: false
          properties:
            results:
              type: object
              properties:
                pass:
                  type: integer
                fail:
                  type: integer
                notapplicable:
                  type: integer
                unassessed:
                  type: integer
            statuses:
              type: object
              additionalProperties: false
              properties:
                saved:
                  type: integer
                submitted:
                  type: integer
                accepted:
                  type: integer
                rejected:
                  type: integer
    ChecklistResult:
      description: The Review result
      type: string
      nullable: true
      enum:
        - fail
        - pass
        - notapplicable
        - notchecked
        - unknown
        - error
        - notselected
        - informational
        - fixed
        - null
    ChecklistResultUnreviewed:
      description: The Review result
      type: string
      nullable: true
      enum:
        - notchecked
        - unknown
        - error
        - notselected
        - informational
        - fixed
        - null
    ChecklistStatus:
      type: string
      nullable: true
      enum:
        - saved
        - submitted
        - accepted
        - rejected
        - null
    ChecklistXccdf:
      type: object
      description: |
        An XCCDF document with TestResult. Note: OAS 3.x cannot represent the actual XML schema
      xml:
        name: Benchmark
        namespace: 'http://checklists.nist.gov/xccdf/1.2'
      additionalProperties: true
    ClientErrorDuplicateAsset:
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          enum:
            - 400
        message:
          type: string
          enum:
            - 'Duplicate name'
        data:
          $ref: '#/components/schemas/Asset'
    ClientErrorDuplicateCollection:
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          enum:
            - 400
        message:
          type: string
          enum:
            - 'Duplicate name'
        data:
          $ref: '#/components/schemas/Collection'
    Collection:
      type: object
      required:
        - collectionId
        - name
        - description
        - settings
        - metadata
        - created   
      additionalProperties: false
      properties:
        collectionId:
          readOnly: true
          type: string
          nullable: false
        name:
          type: string
        description:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        metadata:
          $ref: '#/components/schemas/Metadata'
        created:
          type: string
          format: date-time    
    CollectionBasic:
      type: object
      additionalProperties: false
      properties:
        collectionId:
          type: string
        name:
          type: string
    CollectionCreateOrReplace:
      type: object
      required:
        - name
        - metadata
        - grants
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        metadata:
          $ref: '#/components/schemas/Metadata'
        grants:
          type: array
          items:
            $ref: '#/components/schemas/UserGrant'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelCreate'
    CollectionFieldEnabledAlways:
      type: object
      additionalProperties: false
      required:
        - enabled
        - required
      properties:
        enabled:
          type: string
          enum:
            - always
        required:
          type: string
          enum:
            - always
            - findings
            - optional
    CollectionFieldEnabledFindings:
      type: object
      additionalProperties: false
      required:
        - enabled
        - required
      properties:
        enabled:
          type: string
          enum:
            - findings
        required:
          type: string
          enum:
            - findings
            - optional
    CollectionFieldSetting:
      type: object
      oneOf:
        - $ref: '#/components/schemas/CollectionFieldEnabledAlways'
        - $ref: '#/components/schemas/CollectionFieldEnabledFindings'
      example:   # Sample object
        enabled: 'always'
        required: 'findings'
    CollectionFieldSettings:
      type: object
      additionalProperties: false
      required:
        - detail
        - comment
      properties:
        detail:
          $ref: '#/components/schemas/CollectionFieldSetting'
        comment:
          $ref: '#/components/schemas/CollectionFieldSetting'
    CollectionGrant:
      type: object
      required:
        - collectionId
        - accessLevel
      additionalProperties: false
      properties:
        collectionId:
          type: string
        accessLevel:
          type: integer
    CollectionGrantProjected:
      type: object
      additionalProperties: false
      properties:
        collection:
          type: object
          properties:
            collectionId:
              type: string
            name:
              type: string
        accessLevel:
          type: integer
    CollectionHistorySettings:
      type: object
      additionalProperties: false
      required:
        - maxReviews
      properties:
        maxReviews:
          type: integer
          minimum: -1
          maximum: 50
          example: 5
    CollectionProjected:
      type: object
      required:
        - collectionId
        - name
        - description
        - settings
        - metadata
      additionalProperties: false
      properties:
        collectionId:
          readOnly: true
          type: string
          nullable: false
        name:
          type: string
        description:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        metadata:
          $ref: '#/components/schemas/Metadata'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetForCollection'
        stigs:
          type: array
          items:
            $ref: '#/components/schemas/STIG'
        grants:
          type: array
          items:
            $ref: '#/components/schemas/UserGrantProjected'     
        owners:
          type: array
          items:
            $ref: '#/components/schemas/User'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        statistics:
          $ref: '#/components/schemas/CollectionStatistics'
    CollectionsProjected:
      type: object
      required:
        - collectionId
        - name
        - description
        - settings
        - metadata
      additionalProperties: false
      properties:
        collectionId:
          readOnly: true
          type: string
          nullable: false
        name:
          type: string
        description:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        metadata:
          $ref: '#/components/schemas/Metadata'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/User'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        statistics:
          $ref: '#/components/schemas/CollectionStatistics'
    CollectionSettings:
      type: object
      additionalProperties: false
      properties:
        fields:
          $ref: '#/components/schemas/CollectionFieldSettings'
        status:
          $ref: '#/components/schemas/CollectionStatusSettings'
        history:
          $ref: '#/components/schemas/CollectionHistorySettings'
    CollectionStatistics:
      type: object
      required:
        - created
        - assetCount
        - grantCount
        - checklistCount
      additionalProperties: false
      properties:
        created:
          $ref: '#/components/schemas/StringDateTime'
        assetCount:
          type: integer     
        grantCount:
          type: integer     
        checklistCount:
          type: integer                  
    CollectionStatus:
      type: object
      additionalProperties: false
      properties:
        assetId:
          type: string
        assetName:
          type: string
        assetLabelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'          
        benchmarkId:
          type: string
        minTs:
          type: string
          format: date-time
          nullable: true
        maxTs:
          type: string
          format: date-time
          nullable: true
        rules:  
          type: object
          properties:
            total:
              type: integer
        findings:
          type: object
          properties:
            low:
              type: integer
            medium:
              type: integer
            high:
              type: integer
        result:
          type: object
          properties:
            notchecked:
              $ref: '#/components/schemas/CollectionStatusCount'
            notapplicable:
              $ref: '#/components/schemas/CollectionStatusCount'                 
            pass:
              $ref: '#/components/schemas/CollectionStatusCount'
            fail:
              $ref: '#/components/schemas/CollectionStatusCount'
            unknown:
              $ref: '#/components/schemas/CollectionStatusCount'
            error:
              $ref: '#/components/schemas/CollectionStatusCount'              
            notselected:
              $ref: '#/components/schemas/CollectionStatusCount'
            informational:
              $ref: '#/components/schemas/CollectionStatusCount'   
            fixed:
              $ref: '#/components/schemas/CollectionStatusCount'                 
        status:
          type: object
          properties:
            saved:
              $ref: '#/components/schemas/CollectionStatusCount'
            submitted:
              $ref: '#/components/schemas/CollectionStatusCount'
            rejected:
              $ref: '#/components/schemas/CollectionStatusCount'
            accepted:
              $ref: '#/components/schemas/CollectionStatusCount'
    CollectionStatusCount:
      type: object
      additionalProperties: false
      required:
        - total
        - resultEngine
      properties:
        total:
          type: integer
        resultEngine:
          type: integer
    CollectionStatusSettings:
      type: object
      additionalProperties: false
      required:
        - canAccept
        - minAcceptGrant
        - resetCriteria
      properties:
        canAccept:
          type: boolean
        minAcceptGrant:
          type: integer
          minimum: 2
          maximum: 4
          example: 2
        resetCriteria:
          type: string
          enum:
            - any
            - result
          example: 'result'
    CollectionStig:
      type: object
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        title:
          type: string
        lastRevisionStr:
          type: string
        lastRevisionDate:
          type: string
          format: date
          nullable: true
        ruleCount:
          type: integer
        assetCount:
          type: integer
        acceptedCount:
          type: integer
        rejectedCount:
          type: integer
        submittedCount:
          type: integer
        savedCount:
          type: integer
        minTs:
          type: string
          format: date-time
          nullable: true
        maxTs:
          type: string
          format: date-time
          nullable: true
    CollectionUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        metadata:
          $ref: '#/components/schemas/Metadata'
        grants:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              accessLevel:
                type: integer
    CommentaryString:
      type: string
      maxLength: 32767
    CommentaryStringNullable:
      type: string
      nullable: true
      maxLength: 32767                
    Date:
      type: string
      format: date
      # pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$'        
    Detail:
      type: object
      properties:
        dbInfo:
          $ref: '#/components/schemas/DetailMySqlInfo'
        assetStig:
          type: array
          items:
            $ref: '#/components/schemas/DetailAssetStig'
    DetailAssetStig:
      type: object
      additionalProperties: false
      properties:
        collectionId:
          $ref: '#/components/schemas/StringUuid'
        assetCnt:
          type: integer
        range01to05:
          type: integer
        range06to10:
          type: integer
        range11to15:
          type: integer
        range16plus:
          type: integer
    DetailMySqlInfo:
      type: object
      properties:
        tables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DetailMySqlTableInfo'
    DetailMySqlTableInfo:
      type: object
      additionalProperties: false
      properties:
        tableName:
          type: string
        tableRows:
          type: integer
          nullable: true
        tableCollation:
          type: string
          nullable: true
        avgRowLength:
          type: integer
          nullable: true
        dataLength:
          type: integer
          nullable: true
        maxDataLength:
          type: integer
          nullable: true
        indexLength:
          type: integer
          nullable: true
        autoIncrement:
          type: integer
          nullable: true
        createTime:
          $ref: '#/components/schemas/StringDateTimeNullable'
        updateTime:
          $ref: '#/components/schemas/StringDateTimeNullable'
    EmassAp:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        apAcronym:
          type: string
        implementation:
          type: string
        assessmentProcedure:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string          
    FindingProjected:
      type: object
      additionalProperties: false
      properties:
        assetCount:
          type: integer
        ruleId:
          type: string      
        groupId:
          type: string
        cci:
          type: string
        title:
          type: string
        definition:
          type: string              
        apAcronym:
          type: string          
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetBasic'
        ccis:
          type: array
          items:
            $ref: '#/components/schemas/CciBasic'            
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupProjected'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RuleAbbr'      
        stigs:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkId'                              
    Fix:
      type: object
      additionalProperties: false
      properties:
        fixId:
          type: string
        text:
          type: string
    GroupProjected:
      type: object
      additionalProperties: false
      properties:
        groupId:
          type: string
        title:
          type: string
        severity:
          type: string          
        rules:
            type: array
            items:
              $ref: '#/components/schemas/RuleAbbr'
    Label:
      type: object
      additionalProperties: false
      required:
        - name
        - description
        - color
        - labelId
        - uses
      properties:
        labelId:
          $ref: '#/components/schemas/LabelId'
        name:
          $ref: '#/components/schemas/LabelName'
        description:
          $ref: '#/components/schemas/String255Nullable'
        color:
          $ref: '#/components/schemas/StringHexColor'
        uses:
          type: integer
    LabelBasic:
      type: object
      additionalProperties: false
      required:
        - name
        - labelId
      properties:
        labelId:
          $ref: '#/components/schemas/LabelId'
        name:
          $ref: '#/components/schemas/LabelName'
    LabelCreate:
      type: object
      additionalProperties: false
      required:
        - name
        - description
        - color
      properties:
        name:
          $ref: '#/components/schemas/LabelName'
        description:
          $ref: '#/components/schemas/String255Nullable'
        color:
          $ref: '#/components/schemas/StringHexColor'
    LabelId:
      $ref: '#/components/schemas/StringUuid'
    LabelIdNullable:
      $ref: '#/components/schemas/StringUuidNullable'
    LabelName:
      type: string
      minLength: 1
      maxLength: 16
    LabelUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/LabelName'
        description:
          $ref: '#/components/schemas/String255Nullable'
        color:
          $ref: '#/components/schemas/StringHexColor'
    Metadata:
      type: object
      additionalProperties:
        type: string
    MetadataKey:
      type: string
    MetadataValue:
      type: string   
    MetricsUnagg:
      type: object
      required:
        - assetId
        - name
        - labels
        - benchmarkId
      properties:
        assetId:
          type: string
        name:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelBasic'
        benchmarkId:
          $ref: '#/components/schemas/BenchmarkId'
    MetricsDetailUnagg:
      allOf:
        - $ref: '#/components/schemas/MetricsUnagg'
        - $ref: '#/components/schemas/MetricsDetail'
    MetricsSummaryUnagg:
      allOf:
        - $ref: '#/components/schemas/MetricsUnagg'
        - $ref: '#/components/schemas/MetricsSummary'       
    MetricsAggAsset:
      type: object
      required:
        - assetId
        - name
        - labels
        - benchmarkIds
      properties:
        assetId:
          type: string
        name:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelBasic'
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        benchmarkIds:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkId'
    MetricsDetailAggAsset:
      allOf:
        - $ref: '#/components/schemas/MetricsAggAsset'
        - $ref: '#/components/schemas/MetricsDetail'
    MetricsSummaryAggAsset:
      allOf:
        - $ref: '#/components/schemas/MetricsAggAsset'
        - $ref: '#/components/schemas/MetricsSummary'
    MetricsAggCollection:
      type: object
      required:
        - collectionId
        - name
        - checklists
        - assets
        - stigs
      properties:
        collectionId:
          type: string
        name:
          type: string
        checklists:
          type: integer
        assets:
          type: integer
        stigs:
          type: integer
    MetricsDetailAggCollection:
      allOf:
        - $ref: '#/components/schemas/MetricsAggCollection'
        - $ref: '#/components/schemas/MetricsDetail'
    MetricsSummaryAggCollection:
      allOf:
        - $ref: '#/components/schemas/MetricsAggCollection'
        - $ref: '#/components/schemas/MetricsSummary'
    MetricsAggLabel:
      type: object
      required:
        - labelId
        - name
        - assets
      properties:
        labelId:
          $ref: '#/components/schemas/LabelIdNullable'
        name:
          type: string
          nullable: true
        assets:
          type: integer
    MetricsDetailAggLabel:
      allOf:
        - $ref: '#/components/schemas/MetricsAggLabel'
        - $ref: '#/components/schemas/MetricsDetail'
    MetricsSummaryAggLabel:
      allOf:
        - $ref: '#/components/schemas/MetricsAggLabel'
        - $ref: '#/components/schemas/MetricsSummary'
    MetricsAggStig:
      type: object
      required:
        - benchmarkId
        - assets
      properties:
        benchmarkId:
          $ref: '#/components/schemas/BenchmarkId'
        assets:
          type: integer
    MetricsDetailAggStig:
      allOf:
        - $ref: '#/components/schemas/MetricsAggStig'
        - $ref: '#/components/schemas/MetricsDetail'
    MetricsSummaryAggStig:
      allOf:
        - $ref: '#/components/schemas/MetricsAggStig'
        - $ref: '#/components/schemas/MetricsSummary'
    MetricsDetail:
      type: object
      required:
        - metrics
      properties:
        metrics:
          type: object
          additionalProperties: false
          required:
            - assessments
            - assessed
            - minTs
            - maxTs
            - maxTouchTs
            - results
            - statuses
            - findings
          properties:
            assessments:
              type: integer
            assessed:
              type: integer
            minTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            maxTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            maxTouchTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            results:
              type: object
              additionalProperties: false
              required:
                - notchecked
                - notapplicable
                - pass
                - fail
                - unknown
                - error
                - notselected
                - informational
                - fixed
              properties:
                notchecked:
                  $ref: '#/components/schemas/CollectionStatusCount'
                notapplicable:
                  $ref: '#/components/schemas/CollectionStatusCount'                 
                pass:
                  $ref: '#/components/schemas/CollectionStatusCount'
                fail:
                  $ref: '#/components/schemas/CollectionStatusCount'
                unknown:
                  $ref: '#/components/schemas/CollectionStatusCount'
                error:
                  $ref: '#/components/schemas/CollectionStatusCount'              
                notselected:
                  $ref: '#/components/schemas/CollectionStatusCount'
                informational:
                  $ref: '#/components/schemas/CollectionStatusCount'   
                fixed:
                  $ref: '#/components/schemas/CollectionStatusCount'                 
            statuses:
              type: object
              properties:
                saved:
                  $ref: '#/components/schemas/CollectionStatusCount'
                submitted:
                  $ref: '#/components/schemas/CollectionStatusCount'
                rejected:
                  $ref: '#/components/schemas/CollectionStatusCount'
                accepted:
                  $ref: '#/components/schemas/CollectionStatusCount'
            findings:
              type: object
              additionalProperties: false
              required:
                - low
                - medium
                - high
              properties:
                low:
                  type: integer
                medium:
                  type: integer
                high:
                  type: integer
    MetricsSummary:
      type: object
      # additionalProperties: false
      required:
        - metrics
      properties:
        metrics:
          type: object
          additionalProperties: false
          required:
            - assessments
            - assessed
            - minTs
            - maxTs
            - maxTouchTs
            - results
            - statuses
            - findings
          properties:
            assessments:
              type: integer
            assessed:
              type: integer
            minTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            maxTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            maxTouchTs:
              $ref: '#/components/schemas/StringDateTimeNullable'
            results:
              type: object
              additionalProperties: false
              required:
                - pass
                - fail
                - notapplicable
                - unassessed
              properties:
                pass:
                  type: integer
                fail:
                  type: integer
                notapplicable:
                  type: integer
                unassessed:
                  type: integer
            statuses:
              type: object
              additionalProperties: false
              required:
                - saved
                - submitted
                - accepted
                - rejected
              properties:
                saved:
                  type: integer
                submitted:
                  type: integer
                accepted:
                  type: integer
                rejected:
                  type: integer
            findings:
              type: object
              additionalProperties: false
              required:
                - low
                - medium
                - high
              properties:
                low:
                  type: integer
                medium:
                  type: integer
                high:
                  type: integer
    ResultEngine:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/ResultEngineType'
        product:
          $ref: '#/components/schemas/String255'
        version:
          $ref: '#/components/schemas/String255'
        time:
          $ref: '#/components/schemas/StringDateTime'
        checkContent:
          $ref: '#/components/schemas/ResultEngineCheckContent'
        overrides:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ResultEngineOverride'
      required:
        - product
        - type
    ResultEngineCheckContent:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        location:
          $ref: '#/components/schemas/String255'
        component:
          $ref: '#/components/schemas/String255'
      required:
        - location
    ResultEngineOverride:
      type: object
      additionalProperties: false
      properties:
        authority:
          $ref: '#/components/schemas/String255'
        oldResult:
          $ref: '#/components/schemas/ReviewResult'
        newResult:
          $ref: '#/components/schemas/ReviewResult'
        remark:
          $ref: '#/components/schemas/String255'
        time:
          $ref: '#/components/schemas/StringDateTime'
      required:
        - authority
        - oldResult
        - newResult
    ResultEngineType:
      type: string
      enum:
        - scap
        - script
        - other
    ReviewAsset:
      type: object
      required:
        - ruleId
        - result
        - detail
        - comment
        - status
        - userId
        - username
        - ts
        - touchTs
      properties:
        ruleId:
          $ref: '#/components/schemas/String255'
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/CommentaryString'
        comment:
          $ref: '#/components/schemas/CommentaryString'
        autoResult:
          type: boolean
        status:
          $ref: '#/components/schemas/ReviewStatusRead'
        userId:
          $ref: '#/components/schemas/StringUuid'
        username:
          $ref: '#/components/schemas/String255'
        ts:
          $ref: '#/components/schemas/StringDateTime'
        touchTs:
          $ref: '#/components/schemas/StringDateTime'
        metadata:
          $ref: '#/components/schemas/Metadata'
        history:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistory'
        stigs:
          type: array
          items:
            type: string
        rule:
          $ref: '#/components/schemas/RuleAbbr'
    ReviewAssetRulePatch:
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        detail:
          $ref: '#/components/schemas/CommentaryString'
        comment:
          $ref: '#/components/schemas/CommentaryString'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusWrite'
    ReviewAssetPost:
      type: object
      required:
        - ruleId
        - result
        - detail
        - comment
      additionalProperties: false
      properties:
        ruleId:
          $ref: '#/components/schemas/String255'
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/CommentaryStringNullable'
        comment:
          $ref: '#/components/schemas/CommentaryStringNullable'
        autoResult:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusWrite'
    ReviewAssetRulePut:
      type: object
      required:
        - result
        - detail
        - comment
      additionalProperties: false
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/CommentaryStringNullable'
        comment:
          $ref: '#/components/schemas/CommentaryStringNullable'
        autoResult:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusWrite'
    ReviewAssetRuleRead:
      type: object
      required:
        - result
        - detail
        - comment
        - userId
        - username
        - ts
        - status
        - touchTs
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/CommentaryString'
        comment:
          $ref: '#/components/schemas/CommentaryString'
        autoResult:
          type: boolean
        userId:
          $ref: '#/components/schemas/StringUuid'
        username:
          $ref: '#/components/schemas/String255'
        ts:
          $ref: '#/components/schemas/StringDateTime'
        touchTs:
          $ref: '#/components/schemas/StringDateTime'
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusRead'
        history:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistory'
        stigs:
          type: array
          items:
            type: string
        rule:
          $ref: '#/components/schemas/RuleAbbr'
    ReviewAssetWrite:
      type: object
      required:
        - ruleId
        - result
        - detail
        - comment
        - autoResult
      additionalProperties: false
      properties:
        ruleId:
          $ref: '#/components/schemas/String255'
        result:
          $ref: '#/components/schemas/ReviewResult'
        detail:
          $ref: '#/components/schemas/StringMaxNullable'
        comment:
          $ref: '#/components/schemas/StringMaxNullable'
        autoResult:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusRestrictedWrite'
    ReviewBatch:
      type: object
      required:
        - source
        - assets
        - rules
      additionalProperties: false
      properties:
        source:
          $ref: '#/components/schemas/ReviewBatchSource'
        assets:
          $ref: '#/components/schemas/ReviewBatchAssetsCriteria'
        rules:
          $ref: '#/components/schemas/ReviewBatchRulesCriteria'
        action:
          $ref: '#/components/schemas/ReviewBatchAction'
        updateFilters:
          type: array
          items:
            $ref: '#/components/schemas/ReviewBatchFilter'
        dryRun:
          type: boolean
          default: false
    ReviewBatchAction:
      type: string
      enum:
        - insert
        - update
        - merge
    ReviewBatchAssetsCriteria:
      oneOf:
        - $ref: '#/components/schemas/ReviewBatchCriteria_AssetIds'
        - $ref: '#/components/schemas/ReviewBatchCriteria_BenchmarkIds'
    ReviewBatchRulesCriteria:
      oneOf:
        - $ref: '#/components/schemas/ReviewBatchCriteria_RuleIds'
        - $ref: '#/components/schemas/ReviewBatchCriteria_BenchmarkIds'
    ReviewBatchCriteria_AssetIds:
      type: object
      required:
        - assetIds
      additionalProperties: false
      properties:
        assetIds:
          type: array
          minItems: 1
          maxItems: 2500
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssetId'
    ReviewBatchCriteria_BenchmarkIds:
      type: object
      required:
        - benchmarkIds
      additionalProperties: false
      properties:
        benchmarkIds:
          type: array
          minItems: 1
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BenchmarkId'
    ReviewBatchCriteria_RuleIds:
      type: object
      required:
        - ruleIds
      additionalProperties: false
      properties:
        ruleIds:
          type: array
          minItems: 1
          maxItems: 500
          uniqueItems: true
          items:
            $ref: '#/components/schemas/String255'
    ReviewBatchFilter:
      oneOf:
        - $ref: '#/components/schemas/ReviewBatchFilter_String'
        - $ref: '#/components/schemas/ReviewBatchFilter_Result'
        - $ref: '#/components/schemas/ReviewBatchFilter_Status'
        - $ref: '#/components/schemas/ReviewBatchFilter_Date'
        - $ref: '#/components/schemas/ReviewBatchFilter_User'
    ReviewBatchFilter_String:
      type: object
      required:
        - field
        - value
      additionalProperties: false
      properties:
        field:
          type: string
          enum:
            - detail
            - comment
            - statusText
        condition:
          type: string
          default: 'equals'
          enum:
            - equals
            - contains
            - beginsWith
            - endsWith
        value:
          type: string
    ReviewBatchFilter_Date:
      type: object
      required:
        - field
        - value
      additionalProperties: false
      properties:
        field:
          type: string
          enum:
            - ts
            - statusTs
            - touchTs
        condition:
          type: string
          default: 'equals'
          enum:
            - equals
            - lessThan
            - greaterThan
        value:
          $ref: '#/components/schemas/StringDateTime'
    ReviewBatchFilter_Result:
      type: object
      required:
        - field
        - value
      additionalProperties: false
      properties:
        field:
          type: string
          enum:
            - result
        condition:
          type: string
          default: 'equals'
          enum:
            - equals
            - notequal
        value:
          $ref: '#/components/schemas/ReviewResult'
    ReviewBatchFilter_Status:
      type: object
      required:
        - field
        - value
      additionalProperties: false
      properties:
        field:
          type: string
          enum:
            - statusLabel
            - status
        condition:
          type: string
          default: 'equals'
          enum:
            - equals
            - notequal
        value:
          $ref: '#/components/schemas/ReviewStatusLabel'
    ReviewBatchFilter_User:
      type: object
      required:
        - field
        - value
      additionalProperties: false
      properties:
        field:
          type: string
          enum:
            - userId
            - statusUserId
        condition:
          type: string
          default: 'equals'
          enum:
            - equals
            - notequal
        value:
          $ref: '#/components/schemas/StringIntId'
          
      
    ReviewBatchSource:
      type: object
      required:
        - review
      additionalProperties: false
      properties:
        review:
          $ref: '#/components/schemas/ReviewAssetRulePatch'
    
    ReviewBatchResponseDryRun:
      type: object
      required:
      - willInsert
      - willUpdate
      - willFailValidation
      - validationErrors
      additionalProperties: false
      properties:
        willInsert:
          type: integer
        willUpdate:
          type: integer
        willFailValidation:
          type: integer
        validationErrors:
          type: array
          items:
            type: object
            properties:
              assetId:
                $ref: '#/components/schemas/AssetId'
              ruleId:
                $ref: '#/components/schemas/String255'
              error:
                $ref: '#/components/schemas/String255'
     
    ReviewBatchResponse:
      type: object
      required:
        - inserted
        - updated
        - failedValidation
        - validationErrors
      additionalProperties: false
      properties:
        inserted:
          type: integer
        updated:
          type: integer
        failedValidation:
          type: integer
        validationErrors:
          type: array
          items:
            type: object
            properties:
              assetId:
                $ref: '#/components/schemas/AssetId'
              ruleId:
                $ref: '#/components/schemas/String255'
              error:
                $ref: '#/components/schemas/String255'
    ReviewHistory:
      type: object
      required:
        - result
        - detail
        - comment
        - status
        - userId
        - username
        - ts
        - touchTs
      additionalProperties: false
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/CommentaryString'
        comment:
          $ref: '#/components/schemas/CommentaryString'
        autoResult:
          type: boolean
        status:
          $ref: '#/components/schemas/ReviewStatusRead'
        userId:
          $ref: '#/components/schemas/StringUuid'
        username:
          $ref: '#/components/schemas/String255'
        ts:
          $ref: '#/components/schemas/StringDateTime'
        touchTs:
          $ref: '#/components/schemas/StringDateTime'
    ReviewHistoryAsset:
      type: object
      required:
        - assetId
        - reviewHistories
      additionalProperties: false
      properties:
        assetId:
          $ref: '#/components/schemas/String255'
        reviewHistories: 
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistoryRule'
    ReviewHistoryRule:
      type: object
      required:
        - ruleId
        - history
      additionalProperties: false
      properties:
        ruleId:
          $ref: '#/components/schemas/String255'       
        history:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistory'

    ReviewHistoryDeleted:     
      type: object
      required:
        - HistoryEntriesDeleted
      additionalProperties: false
      properties:
        HistoryEntriesDeleted: 
          type: integer   
    ReviewHistoryStats:
      type: object
      required:
        - collectionHistoryEntryCount
        - oldestHistoryEntryDate
      additionalProperties: false
      properties:
        collectionHistoryEntryCount: 
          type: integer
        oldestHistoryEntryDate: 
          $ref: '#/components/schemas/StringDateTime'
        assetHistoryEntryCounts:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistoryStatsAsset'
    ReviewHistoryStatsAsset:
      type: object
      required: 
        - assetId
        - historyEntryCount
        - oldestHistoryEntry
      additionalProperties: false
      properties:
        assetId:
          $ref: '#/components/schemas/String255'
        historyEntryCount:
          type: integer
        oldestHistoryEntry:
          type: string
          nullable: true
    ReviewResult:
      type: string
      enum:
        - fail
        - pass
        - notapplicable
        - notchecked
        - unknown
        - error
        - notselected
        - informational
        - fixed
    ReviewStatusLabel:
      type: string
      enum:
        - saved
        - submitted
        - accepted
        - rejected
    ReviewStatusLabelRestricted:
      type: string
      enum:
        - saved
        - submitted
    ReviewStatusWrite:
      oneOf:
        - $ref: '#/components/schemas/ReviewStatusLabel'
        - type: object
          required:
            - label
            - text
          additionalProperties: false
          properties:
            label:
              $ref: '#/components/schemas/ReviewStatusLabel'
            text:
              $ref: '#/components/schemas/String255Nullable'
    ReviewStatusRestrictedWrite:
      oneOf:
        - $ref: '#/components/schemas/ReviewStatusLabelRestricted'
        - type: object
          required:
            - label
            - text
          additionalProperties: false
          properties:
            label:
              $ref: '#/components/schemas/ReviewStatusLabelRestricted'
            text:
              $ref: '#/components/schemas/String255Nullable'
    ReviewStatusRead:
      type: object
      required:
        - label
        - text
        - user
        - ts
      additionalProperties: false
      properties:
        label:
          $ref: '#/components/schemas/ReviewStatusLabel'
        text:
          $ref: '#/components/schemas/String255Nullable'
        user:
          $ref: '#/components/schemas/UserBasic'
        ts:
          $ref: '#/components/schemas/StringDateTime'
    ReviewPostResponse:
      type: object
      required:
        - rejected
        - affected
      additionalProperties: false
      properties:
        rejected:
          type: array
          items:
            type: object
            properties:
              ruleId:
                $ref: '#/components/schemas/String255'
              reason:
                $ref: '#/components/schemas/String255'
        affected:
          type: object
          properties:
            updated:
              type: number
            inserted:
              type: number
    ReviewRead:
      type: object
      required:
        - assetId
        - assetName
        - ruleId
        - result
        - detail
        - comment
        - userId
        - username
        - ts
        - touchTs
        - status
      additionalProperties: false
      properties:
        assetId:
          $ref: '#/components/schemas/StringUuid'
        assetName:
          $ref: '#/components/schemas/String255'
        assetLabelIds:
          type: array
          items:
            $ref: '#/components/schemas/LabelId'              
        ruleId:
          $ref: '#/components/schemas/String255'
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultEngine:
          $ref: '#/components/schemas/ResultEngine'
        detail:
          $ref: '#/components/schemas/StringMaxNullable'
        comment:
          $ref: '#/components/schemas/StringMaxNullable'
        autoResult:
          type: boolean
        userId:
          $ref: '#/components/schemas/StringUuid'
        username:
          $ref: '#/components/schemas/String255'
        ts:
          $ref: '#/components/schemas/StringDateTime'
        touchTs:
          $ref: '#/components/schemas/StringDateTime'
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatusRead'
        stigs:
          type: array
          items:
            type: string
        rule:
          $ref: '#/components/schemas/RuleAbbr'
    Revision:
      type: object
      required:
        - benchmarkId
        - revisionStr
        - version
        - release
        - benchmarkDate
        - status
        - statusDate
        - description
        - ruleCount
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        revisionStr:
          type: string
        version:
          type: string
        release:
          type: string
        benchmarkDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          nullable: true
        statusDate:
          type: string
          format: date
        description:
          type: string
        ruleCount:
          type: integer
    RevisionBasic:
      type: object
      required:
        - benchmarkId
        - revisionStr      
      additionalProperties: false
      properties:
        benchmarkId:
          $ref: '#/components/schemas/String255'
        revisionStr:
          $ref: '#/components/schemas/RevisionStr'
    RevisionStr:
      type: string
      pattern: ^(V\d{1,3}R\d{1,3}(\.\d{1,3})?|latest)$
    RuleAbbr:
      type: object
      required:
        - ruleId
        - version
        - title
        - severity      
      additionalProperties: false
      properties:
        ruleId:
          type: string
        version:
          type: string
        title:
          type: string
        severity:
          type: string
    RuleProjected:
      type: object
      required:
        - ruleId
        - version
        - title
        - severity
        - groupId
        - groupTitle
      additionalProperties: false
      properties:
        ruleId:
          type: string
        version:
          type: string
        title:
          type: string
        severity:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        detail:
          type: object
          additionalProperties: false 
          properties:
            weight:
              type: string
            vulnDiscussion:
              type: string
            falsePositives:
              type: string
              nullable: true
            falseNegatives:
              type: string
              nullable: true
            documentable:
              type: string
            mitigations:
              type: string
              nullable: true
            severityOverrideGuidance:
              type: string
              nullable: true
            potentialImpacts:
              type: string
              nullable: true
            thirdPartyTools:
              type: string
              nullable: true
            mitigationControl:
              type: string
              nullable: true
            responsibility:
              type: string   
              nullable: true           
        ccis:
          type: array
          items:
            $ref: '#/components/schemas/CciBasic'
        checks:
          type: array
          items:
            $ref: '#/components/schemas/Check'
        fixes:
          type: array
          items:
            $ref: '#/components/schemas/Fix'
    RuleSeverity:
      type: string
      enum:
        - high
        - medium
        - low
    SCAPMap:
      type: object
      additionalProperties: false
      properties:
        scapBenchmarkId:
          type: string
        benchmarkId:
          type: string
    STIG:
      type: object
      required:
        - benchmarkId
        - title
        - lastRevisionStr
        - lastRevisionDate
        - ruleCount
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        title:
          type: string
        status:
          type: string
          nullable: true
        lastRevisionStr:
          type: string
        lastRevisionDate:
          type: string
          format: date
          nullable: true
        ruleCount:
          type: integer
        revisionStrs:
          type: array
          items:
           $ref: '#/components/schemas/RevisionStr'     
    STIGPostResponse:
      type: object
    StigAsset:
      type: object
      required:
        - benchmarkId
        - assetId
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        assetId:
          type: string
    StigAssetProjected:
      type: object
      required:
        - benchmarkId
        - asset
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        asset:
          $ref: '#/components/schemas/AssetBasic'
    StigGrantProjected:
      type: object
      required:
        - benchmarkId
        - users
      additionalProperties: false
      properties:
        benchmarkId:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
    String255:
      type: string
      maxLength: 255
    String255Nullable:
      type: string
      maxLength: 255
      nullable: true
    StringDateTime:
      type: string
      format: date-time
    StringDateTimeNullable:
      type: string
      format: date-time
      nullable: true
    StringHexColor:
      type: string
      pattern: "^[a-fA-F0-9]{6}$"
      example: "aa33cc"
    StringIntId:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^[0-9]{1,6}$"
    StringIntIdReadOnly:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^[0-9]{1,6}$"
      readOnly: true
    StringIntIdNullable:
      type: string
      minLength: 1
      maxLength: 10
      pattern: "^[0-9]{1,6}$"
      nullable: true
    StringMax:
      type: string
      maxLength: 16777215
    StringMaxNullable:
      type: string
      maxLength: 16777215
      nullable: true
    StringUuid:
      type: string
      maxLength: 36
    StringUuidReadOnly:
      type: string
      maxLength: 36
      readOnly: true
    StringUuidNullable:
      type: string
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      nullable: true
    UnreviewedAsset:
      type: object
      required:
        - assetId
        - name
        - labels
        - unreviewed
      additionalProperties: false
      properties:
        assetId:
          $ref: '#/components/schemas/StringUuid'
        name:
          $ref: '#/components/schemas/String255'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelBasic'
        unreviewed:
          type: array
          items:
            $ref: '#/components/schemas/UnreviewedAssetItem'
    UnreviewedAssetItem:
      type: object
      required:
        - result
        - ruleId
        - groupId
        - benchmarkId
      additionalProperties: false
      properties:
        result:
          $ref: '#/components/schemas/ChecklistResultUnreviewed'
        ruleId:
          $ref: '#/components/schemas/String255'
        ruleTitle:
          $ref: '#/components/schemas/StringMax'
        groupId:
          $ref: '#/components/schemas/String255'
        groupTitle:
          $ref: '#/components/schemas/StringMax'
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        benchmarkId:
          $ref: '#/components/schemas/String255'
    UnreviewedRule:
      type: object
      required:
        - ruleId
        - groupId
        - benchmarkId
        - unreviewed
      additionalProperties: false
      properties:
        ruleId:
          $ref: '#/components/schemas/String255'
        ruleTitle:
          $ref: '#/components/schemas/StringMax'
        groupId:
          $ref: '#/components/schemas/String255'
        groupTitle:
          $ref: '#/components/schemas/StringMax'
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        benchmarkId:
          $ref: '#/components/schemas/String255'
        unreviewed:
          type: array
          items:
            $ref: '#/components/schemas/UnreviewedRuleItem'
    UnreviewedRuleItem:
      type: object
      required:
        - result
        - assetId
        - name
        - labels
      additionalProperties: false
      properties:
        result:
          $ref: '#/components/schemas/ChecklistResultUnreviewed'
        assetId:
          $ref: '#/components/schemas/StringUuid'
        name:
          $ref: '#/components/schemas/String255'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelBasic'
    User:
      type: object
      required:
        - userId
        - username
        - displayName
        - email  
      additionalProperties: false
      properties:
        userId:
          type: string
          readOnly: true
        username:
          type: string
        displayName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
    UserProjected:
      type: object
      required:
        - userId
        - username
        - displayName
        - email  
      additionalProperties: false
      properties:
        userId:
          type: string
          readOnly: true
        username:
          type: string
        displayName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        privileges: 
            $ref: '#/components/schemas/UserPrivileges'
        collectionGrants:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGrantProjected'
        statistics:
          $ref: '#/components/schemas/UserStatistics'          
    UserBasic:
      type: object
      required: 
        - userId
        - username
      additionalProperties: false
      properties:
        userId:
          type: string
          readOnly: true
        username:
          type: string
    UserCreateOrReplace:
      required:
        - username
        - collectionGrants
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
        collectionGrants:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGrant'
    UserGrant:
      type: object
      required:
        - userId
        - accessLevel
      additionalProperties: false
      properties:
        userId:
          type: string
        accessLevel:
          type: integer
          minimum: 1
          maximum: 4
    UserGrantProjected:
      type: object
      required:
        - user          
        - accessLevel
      additionalProperties: false
      properties:
        user:
          type: object
          properties:
            userId:
              type: string
            username:
              type: string
          required:
            - userId
            - username
        accessLevel:
          type: integer
          minimum: 1
          maximum: 4
    UserPrivileges: 
      type: object
      additionalProperties: false
      properties:
        canCreateCollection:
          type: boolean
        canAdmin:
          type: boolean          
    UserStatistics:
      type: object
      required: 
        - created
        - collectionGrantCount
        - lastAccess
        - lastClaims
      additionalProperties: false
      properties:
        created:
          type: string
          format: date-time
        collectionGrantCount:
          type: integer
        lastAccess:
          type: integer
          nullable: true
        lastClaims:
          type: object
    UserUpdate:
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
        collectionGrants:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGrant'
  parameters:
    AssetIdArrayQuery:
      name: assetId
      in: query
      description: A query parameter that identifies an Asset
      schema:
        type: array
        uniqueItems: true
        minLength: 1        
        items:
          type: string
    AssetIdPath:
      name: assetId
      in: path
      description: A path parameter that identifies an Asset
      required: true
      schema:
        type: string
    AssetIdQuery:
      name: assetId
      in: query
      description: A query parameter that identifies an Asset
      schema:
        type: string
    AssetProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - statusStats
            - stigs
            - stigGrants
    BenchmarkIdArrayQuery:
      name: benchmarkId
      in: query
      description: A query parameter that identifies a STIG
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
    BenchmarkIdPath:
      name: benchmarkId
      in: path
      description: A path parameter that identifies a STIG
      required: true
      schema:
        type: string
    BenchmarkIdQuery:
      name: benchmarkId
      in: query
      description: A query parameter that identifies a STIG
      schema:
        type: string
    CciPath:
      name: cci
      in: path
      description: A path parameter that identifies a CCI
      required: true
      schema:
        type: string
    CciProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1    
        items:
          type: string
          enum:
            - emassAp
            - stigs
            - references
    CciQuery:
      name: cci
      in: query
      description: A query parameter that identifies a CCI
      schema:
        type: string
    ChecklistProjectionQuery:
      name: projection
      in: query
      description: Optional properties to return. Selecting "checks" or "fixes" will also select "fullrules"
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - cci
            - fullrules
            - checks
            - fixes
    CklModeQuery:
      name: mode
      in: query
      description: A query parameter that describes the CKL mode
      schema:
        type: string
        default: mono
        enum:
          - multi
          - mono
    CollectionIdPath:
      name: collectionId
      in: path
      description: A path parameter that identifies a Collection
      required: true
      schema:
        type: string
    CollectionIdQuery:
      name: collectionId
      required: true
      in: query
      description: A query parameter that identifies a Collection
      schema:
        type: string
    CollectionIdArrayQuery:
      name: collectionId
      required: false
      in: query
      description: A query parameter that identifies a Collection
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
    CollectionProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - assets
            - grants
            - owners
            - statistics
            - stigs
            - labels
    CollectionsProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - owners
            - statistics
            - labels
    EndDateQuery:
      name: endDate
      in: query
      description: History entries with a timestamp after the specified end date.
      schema:
        $ref: '#/components/schemas/Date'
    ElevateQuery:
      name: elevate
      in: query
      description: Elevate the user context for this request if user is permitted (canAdmin)
      schema:
        type: boolean
    FindingAggregatorQuery:
      name: aggregator
      required: true
      in: query
      description: Aggregate the findings on this property
      schema:
        type: string
        uniqueItems: true
        minLength: 1
        enum:
          - ruleId
          - groupId
          - cci
    FindingProjectionQuery:
      name: projection
      in: query
      description: Optional properties to return
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - assets
            - groups
            - rules
            - stigs
            - ccis
    GroupIdPath:
      name: groupId
      in: path
      description: A path parameter that identifies a Group
      required: true
      schema:
        type: string
    GroupIdQuery:
      name: groupId
      in: query
      description: A query parameter that identifies a Group
      schema:
        type: string
    GroupProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - rules
    JsonPathQuery:
      name: jsonpath
      in: query
      description: A JSONPath expression
      schema:
        type: string
        maxLength: 255
    LabelIdPath:
      name: labelId
      in: path
      required: true
      description: A path parameter that specifies a Label
      schema:
        $ref: '#/components/schemas/LabelId'
    LabelIdQuery:
      name: labelId
      in: query
      description: Selects Assets by labelId
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          $ref: '#/components/schemas/LabelId'
    LabelMatchQuery:
      name: labelMatch
      in: query
      description: Selectes Assets without labels
      schema:
        type: string
        enum:
          - 'null'
    LabelNameQuery:
      name: labelName
      in: query
      description: Selectes Assets by label name
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          $ref: '#/components/schemas/LabelName'
    MetadataKeyPath:
      name: key
      in: path
      required: true
      description: A path parameter that specifies a metadata key
      schema:
        pattern: '^([\w\.]+)$'
        type: string
    MetadataQuery:
      name: metadata
      in: query
      description: A query parameter that specifies metadata key:value pairs to select matching Objects
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          pattern: '^([\w\.]+:.*?)$'
          type: string
    MetricsFormatQuery:
      name: format
      in: query
      description: The format of the response body
      schema:
        type: string
        default: 'json'
        enum:
          - json
          - csv
    NameQuery:
      name: name
      in: query
      description: Matches against the name according to the `name-match` parameter
      schema:
        type: string
    NameMatchQuery:
      name: name-match
      in: query
      description: How to match against the `name` parameter
      schema:
        type: string
        default: exact
        enum:
          - exact
          - startsWith
          - endsWith
          - contains
    PoamAggregatorQuery:
      name: aggregator
      required: true
      in: query
      description: Aggregate the findings on this property
      schema:
        type: string
        enum:
          - ruleId
          - groupId
    RetentionDateQuery:
      name: retentionDate
      in: query
      description: Delete history entries with a timestamp earlier than the specified retention date.
      required: true
      schema:
        $ref: '#/components/schemas/Date'
    ReviewProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - metadata
            - rule
            - stigs
            - history
    ReviewHistoryStatsProjectionQuery:
      name: projection
      in: query
      description: Return review history statistics with the specified level of granularity.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - asset
    ReviewsProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - metadata
            - rule
            - stigs
    ReviewResultQuery:
      name: result
      in: query
      schema:
        $ref: '#/components/schemas/ReviewResult'
    ReviewRulesQuery:
      name: rules
      in: query
      schema:
        type: string
        default: current-mapped
        enum:
          - all
          - current
          - current-mapped
          - not-current
          - not-current-mapped
    ReviewStatusQuery:
      name: status
      in: query
      schema:
        $ref: '#/components/schemas/ReviewStatusLabel'
    RevisionStrPath:
      name: revisionStr
      in: path
      description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]
      required: true
      schema:
        pattern: ^(V\d+R\d+(\.\d+)?|latest)$
        type: string
    RevisionStrQuery:
      name: revisionStr
      in: query
      description: Selects Reviews mapped to a Revision [ V{version_num}R{release_num} |'latest' ]; requires benchmarkId
      schema:
        pattern: ^(V\d+R\d+(\.\d+)?|latest)$
        type: string
    RuleIdPath:
      name: ruleId
      in: path
      description: A path parameter that identifies a Rule
      required: true
      schema:
        type: string
    RuleIdQuery:
      name: ruleId
      in: query
      description: Selects Reviews of a Rule
      schema:
        type: string
    RuleProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        items:
          type: string
          enum:
            - detail
            - ccis
            - checks
            - fixes
    RuleSeverityQuery:
      name: severity
      in: query
      description: Selects Rules with the specified severity
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1
        maxLength: 2
        items:
          $ref: '#/components/schemas/RuleSeverity'
    StartDateQuery:
      name: startDate
      in: query
      description: History entries with a timestamp before the specified start date.
      schema:
        $ref: '#/components/schemas/Date'            
    StigAssetsProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - restrictedUserAccess
    UnreviewedAssetsProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the `unreviewed` objects.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - ruleTitle
            - groupTitle
    UnreviewedRulesProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - ruleTitle
            - groupTitle
    UserAccessLevelQuery:
      name: accessLevel
      in: query
      schema:
        $ref: '#/components/schemas/AccessLevel'
    UserIdPath:
      name: userId
      in: path
      description: A path parameter that identifies a User
      required: true
      schema:
        type: string
    UserIdQuery:
      name: userId
      in: query
      description: A path parameter that identifies a User
      schema:
        type: string
    UsernameQuery:
      name: username
      in: query
      description: Matches against the username according to the `username-match` parameter
      schema:
        type: string
    UsernameMatchQuery:
      name: username-match
      in: query
      description: How to match against the `username` parameter
      schema:
        type: string
        default: exact
        enum:
          - exact
          - startsWith
          - endsWith
          - contains
    UserProjectionQuery:
      name: projection
      in: query
      description: Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        uniqueItems: true
        minLength: 1        
        items:
          type: string
          enum:
            - collectionGrants
            - statistics
  responses:
    Forbidden:
      description: The requesting User does not have access rights to the content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    oauth:
      type: openIdConnect
      openIdConnectUrl: http://localhost:8080/realms/stigman/.well-known/openid-configuration

# supported oauth scopes:
# - stig-manager
# - 'stig-manager:op'
# - 'stig-manager:op:read'
# - 'stig-manager:stig'
# - 'stig-manager:stig:read'
# - 'stig-manager:collection'
# - 'stig-manager:collection:read'
# - 'stig-manager:user'
# - 'stig-manager:user:read'